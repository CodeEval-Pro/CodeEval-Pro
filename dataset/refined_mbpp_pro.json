[
    {
        "id": 0,
        "raw_problem": "# Write a function to find the shared elements from the given two lists.\ndef similar_elements(test_tup1, test_tup2):\n",
        "raw_solution": "  return tuple(set(test_tup1) & set(test_tup2))\n",
        "new_problem": "# Given a list of lists, write a function to find the shared elements across all the lists.\ndef shared_elements(lists):\n",
        "new_solution": "    if not lists:\n        return ()\n    \n    # Start with the first list converted to a tuple\n    shared = tuple(lists[0])\n    \n    # Iterate through the remaining lists\n    for current_list in lists[1:]:\n        shared = similar_elements(shared, tuple(current_list))\n        # If at any point there are no shared elements, we can return early\n        if not shared:\n            return ()\n    \n    return shared\n",
        "test_code": "assert shared_elements([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == (3,)\nassert shared_elements([[1, 2], [2, 3], [3, 4]]) == ()\nassert shared_elements([[1, 2, 3], [2, 3, 4], [3, 4, 5], [2, 3]]) == (3,)\nassert shared_elements([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == (1, 2, 3)\nassert shared_elements([]) == ()"
    },
    {
        "id": 1,
        "raw_problem": "# Write a python function to identify non-prime numbers.\nimport math\ndef is_not_prime(n):\n",
        "raw_solution": "    if n == 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n",
        "new_problem": "# Write a Python function to identify the first N non-prime numbers in a given range [start, end]. If the count of non-prime numbers in the range is less than N, return all non-prime numbers found.\n\ndef first_n_non_primes(start, end, N):\n",
        "new_solution": "    non_primes = []\n    for num in range(start, end + 1):\n        if is_not_prime(num):\n            non_primes.append(num)\n        if len(non_primes) == N:\n            break\n    return non_primes\n",
        "test_code": "assert first_n_non_primes(1, 10, 3) == [1, 4, 6]\nassert first_n_non_primes(10, 20, 5) == [10, 12, 14, 15, 16]\nassert first_n_non_primes(20, 30, 10) == [20, 21, 22, 24, 25, 26, 27, 28, 30]\nassert first_n_non_primes(1, 5, 10) == [1, 4]"
    },
    {
        "id": 2,
        "raw_problem": "# Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n",
        "raw_solution": "  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n",
        "new_problem": "# Given a list of lists, where each sublist contains integers, write a function to find the n largest integers from each sublist and return them in a single list, sorted in descending order.\ndef find_n_largest_from_lists(lists: list, n: int) -> list:\n",
        "new_solution": "    result = []\n    for sublist in lists:\n        # Find the n largest numbers in the current sublist\n        largest_from_sublist = heap_queue_largest(sublist, n)\n        result.extend(largest_from_sublist)  # Add them to the result list\n    \n    # Sort the final result in descending order\n    result.sort(reverse=True)\n    return result\n",
        "test_code": "assert find_n_largest_from_lists([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]], 2) == [1001, 1000, 39, 37, 27, 26, 5, 4]\nassert find_n_largest_from_lists([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]], 1) == [1001, 39, 27, 5]\nassert find_n_largest_from_lists([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]], 3) == [1001, 1000, 857, 39, 37, 35, 27, 26, 18, 5, 4, 3]"
    },
    {
        "id": 3,
        "raw_problem": "# Write a python function to check whether the two numbers differ at one bit position only or not.\ndef is_Power_Of_Two(x: int): \n    return x > 0 and (x & (x - 1)) == 0\ndef differ_At_One_Bit_Pos(a: int,b: int):\n",
        "raw_solution": "    return is_Power_Of_Two(a ^ b)\n",
        "new_problem": "# Given a list of integers, find the number of pairs of integers in the list that differ at exactly one bit position. For example, in the list [1, 2, 3, 4], the pairs (1, 2), (1, 4), and (2, 3) differ at exactly one bit position.\ndef count_pairs_differ_at_one_bit_pos(nums):\n",
        "new_solution": "    count = 0\n    n = len(nums)\n    \n    # Check all pairs of integers in the list\n    for i in range(n):\n        for j in range(i + 1, n):\n            if differ_At_One_Bit_Pos(nums[i], nums[j]):\n                count += 1\n                \n    return count\n",
        "test_code": "assert count_pairs_differ_at_one_bit_pos([1, 2, 3, 4]) == 2\nassert count_pairs_differ_at_one_bit_pos([7, 8, 9, 10]) == 2 \nassert count_pairs_differ_at_one_bit_pos([1, 3, 5, 7]) == 4\nassert count_pairs_differ_at_one_bit_pos([2, 4, 8, 16]) == 0"
    },
    {
        "id": 4,
        "raw_problem": "# Write a function to find all words which are at least 4 characters long in a string.\nimport re\ndef find_char_long(text):\n",
        "raw_solution": "  return (re.findall(r\"\\b\\w{4,}\\b\", text))\n",
        "new_problem": "# Given a list of strings, write a function to find all words which are at least 4 characters long in each string and return a list of lists where each sublist contains the words from the corresponding string.\n\ndef find_all_char_long(texts):\n",
        "new_solution": "  return [find_char_long(text) for text in texts]\n",
        "test_code": "assert find_all_char_long(['This is a test', 'Another test string', 'Short words']) == [['This', 'test'], ['Another', 'test', 'string'], ['Short', 'words']]"
    },
    {
        "id": 5,
        "raw_problem": "# Write a function to find squares of individual elements in a list.\ndef square_nums(nums):\n",
        "raw_solution": " return [i**2 for i in nums]\n",
        "new_problem": "# Given two lists of integers, write a function to find the sum of the squares of the corresponding elements in the two lists. If the lists are of different lengths, raise a ValueError.\ndef sum_of_squares(list1, list2):\n",
        "new_solution": "    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of the same length\")\n    squares1 = square_nums(list1)\n    squares2 = square_nums(list2)\n    return [x + y for x, y in zip(squares1, squares2)]\n",
        "test_code": "assert sum_of_squares([1, 2, 3], [4, 5, 6]) == [17, 29, 45]\nassert sum_of_squares([0, 0, 0], [0, 0, 0]) == [0, 0, 0]\nassert sum_of_squares([-1, -2, -3], [1, 2, 3]) == [2, 8, 18]"
    },
    {
        "id": 6,
        "raw_problem": "# Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\ndef find_Rotations(s):\n",
        "raw_solution": "    n = len(s)\n    s += s\n    for i in range(1, n + 1):\n        if s[i: i + n] == s[0: n]:\n            return i\n    return n\n",
        "new_problem": "# Given a list of strings, write a Python function to find the minimum number of rotations required to get the same string for each string in the list. The function should return a list of integers where each integer represents the minimum number of rotations required for the corresponding string in the input list.\ndef find_Rotations_for_list(strings):\n",
        "new_solution": "    def find_Rotations(s):\n        n = len(s)\n        s += s\n        for i in range(1, n + 1):\n            if s[i: i + n] == s[0: n]:\n                return i\n        return n\n    return [find_Rotations(s) for s in strings]\n",
        "test_code": "assert find_Rotations_for_list(['abc', 'aaaa', 'abcabc']) == [3, 1, 3]\nassert find_Rotations_for_list(['', 'a', 'abab']) == [0, 1, 2]\nassert find_Rotations_for_list(['rotation', 'python', 'programming']) == [8, 6, 11]"
    },
    {
        "id": 7,
        "raw_problem": "# Write a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch):\n",
        "raw_solution": "    s = s.replace(ch, '', 1)\n    s = s[::-1].replace(ch, '', 1)[::-1]\n    return s \n",
        "new_problem": "# Write a Python function to remove all occurrences of a given character from a list of strings. The function should return a new list with all the strings modified according to the removal of the specified character.\ndef remove_all_occurrences(lst, ch):\n",
        "new_solution": "    return [remove_Occ(s, ch) for s in lst]\n",
        "test_code": "assert remove_all_occurrences(['apple', 'banana', 'cherry'], 'a') == ['pple', 'bnan', 'cherry']\nassert remove_all_occurrences(['hello', 'world'], 'l') == ['heo', 'word']\nassert remove_all_occurrences(['python', 'programming'], 'g') == ['python', 'prorammin']"
    },
    {
        "id": 8,
        "raw_problem": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(M):\n",
        "raw_solution": "    result = sorted(M, key=sum)\n    return result\n",
        "new_problem": "# Given a list of matrices, write a function to sort each matrix in ascending order according to the sum of its rows, and then return a list of the sorted matrices. If two matrices have the same sum, they should remain in the order they were provided.\ndef sort_matrices(matrices):\n",
        "new_solution": "    sorted_matrices = [sort_matrix(matrix) for matrix in matrices]\n    return sorted(sorted_matrices, key=lambda x: sum(sum(row) for row in x))\n",
        "test_code": "assert sort_matrices([[[3, 2, 1], [6, 5, 4]], [[1, 2, 3], [4, 5, 6]]]) == [[[3, 2, 1], [6, 5, 4]], [[1, 2, 3], [4, 5, 6]]]\nassert sort_matrices([[[1, 2], [3, 4]], [[5, 6], [7, 8]]]) == [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]\nassert sort_matrices([[[9, 8], [7, 6]], [[5, 4], [3, 2]]]) == [[[3, 2], [5, 4]], [[7, 6], [9, 8]]]"
    },
    {
        "id": 9,
        "raw_problem": "# Write a python function to find the volume of a triangular prism.\ndef find_Volume(l,b,h):\n",
        "raw_solution": "    return ((l * b * h) / 2) \n",
        "new_problem": "# Write a Python function to calculate the total volume of multiple triangular prisms given their dimensions in a list of tuples. Each tuple contains the length, base, and height of a triangular prism.\ndef total_Volume(prisms):\n",
        "new_solution": "    total = 0 \n    for prism in prisms: \n        total += find_Volume(*prism) \n    return total\n",
        "test_code": "assert total_Volume([(2, 3, 4), (5, 6, 7)]) == 117.0\nassert total_Volume([(1, 1, 1), (2, 2, 2)]) == 4.5\nassert total_Volume([]) == 0.0"
    },
    {
        "id": 10,
        "raw_problem": "# Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nimport re\ndef text_lowercase_underscore(text):\n",
        "raw_solution": "        return bool(re.match('^[a-z]+(_[a-z]+)*$', text))\n",
        "new_problem": "# Given a list of strings, write a function that returns a list of strings which contain sequences of lowercase letters joined with an underscore. The function should filter out any strings that do not meet this criteria.\nimport re\n\ndef filter_lowercase_underscore_strings(strings):\n",
        "new_solution": "    return [s for s in strings if text_lowercase_underscore(s)]\n",
        "test_code": "assert filter_lowercase_underscore_strings(['abc_def', 'ghi_jkl', 'mno_pqr_stu', 'vwx_yz', 'ABC_DEF']) == ['abc_def', 'ghi_jkl', 'mno_pqr_stu', 'vwx_yz']\nassert filter_lowercase_underscore_strings(['123_456', 'abc_def_123', 'ghi_jkl_', '_mno_pqr']) == []\nassert filter_lowercase_underscore_strings([]) == []\nassert filter_lowercase_underscore_strings(['abc_def', 'ghi_jkl', 'mno_pqr_stu', 'vwx_yz', 'abc_def_ghi']) == ['abc_def', 'ghi_jkl', 'mno_pqr_stu', 'vwx_yz', 'abc_def_ghi']"
    },
    {
        "id": 11,
        "raw_problem": "# Write a function that returns the perimeter of a square given its side length as input.\ndef square_perimeter(a):\n",
        "raw_solution": "  return 4*a\n",
        "new_problem": "# Given a list of side lengths of squares, write a function that returns the total perimeter of all the squares.\ndef total_square_perimeter(side_lengths):\n",
        "new_solution": "  return sum(square_perimeter(a) for a in side_lengths)\n",
        "test_code": "assert total_square_perimeter([1, 2, 3]) == 24\nassert total_square_perimeter([0, 10, 20]) == 120\nassert total_square_perimeter([]) == 0\nassert total_square_perimeter([5]) == 20"
    },
    {
        "id": 12,
        "raw_problem": "# Write a function to remove characters from the first string which are present in the second string.\ndef remove_dirty_chars(string, second_string):\n",
        "raw_solution": "    for char in second_string:\n        string = string.replace(char, '')\n    return string\n",
        "new_problem": "# Given a list of strings, remove all characters from each string that are present in their corresponding string in another list. If the lists are of different lengths, ignore the extra strings in the longer list.\ndef remove_dirty_chars_from_list(strings, second_strings):\n",
        "new_solution": "    cleaned_strings = []\n    for i in range(min(len(strings), len(second_strings))):\n        cleaned_strings.append(remove_dirty_chars(strings[i], second_strings[i]))\n    return cleaned_strings\n",
        "test_code": "assert remove_dirty_chars_from_list(['hello', 'world'], ['el', 'or']) == ['ho', 'wld']\nassert remove_dirty_chars_from_list(['apple', 'banana'], ['a', 'n']) == ['pple', 'baaa']\nassert remove_dirty_chars_from_list(['', 'test'], ['', 't']) == ['', 'es']\nassert remove_dirty_chars_from_list(['programming', 'language'], ['g', 'e']) == ['prorammin', 'languag']\nassert remove_dirty_chars_from_list(['short', 'list'], ['long', 'short']) == ['shrt', 'li']"
    },
    {
        "id": 13,
        "raw_problem": "# Write a function to find whether a given array of integers contains any duplicate element.\ndef test_duplicate(arraynums):\n",
        "raw_solution": "    return len(arraynums) != len(set(arraynums))\n",
        "new_problem": "# Given a list of arrays of integers, write a function to find whether any of these arrays contain duplicate elements. If any array contains duplicates, return a list of indices of these arrays. If no array contains duplicates, return an empty list.\ndef find_duplicate_arrays(arrays):\n",
        "new_solution": "    return [i for i, array in enumerate(arrays) if test_duplicate(array)]\n",
        "test_code": "assert find_duplicate_arrays([[1, 2, 3], [4, 5, 4], [6, 7, 8]]) == [1]\nassert find_duplicate_arrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == []\nassert find_duplicate_arrays([[1, 1, 2], [3, 4, 5], [6, 6, 7]]) == [0, 2]\nassert find_duplicate_arrays([[1], [2], [3]]) == []\nassert find_duplicate_arrays([[1, 2, 2], [3, 3, 4], [5, 6, 5]]) == [0, 1, 2]"
    },
    {
        "id": 14,
        "raw_problem": "# Write a function to check if the given number is woodball or not.\ndef is_woodall(x):\n",
        "raw_solution": "    if not isinstance(x, int):\n        return False\n    if x <= 0 or x % 2 == 0:\n        return False\n    if (x == 1): \n        return True\n    x += 1 \n    i = 0\n    while (x % 2 == 0): \n        x /= 2\n        i += 1\n        if (i == x): \n            return True\n    return False\n",
        "new_problem": "# Write a function to find the first 10 woodall numbers in a given range of integers. A woodall number is defined as a number of the form W(n) = n * 2^n - 1. The function should return a list of the first 10 woodall numbers found within the given range, or an empty list if no such numbers exist within the range.\ndef find_first_10_woodall_numbers(start, end): \n    woodall_numbers = []\n    for x in range(start, end + 1):\n",
        "new_solution": "        if is_woodall(x):\n            woodall_numbers.append(x)\n            if len(woodall_numbers) == 10:\n                break\n    return woodall_numbers\n",
        "test_code": "assert find_first_10_woodall_numbers(1, 1000) == [1, 7, 23, 63, 159, 383, 895]\nassert find_first_10_woodall_numbers(1000, 2000) == []\nassert find_first_10_woodall_numbers(1, 100) == [1, 7, 23, 63]"
    },
    {
        "id": 15,
        "raw_problem": "# Write a python function to check if a given number is one less than twice its reverse.\ndef check(n):\n",
        "raw_solution": "    return n == 2 * int(str(n)[::-1]) - 1\n",
        "new_problem": "# Write a Python function to find all numbers within a given range that are one less than twice their reverse. The function should return a list of all such numbers.\ndef find_numbers_in_range(start, end):\n",
        "new_solution": "    result = []\n    for n in range(start, end + 1):\n        if check(n):\n            result.append(n)\n    return result\n",
        "test_code": "assert find_numbers_in_range(10, 100) == [73]\nassert find_numbers_in_range(100, 200) == []\nassert find_numbers_in_range(1000, 1100) == []"
    },
    {
        "id": 16,
        "raw_problem": "# Write a python function to find the largest number that can be formed with the given list of digits.\ndef find_Max_Num(arr):\n",
        "raw_solution": "    arr.sort(reverse = True)\n    return int(\"\".join(map(str,arr)))\n",
        "new_problem": "# Given a list of lists of digits, write a Python function to find the largest number that can be formed by concatenating the largest number from each list of digits.\ndef find_Max_Num_From_Lists(lists):\n",
        "new_solution": "    return int(''.join(str(find_Max_Num(lst)) for lst in lists))\n\n",
        "test_code": "assert find_Max_Num_From_Lists([[1, 3, 4], [5, 2, 9], [7, 0, 6]]) == 431952760\nassert find_Max_Num_From_Lists([[9, 9, 9], [1, 1, 1], [2, 2, 2]]) == 999111222\nassert find_Max_Num_From_Lists([[0, 0, 0], [1, 1, 1], [2, 2, 2]]) == 111222\nassert find_Max_Num_From_Lists([[5, 5, 5], [5, 5, 5], [5, 5, 5]]) == 555555555"
    },
    {
        "id": 17,
        "raw_problem": "# Write a python function to check whether the given two integers have opposite sign or not.\ndef opposite_Signs(x,y):\n",
        "raw_solution": "    return ((x ^ y) < 0) \n",
        "new_problem": "# Given a list of tuples, where each tuple contains two integers, write a Python function to count the number of tuples where the integers have opposite signs.\ndef count_Opposite_Signs(tuples_list):\n",
        "new_solution": "    count = 0\n    for x, y in tuples_list:\n        if opposite_Signs(x, y):\n            count += 1\n    return count\n\n",
        "test_code": "assert count_Opposite_Signs([(1, -1), (-2, 2), (3, 4), (-5, -6)]) == 2\nassert count_Opposite_Signs([(7, 7), (-8, 8), (9, -9), (10, 10)]) == 2\nassert count_Opposite_Signs([(-11, 11), (12, -12), (13, 13), (-14, 14)]) == 3\nassert count_Opposite_Signs([(15, 15), (16, 16), (17, 17), (18, 18)]) == 0"
    },
    {
        "id": 18,
        "raw_problem": "# Write a function to find the nth octagonal number.\ndef is_octagonal(n):\n",
        "raw_solution": "    return 3 * n * n - 2 * n \n",
        "new_problem": "# Given a list of integers, determine the sum of the first 10 octagonal numbers for each integer in the list. If an integer is less than 1, return 0 for that integer.\ndef sum_of_octagonal_numbers(lst):\n",
        "new_solution": "    result = []\n    for num in lst:\n        if num < 1:\n            result.append(0)\n        else:\n            sum_octagonal = sum(is_octagonal(i) for i in range(1, min(num, 10) + 1))\n            result.append(sum_octagonal)\n    return result\n",
        "test_code": "assert sum_of_octagonal_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 9, 30, 70, 135, 231, 364, 540, 765, 1045]\nassert sum_of_octagonal_numbers([-1, 0, 11, 12]) == [0, 0, 1045, 1045]\nassert sum_of_octagonal_numbers([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
    },
    {
        "id": 19,
        "raw_problem": "# Write a python function to count the number of substrings with the sum of digits equal to their length.\nfrom collections import defaultdict\ndef count_Substrings(s):\n",
        "raw_solution": "    n, count, sum = len(s), 0, 0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - i - 1]\n        mp[sum - i - 1] += 1\n    return count\n",
        "new_problem": "# Given a list of strings, write a Python function to count the total number of substrings across all strings where the sum of the digits of the substring equals the length of the substring. The function should return the total count of such substrings.\nfrom collections import defaultdict\n\ndef count_Substrings(s):\n",
        "new_solution": "    n, count, sum = len(s), 0, 0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - i - 1]\n        mp[sum - i - 1] += 1\n    return count\n\ndef total_count_Substrings(strings):\n    total_count = 0\n    for s in strings:\n        total_count += count_Substrings(s)\n    return total_count\n",
        "test_code": "assert total_count_Substrings(['123', '456']) == 1\nassert total_count_Substrings(['111', '222']) == 6\nassert total_count_Substrings(['1234', '5678']) == 1\nassert total_count_Substrings(['1', '2']) == 1\nassert total_count_Substrings(['12345', '67890']) == 1"
    },
    {
        "id": 20,
        "raw_problem": "# Write a python function to find smallest number in a list.\ndef smallest_num(xs):\n",
        "raw_solution": "  assert len(xs) > 0, \"invalid inputs\"\n  return min(xs)\n",
        "new_problem": "# Write a Python function to find the smallest number in each sublist of a list of lists, and then return the smallest number among these smallest numbers.\ndef smallest_in_sublists(list_of_lists):\n",
        "new_solution": "  assert len(list_of_lists) > 0, \"invalid inputs\"\n  smallest_numbers = [smallest_num(sublist) for sublist in list_of_lists]\n  return smallest_num(smallest_numbers)\n",
        "test_code": "assert smallest_in_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 1\nassert smallest_in_sublists([[10, 20], [30, 40], [50, 60]]) == 10\nassert smallest_in_sublists([[100], [200, 300], [400, 500, 600]]) == 100\nassert smallest_in_sublists([[1, 1, 1], [1, 1], [1]]) == 1\nassert smallest_in_sublists([[5, 5], [5, 5, 5], [5, 5, 5, 5]]) == 5"
    },
    {
        "id": 21,
        "raw_problem": "# Write a function to find the maximum difference between available pairs in the given tuple list.\ndef max_difference(test_list):\n",
        "raw_solution": "  return max(abs(a - b) for a, b in test_list)\n",
        "new_problem": "# Given a list of tuples, each containing two integers, write a function to find the maximum sum of differences between all possible pairs of tuples. Each tuple in the list should be compared with every other tuple exactly once.\ndef max_sum_of_differences(tuple_list):\n",
        "new_solution": "    max_sum = 0\n    for i in range(len(tuple_list)):\n        for j in range(i + 1, len(tuple_list)):\n            max_sum += max_difference([tuple_list[i], tuple_list[j]])\n    return max_sum\n",
        "test_code": "assert max_sum_of_differences([(1, 2), (3, 4), (5, 6)]) == 3\nassert max_sum_of_differences([(10, 20), (30, 40), (50, 60)]) == 30\nassert max_sum_of_differences([(1, 1), (2, 2), (3, 3)]) == 0"
    },
    {
        "id": 22,
        "raw_problem": "# Write a function to sort a list of tuples using the second value of each tuple.\ndef subject_marks(subjectmarks):\n",
        "raw_solution": "#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks\n",
        "new_problem": "# Given a list of students' records, where each record is a list of tuples representing the student's name and their scores in different subjects, write a function to sort the records by the total score of each student in descending order. If two students have the same total score, sort them by their names in ascending order.\ndef sort_students_by_total_score(students):\n",
        "new_solution": "    students.sort(key=lambda student: (-sum(score for _, score in student), student[0][0]))\n    return students\n",
        "test_code": "assert sort_students_by_total_score([[('Alice', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)], [('Bob', 70), ('Science', 85), ('Maths', 80), ('Social sciences', 75)]]) == [[('Alice', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)], [('Bob', 70), ('Science', 85), ('Maths', 80), ('Social sciences', 75)]]\nassert sort_students_by_total_score([[('Charlie', 75), ('Science', 80), ('Maths', 70), ('Social sciences', 65)], [('David', 75), ('Science', 80), ('Maths', 70), ('Social sciences', 65)]]) == [[('Charlie', 75), ('Science', 80), ('Maths', 70), ('Social sciences', 65)], [('David', 75), ('Science', 80), ('Maths', 70), ('Social sciences', 65)]]\nassert sort_students_by_total_score([[('Eve', 90), ('Science', 95), ('Maths', 85), ('Social sciences', 80)], [('Frank', 90), ('Science', 95), ('Maths', 85), ('Social sciences', 80)]]) == [[('Eve', 90), ('Science', 95), ('Maths', 85), ('Social sciences', 80)], [('Frank', 90), ('Science', 95), ('Maths', 85), ('Social sciences', 80)]]"
    },
    {
        "id": 23,
        "raw_problem": "# Write a function to flatten a list and sum all of its elements.\ndef recursive_list_sum(data_list):\n",
        "raw_solution": "    total = 0\n    for element in data_list:\n        if type(element) == type([]):\n            total = total + recursive_list_sum(element)\n        else:\n            total = total + element\n    return total\n",
        "new_problem": "# Given a list of lists, where each sublist contains either integers or nested sublists, write a function to flatten each sublist and then sum the elements of all the flattened sublists.\ndef sum_of_flattened_lists(list_of_lists):\n",
        "new_solution": "    total_sum = 0\n    for sublist in list_of_lists:\n        total_sum += recursive_list_sum(sublist)\n    return total_sum\n",
        "test_code": "assert sum_of_flattened_lists([[1, 2], [3, [4, 5]], [6]]) == 21\nassert sum_of_flattened_lists([[], [1, [2, [3]]], [4, 5]]) == 15\nassert sum_of_flattened_lists([[1], [2], [3], [4], [5]]) == 15\nassert sum_of_flattened_lists([[[1]], [[2]], [[3]], [[4]], [[5]]]) == 15"
    },
    {
        "id": 24,
        "raw_problem": "# Write a python function to count the number of positive numbers in a list.\ndef pos_count(l):\n",
        "raw_solution": "  return len([x for x in l if x > 0])\n",
        "new_problem": "# Write a Python function to count the number of positive numbers in multiple lists and return the total count.\ndef total_pos_count(lists):\n",
        "new_solution": "    return sum(pos_count(l) for l in lists)\n",
        "test_code": "assert total_pos_count([[1, -2, 3], [-4, 5, 6], [7, -8, 9]]) == 6\nassert total_pos_count([[-1, -2, -3], [-4, -5, -6], [-7, -8, -9]]) == 0\nassert total_pos_count([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 9"
    },
    {
        "id": 25,
        "raw_problem": "# Write a function to find the number of ways to partition a set of Bell numbers.\ndef bell_number(n):\n",
        "raw_solution": "    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] \n",
        "new_problem": "# Given a list of integers representing the sizes of sets, write a function to find the total number of ways to partition all these sets combined.\ndef total_bell_numbers(sizes):\n",
        "new_solution": "    return sum(bell_number(size) for size in sizes)\n",
        "test_code": "assert total_bell_numbers([1, 2, 3]) == 8\nassert total_bell_numbers([0, 1, 2]) == 4\nassert total_bell_numbers([5, 5, 5]) == 156\nassert total_bell_numbers([10]) == 115975\nassert total_bell_numbers([0, 0, 0]) == 3"
    },
    {
        "id": 26,
        "raw_problem": "# Write a python function to check whether the given array is monotonic or not.\ndef is_Monotonic(A):\n",
        "raw_solution": "    return all(a <= b for a, b in zip(A, A[1:])) or all(a >= b for a, b in zip(A, A[1:]))\n",
        "new_problem": "# Given a list of arrays, write a function to determine the number of arrays that are monotonic in the list.\ndef count_Monotonic_Arrays(arrays):\n",
        "new_solution": "    count = 0\n    for array in arrays:\n        if is_Monotonic(array):\n            count += 1\n    return count\n",
        "test_code": "assert count_Monotonic_Arrays([[1, 2, 2, 3], [3, 2, 1], [1, 1, 1], [1, 2, 4, 3]]) == 3\nassert count_Monotonic_Arrays([[1, 2, 3], [3, 2, 1], [1, 1, 1], [1, 2, 4, 3]]) == 3\nassert count_Monotonic_Arrays([[1, 2, 3], [3, 2, 1], [1, 1, 1], [1, 2, 4, 3], [5, 4, 3, 2, 1]]) == 4"
    },
    {
        "id": 27,
        "raw_problem": "# Write a function to check whether a list contains the given sublist or not.\ndef is_sublist(l, s):\n",
        "raw_solution": "    if len(l) < len(s):\n        return False\n    return any(l[i:i+len(s)] == s for i in range(len(l)-len(s)+1))\n",
        "new_problem": "# Given a list of lists, write a function to check whether the list contains a given sequence of sublists. The function should return True if the sequence of sublists is found in the list, and False otherwise.\ndef is_sequence_of_sublists(list_of_lists, sequence_of_sublists):\n",
        "new_solution": "    for i in range(len(list_of_lists) - len(sequence_of_sublists) + 1):\n        if all(is_sublist(list_of_lists[i+j], sequence_of_sublists[j]) for j in range(len(sequence_of_sublists))):\n            return True\n    return False\n",
        "test_code": "assert is_sequence_of_sublists([[1, 2], [3, 4], [5, 6], [7, 8]], [[3, 4], [5, 6]]) == True\nassert is_sequence_of_sublists([[1, 2], [3, 4], [5, 6], [7, 8]], [[3, 4], [7, 8]]) == False\nassert is_sequence_of_sublists([[1, 2], [3, 4], [5, 6], [7, 8]], [[1, 2], [3, 4], [5, 6], [7, 8]]) == True\nassert is_sequence_of_sublists([[1, 2], [3, 4], [5, 6], [7, 8]], [[1, 2], [3, 4], [7, 8]]) == False"
    },
    {
        "id": 28,
        "raw_problem": "# Write a function to find whether all the given tuples have equal length or not.\ndef get_equal(Input):\n",
        "raw_solution": "  return len(set(len(item) for item in Input)) == 1\n",
        "new_problem": "# Given a list of tuples, write a function to find the maximum length of the tuples and return a list of tuples that have this maximum length. If there are no tuples with the maximum length, return an empty list.\ndef get_max_length_tuples(Input):\n",
        "new_solution": "    if not get_equal(Input):\n        return []\n    max_length = max(len(item) for item in Input)\n    return [item for item in Input if len(item) == max_length]\n",
        "test_code": "assert get_max_length_tuples([(1, 2), (3, 4, 5), (6, 7)]) == []\nassert get_max_length_tuples([(1, 2), (3, 4), (5, 6)]) == [(1, 2), (3, 4), (5, 6)]\nassert get_max_length_tuples([(1,), (2,), (3,)]) == [(1,), (2,), (3,)]\nassert get_max_length_tuples([]) == []"
    },
    {
        "id": 29,
        "raw_problem": "# Write a function to sort a list of elements.\ndef comb_sort(nums):\n",
        "raw_solution": "    n = len(nums)\n    gap = n\n    shrink = 1.3\n    swapped = True\n    while gap > 1 or swapped:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n",
        "new_problem": "# Given a list of lists, where each sublist contains integers, write a function to sort each sublist and then sort the main list based on the sum of the elements in each sublist.\ndef sort_list_of_lists(list_of_lists):\n",
        "new_solution": "    sorted_lists = [comb_sort(sublist) for sublist in list_of_lists]\n    sorted_lists.sort(key=lambda x: sum(x))\n    return sorted_lists\n",
        "test_code": "assert sort_list_of_lists([[3, 2, 1], [6, 5, 4], [9, 8, 7]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert sort_list_of_lists([[10, 20], [1], [3, 4, 5]]) == [[1], [3, 4, 5], [10, 20]]\nassert sort_list_of_lists([[15, 15], [10, 10, 10], [5, 5, 5, 5]]) == [[5, 5, 5, 5], [15, 15], [10, 10, 10]]"
    },
    {
        "id": 30,
        "raw_problem": "# Write a python function to check whether the given number can be represented as the difference of two squares or not.\ndef dif_Square(n):\n",
        "raw_solution": "    # see https://www.quora.com/Which-numbers-can-be-expressed-as-the-difference-of-two-squares\n    return n % 4 != 2\n",
        "new_problem": "# Given a list of integers, write a function to determine if each integer in the list can be represented as the difference of two squares. The function should return a list of boolean values, where each boolean corresponds to whether the integer at the same index in the input list can be represented as the difference of two squares.\ndef dif_Square_list(lst):\n",
        "new_solution": "    return [dif_Square(n) for n in lst]\n",
        "test_code": "assert dif_Square_list([5, 7, 12, 18]) == [True, True, True, False]\nassert dif_Square_list([4, 9, 16, 25]) == [True, True, True, True]\nassert dif_Square_list([2, 6, 10, 14]) == [False, False, False, False]"
    },
    {
        "id": 31,
        "raw_problem": "# Write a function to check whether it follows the sequence given in the patterns array.\ndef is_samepatterns(colors, patterns):\n",
        "raw_solution": "    if len(colors) != len(patterns):\n        return False    \n    pattern_color_dict = {pattern: set() for pattern in patterns}\n    for color, pattern in zip(colors, patterns):\n        pattern_color_dict[pattern].add(color)\n    return all(len(pattern_color_dict[pattern]) == 1 for pattern in patterns)\n",
        "new_problem": "# Given a list of colors and a list of patterns, write a function to check if there exists a valid sequence of colors for each pattern such that each pattern is uniquely mapped to a color. Additionally, ensure that the sequence of patterns is consistent across multiple lists of colors and patterns.\ndef is_consistent_patterns(colors_list, patterns_list):\n",
        "new_solution": "    if len(colors_list) != len(patterns_list):\n        return False\n    for colors, patterns in zip(colors_list, patterns_list):\n        if not is_samepatterns(colors, patterns):\n            return False\n    return True\n",
        "test_code": "assert is_consistent_patterns([['red', 'blue', 'red'], ['blue', 'red', 'blue']], [['a', 'b', 'a'], ['b', 'a', 'b']]) == True\nassert is_consistent_patterns([['red', 'blue', 'red'], ['blue', 'red', 'blue']], [['a', 'b', 'a'], ['a', 'b', 'a']]) == True\nassert is_consistent_patterns([['red', 'blue', 'red'], ['blue', 'red', 'blue']], [['a', 'b', 'a'], ['b', 'a', 'a']]) == False\nassert is_consistent_patterns([['red', 'blue', 'red'], ['blue', 'red', 'blue']], [['a', 'b', 'a'], ['b', 'a', 'c']]) == True"
    },
    {
        "id": 32,
        "raw_problem": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, K):\n",
        "raw_solution": "  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\n",
        "new_problem": "# Given a list of lists of tuples, where each list represents a different test case, write a function to find all tuples across all test cases that have all elements divisible by a given number k. The function should return a list of tuples that meet this criterion, maintaining the order of their appearance in the input lists.\ndef find_all_tuples(test_cases, K):\n",
        "new_solution": "    all_tuples = []\n    for test_list in test_cases:\n        all_tuples.extend(find_tuples(test_list, K))\n    return all_tuples\n",
        "test_code": "assert find_all_tuples([[(1, 2, 3), (4, 5, 6)], [(7, 8, 9), (10, 11, 12)]], 2) == []\nassert find_all_tuples([[(1, 2, 3), (4, 5, 6)], [(7, 8, 9), (10, 11, 12)]], 3) == []\nassert find_all_tuples([[(1, 2, 3), (4, 5, 6)], [(7, 8, 9), (10, 11, 12)]], 1) == [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]"
    },
    {
        "id": 33,
        "raw_problem": "# Write a python function to find whether a number is divisible by 11.\ndef is_Diff(n):\n",
        "raw_solution": "    return n % 11 == 0 \n",
        "new_problem": "# Write a Python function to determine if a list of numbers can be partitioned into two subsets such that the sum of one subset is divisible by 11 and the sum of the other subset is also divisible by 11.\ndef can_partition_divisible_by_11(nums):\n",
        "new_solution": "    total_sum = sum(nums)\n    if total_sum % 11 != 0:\n        return False\n    target = total_sum // 2\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target, num - 1, -1):\n            if dp[i - num]:\n                dp[i] = True\n    return dp[target] and is_Diff(target) and is_Diff(total_sum - target)\n",
        "test_code": "assert can_partition_divisible_by_11([11, 22, 33]) == True\nassert can_partition_divisible_by_11([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False\nassert can_partition_divisible_by_11([11, 22, 33, 44, 55]) == False\nassert can_partition_divisible_by_11([11, 22, 33, 44, 55, 66]) == False"
    },
    {
        "id": 34,
        "raw_problem": "# Write a python function to check whether the length of the word is odd or not.\ndef word_len(s):\n",
        "raw_solution": "    return len(s) % 2 == 1\n",
        "new_problem": "# Write a Python function to determine if a list of words contains exactly three words with odd lengths.\ndef three_odd_length_words(words):\n",
        "new_solution": "    count = 0\n    for word in words:\n        if word_len(word):\n            count += 1\n    return count == 3\n",
        "test_code": "assert three_odd_length_words(['apple', 'banana', 'cherry', 'date']) == False\nassert three_odd_length_words(['apple', 'banana', 'cherry']) == False\nassert three_odd_length_words(['odd', 'even', 'odd', 'even', 'odd']) == True\nassert three_odd_length_words([]) == False"
    },
    {
        "id": 35,
        "raw_problem": "# Write a function to find the nth tetrahedral number.\ndef tetrahedral_number(n):\n",
        "raw_solution": "    return (n * (n + 1) * (n + 2)) / 6\n",
        "new_problem": "# Write a function to find the sum of the first k tetrahedral numbers.\ndef sum_of_tetrahedral_numbers(k):\n",
        "new_solution": "    total_sum = 0\n    for i in range(1, k + 1):\n        total_sum += tetrahedral_number(i)\n    return total_sum\n",
        "test_code": "assert sum_of_tetrahedral_numbers(1) == 1\nassert sum_of_tetrahedral_numbers(2) == 5.0\nassert sum_of_tetrahedral_numbers(3) == 15.0\nassert sum_of_tetrahedral_numbers(4) == 35.0"
    },
    {
        "id": 36,
        "raw_problem": "# Write a function to find the volume of a sphere.\nimport math\ndef volume_sphere(r):\n",
        "raw_solution": "  return (4./3.) * math.pi * (r**3)\n",
        "new_problem": "# Given a list of sphere radii, write a function to calculate the total volume of all spheres and the average volume of the spheres.\nimport math\n\ndef volume_sphere(r):\n",
        "new_solution": "  return (4./3.) * math.pi * (r**3)\n\ndef total_and_average_volume(radii):\n  total_volume = sum(volume_sphere(r) for r in radii)\n  average_volume = total_volume / len(radii) if radii else 0\n  return total_volume, average_volume\n",
        "test_code": "assert total_and_average_volume([1, 2, 3]) == (150.79644737231007, 50.26548245743669)\nassert total_and_average_volume([0, 0, 0]) == (0.0, 0.0)\nassert total_and_average_volume([]) == (0.0, 0.0)\nassert total_and_average_volume([5]) == (523.5987755982989, 523.5987755982989)"
    },
    {
        "id": 37,
        "raw_problem": "# Write a function to find the nth number in the newman conway sequence.\ndef sequence(n):\n",
        "raw_solution": "    if n == 1 or n == 2: \n        return 1\n    seq = [0] * (n + 1)\n    seq[1] = seq[2] = 1\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]\n",
        "new_problem": "# Write a function to find the sum of the first 'k' numbers in the newman conway sequence for a given range of 'n' values. The function should take two parameters: 'k' (the number of terms to sum) and 'n_values' (a list of 'n' values for which to calculate the sequence).\ndef sum_newman_conway_terms(k, n_values):\n",
        "new_solution": "    def sequence(n):\n        if n == 1 or n == 2:\n            return 1\n        seq = [0] * (n + 1)\n        seq[1] = seq[2] = 1\n        for i in range(3, n + 1):\n            seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n        return seq\n\n    total_sum = 0\n    for n in n_values:\n        seq = sequence(n)\n        total_sum += sum(seq[1:k+1])\n    return total_sum\n",
        "test_code": "assert sum_newman_conway_terms(3, [5]) == 4\nassert sum_newman_conway_terms(4, [6, 7]) == 12\nassert sum_newman_conway_terms(2, [3, 4, 5]) == 6"
    },
    {
        "id": 38,
        "raw_problem": "# Write a function to find the surface area of a sphere.\nimport math\ndef surfacearea_sphere(r):\n",
        "raw_solution": "  return 4 * math.pi * (r**2)\n",
        "new_problem": "# Given a list of spheres with their respective radii, write a function to calculate the total surface area of all the spheres.\n\ndef total_surfacearea_spheres(radii):\n",
        "new_solution": "  total_area = 0\n  for r in radii:\n    total_area += surfacearea_sphere(r)\n  return total_area\n",
        "test_code": "assert total_surfacearea_spheres([1, 2, 3]) == 4 * math.pi * (1**2) + 4 * math.pi * (2**2) + 4 * math.pi * (3**2)\nassert total_surfacearea_spheres([0]) == 0\nassert total_surfacearea_spheres([5, 5]) == 2 * (4 * math.pi * (5**2))"
    },
    {
        "id": 39,
        "raw_problem": "# Write a function to find nth centered hexagonal number.\ndef centered_hexagonal_number(n):\n",
        "raw_solution": "  return 3 * n * (n - 1) + 1\n",
        "new_problem": "# Given a list of integers representing the positions of points on a hexagonal grid, write a function to calculate the sum of the centered hexagonal numbers for each point in the list.\ndef sum_centered_hexagonal_numbers(points):\n",
        "new_solution": "    def centered_hexagonal_number(n):\n        return 3 * n * (n - 1) + 1\n    return sum(centered_hexagonal_number(point) for point in points)\n",
        "test_code": "assert sum_centered_hexagonal_numbers([1, 2, 3]) == 27\nassert sum_centered_hexagonal_numbers([4, 5]) == 98\nassert sum_centered_hexagonal_numbers([10]) == 271"
    },
    {
        "id": 40,
        "raw_problem": "# Write a function to merge three dictionaries into a single dictionary.\nimport collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n",
        "raw_solution": "    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict\n",
        "new_problem": "# Given a list of dictionaries, write a function to merge all dictionaries in the list into a single dictionary.\nimport collections as ct\n\ndef merge_dictionaries_list(dict_list):\n",
        "new_solution": "    merged_dict = {}\n    for d in dict_list:\n        merged_dict = merge_dictionaries_three(merged_dict, d, {})\n    return merged_dict\n",
        "test_code": "assert merge_dictionaries_list([{'a': 1}, {'b': 2}, {'c': 3}]) == {'a': 1, 'b': 2, 'c': 3}\nassert merge_dictionaries_list([{'a': 1, 'b': 2}, {'b': 3, 'c': 4}]) == {'b': 2, 'c': 4, 'a': 1}\nassert merge_dictionaries_list([{}, {'a': 1}, {'b': 2}]) == {'a': 1, 'b': 2}\nassert merge_dictionaries_list([{'a': 1}, {'a': 2}, {'a': 3}]) == {'a': 1}"
    },
    {
        "id": 41,
        "raw_problem": "# Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nimport collections\ndef freq_count(list1):\n",
        "raw_solution": "  freq_count= collections.Counter(list1)\n  return freq_count\n",
        "new_problem": "# Given a list of lists, write a function to return a dictionary where the keys are the elements of the lists and the values are the total frequencies of these elements across all the lists.\n\nimport collections\n\ndef freq_count(list1):\n",
        "new_solution": "  freq_count = collections.Counter(list1)\n  return freq_count\n\ndef total_freq_count(list_of_lists):\n  total_freq = collections.Counter()\n  for lst in list_of_lists:\n    total_freq.update(freq_count(lst))\n  return dict(total_freq)\n",
        "test_code": "assert total_freq_count([[1, 2, 2, 3], [2, 3, 3, 4], [1, 4, 4, 4]]) == {1: 2, 2: 3, 3: 3, 4: 4}\nassert total_freq_count([[1], [1, 2], [1, 2, 3]]) == {1: 3, 2: 2, 3: 1}\nassert total_freq_count([[], [1, 1], [2, 2, 2]]) == {1: 2, 2: 3}\nassert total_freq_count([[], [], []]) == {}\nassert total_freq_count([[5, 5, 5, 5], [5, 5, 5], [5]]) == {5: 8}"
    },
    {
        "id": 42,
        "raw_problem": "# Write a function to find the closest smaller number than n.\ndef closest_num(N):\n",
        "raw_solution": "  return (N - 1)\n",
        "new_problem": "# Given a list of integers, find the closest smaller number for each element in the list and return a new list with these values. If the list is empty, return an empty list.\ndef closest_smaller_list(lst):\n",
        "new_solution": "    return [closest_num(n) for n in lst] if lst else []\n",
        "test_code": "assert closest_smaller_list([5, 3, 8, 10]) == [4, 2, 7, 9]\nassert closest_smaller_list([]) == []\nassert closest_smaller_list([1]) == [0]\nassert closest_smaller_list([10, 10, 10]) == [9, 9, 9]"
    },
    {
        "id": 43,
        "raw_problem": "# Write a python function to find the length of the longest word.\ndef len_log(list1):\n",
        "raw_solution": "    return max(len(x) for x in list1)\n",
        "new_problem": "# Given a list of sentences, write a Python function to find the length of the longest word across all sentences.\ndef len_longest_word_in_sentences(sentences):\n",
        "new_solution": "    return max(len_log(sentence.split()) for sentence in sentences)\n",
        "test_code": "assert len_longest_word_in_sentences(['The quick brown fox', 'jumps over the lazy dog']) == 5\nassert len_longest_word_in_sentences(['Python is fun', 'Programming is awesome']) == 11\nassert len_longest_word_in_sentences(['Hello world', 'Goodbye']) == 7\nassert len_longest_word_in_sentences(['Short', 'Longestwordhere']) == 15"
    },
    {
        "id": 44,
        "raw_problem": "# Write a function to check if a string is present as a substring in a given list of string values.\ndef find_substring(str1, sub_str):\n",
        "raw_solution": "   return any(sub_str in s for s in str1)\n",
        "new_problem": "# Given a list of lists of strings, write a function to find if a given substring is present in any of the lists. If the substring is found in multiple lists, return the indices of those lists. If the substring is not found in any list, return an empty list.\ndef find_substring_in_lists(list_of_lists, sub_str):\n",
        "new_solution": "    indices = []\n    for i, lst in enumerate(list_of_lists):\n        if find_substring(lst, sub_str):\n            indices.append(i)\n    return indices\n",
        "test_code": "assert find_substring_in_lists([['apple', 'banana'], ['cherry', 'date'], ['elderberry', 'fig']], 'an') == [0]\nassert find_substring_in_lists([['apple', 'banana'], ['cherry', 'date'], ['elderberry', 'fig']], 'zz') == []\nassert find_substring_in_lists([['apple', 'banana'], ['banana', 'date'], ['banana', 'fig']], 'banana') == [0, 1, 2]"
    },
    {
        "id": 45,
        "raw_problem": "# Write a function to check whether the given number is undulating or not.\ndef is_undulating(n):\n",
        "raw_solution": "    digits = [int(digit) for digit in str(n)]\n    if len(set(digits)) != 2:\n        return False\n    return all(a != b for a, b in zip(digits, digits[1:]))\n",
        "new_problem": "# Write a function to find the longest undulating subsequence in a given list of numbers. An undulating number is defined as a number that alternates between two distinct digits. The subsequence should be the longest possible sequence of undulating numbers from the given list.\ndef longest_undulating_subsequence(numbers):\n",
        "new_solution": "    undulating_subsequences = []\n    for number in numbers:\n        if is_undulating(number):\n            if not undulating_subsequences or number > undulating_subsequences[-1]:\n                undulating_subsequences.append(number)\n            else:\n                for i in range(len(undulating_subsequences)):\n                    if number <= undulating_subsequences[i]:\n                        undulating_subsequences[i] = number\n                        break\n    return undulating_subsequences\n",
        "test_code": "assert longest_undulating_subsequence([121, 343, 565, 787, 909]) == [121, 343, 565, 787, 909]\nassert longest_undulating_subsequence([123, 456, 789, 121, 343]) == [121, 343]\nassert longest_undulating_subsequence([111, 222, 333, 444]) == []\nassert longest_undulating_subsequence([121, 121, 121, 121]) == [121]"
    },
    {
        "id": 46,
        "raw_problem": "# Write a function to calculate the value of 'a' to the power 'b'.\ndef power(a, b):\n",
        "raw_solution": "    return a ** b\n",
        "new_problem": "# Given a list of tuples, where each tuple contains two integers representing a base and an exponent, write a function to calculate the product of all the resulting powers.\ndef product_of_powers(tuples_list):\n",
        "new_solution": "    result = 1\n    for base, exponent in tuples_list:\n        result *= power(base, exponent)\n    return result\n",
        "test_code": "assert product_of_powers([(2, 3), (4, 2), (5, 1)]) == 640\nassert product_of_powers([(1, 1), (2, 2), (3, 3)]) == 108\nassert product_of_powers([(0, 1), (10, 0), (1, 10)]) == 0"
    },
    {
        "id": 47,
        "raw_problem": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\nfrom operator import itemgetter \ndef index_minimum(test_list):\n",
        "raw_solution": "  res = min(test_list, key = itemgetter(1))[0]\n  return (res) \n",
        "new_problem": "# Given a list of lists of tuples, write a function that returns a list of the first values of the tuples with the smallest second values for each sublist.\nfrom operator import itemgetter\n\ndef index_minimum(test_list):\n",
        "new_solution": "  res = min(test_list, key = itemgetter(1))[0]\n  return (res)\n\ndef find_min_first_values(list_of_lists):\n  return [index_minimum(sublist) for sublist in list_of_lists]\n",
        "test_code": "assert find_min_first_values([[(1, 2), (3, 4)], [(5, 6), (7, 8)]]) == [1, 5]\nassert find_min_first_values([[(9, 10), (11, 12)], [(13, 14), (15, 16)]]) == [9, 13]\nassert find_min_first_values([[(17, 18), (19, 20)], [(21, 22), (23, 24)]]) == [17, 21]"
    },
    {
        "id": 48,
        "raw_problem": "# Write a python function to find the length of the smallest list in a list of lists.\ndef Find_Min_Length(lst):\n",
        "raw_solution": "    minLength = min(len(x) for x in lst )\n    return minLength \n",
        "new_problem": "# Given a list of lists of lists, write a Python function to find the length of the smallest list in each level of lists. Return a list containing the smallest lengths for each level.\ndef Find_Min_Lengths_List(lst_of_lsts):\n",
        "new_solution": "    return [Find_Min_Length(lst) for lst in lst_of_lsts]\n",
        "test_code": "assert Find_Min_Lengths_List([[[1, 2], [3, 4, 5]], [[6], [7, 8]]]) == [2, 1] \nassert Find_Min_Lengths_List([[[1, 2, 3], [4, 5]], [[6, 7], [8]]]) == [2, 1] \nassert Find_Min_Lengths_List([[[1], [2, 3, 4, 5]], [[6, 7, 8], [9]]]) == [1, 1]"
    },
    {
        "id": 49,
        "raw_problem": "# Write a python function to find the number of divisors of a given integer.\ndef divisor(n):\n",
        "raw_solution": "  return sum(1 for i in range(1, n + 1) if n % i == 0)\n",
        "new_problem": "# Write a Python function to find the number of divisors for each integer in a given list of integers, and then return the sum of these counts.\ndef total_divisors(lst):\n",
        "new_solution": "    return sum(divisor(n) for n in lst)\n",
        "test_code": "assert total_divisors([1, 2, 3, 4, 5]) == 10\nassert total_divisors([10, 20, 30]) == 18\nassert total_divisors([11, 13, 17]) == 6"
    },
    {
        "id": 50,
        "raw_problem": "# Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\ndef frequency_lists(list1):\n",
        "raw_solution": "    list1 = [item for sublist in list1 for item in sublist]\n    return {x: list1.count(x) for x in list1}\n",
        "new_problem": "# Given a list of lists, where each sublist contains a list of elements, write a function to find the frequency of each element across all sublists, returned in a dictionary. The function should handle nested lists of any depth.\ndef frequency_nested_lists(list1):\n",
        "new_solution": "    def flatten(lst):\n        for x in lst:\n            if isinstance(x, list):\n                yield from flatten(x)\n            else:\n                yield x\n\n    flat_list = list(flatten(list1))\n    return frequency_lists(flat_list)\n\ndef frequency_lists(flat_list):\n    return {x: flat_list.count(x) for x in set(flat_list)}\n\n",
        "test_code": "assert frequency_nested_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == {1: 1, 2: 2, 3: 3, 4: 2, 5: 1}\nassert frequency_nested_lists([[[1, 2], [3, 4]], [[5, 6], [7, 8]]]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1}\nassert frequency_nested_lists([[[[1], [2, 3]], [[4], [5, 6]]], [[[7], [8, 9]], [[10], [11, 12]]]]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1}"
    },
    {
        "id": 51,
        "raw_problem": "# Write a function to multiply all the numbers in a list and divide with the length of the list.\ndef multiply_num(numbers):\n",
        "raw_solution": "    from functools import reduce\n    return reduce(lambda x, y: x * y, numbers) / len(numbers)\n",
        "new_problem": "# Given a list of lists, where each sublist contains numbers, write a function to multiply all the numbers in each sublist, divide by the length of the sublist, and then return the sum of these results.\ndef sum_of_multiplied_nums(list_of_lists):\n",
        "new_solution": "    return sum(multiply_num(sublist) for sublist in list_of_lists)\n",
        "test_code": "assert sum_of_multiplied_nums([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 210.0\nassert sum_of_multiplied_nums([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == 12.0\nassert sum_of_multiplied_nums([[10, 20], [30, 40], [50, 60]]) == 2200.0"
    },
    {
        "id": 52,
        "raw_problem": "# Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\ndef decimal_to_binary(n):\n",
        "raw_solution": "    return bin(n).replace(\"0b\",\"\") \n",
        "new_problem": "# Given a list of decimal numbers, convert each number to its binary equivalent and then concatenate all the binary strings together, removing any leading zeros from the final result.\ndef convert_and_concatenate_binary(decimal_list):\n",
        "new_solution": "    binary_strings = [decimal_to_binary(n) for n in decimal_list]\n    concatenated_binary = ''.join(binary_strings)\n    return concatenated_binary.lstrip('0')\n",
        "test_code": "assert convert_and_concatenate_binary([10, 20, 30]) == '10101010011110'\nassert convert_and_concatenate_binary([0, 1, 2]) == '110'\nassert convert_and_concatenate_binary([128, 64, 32]) == '100000001000000100000'"
    },
    {
        "id": 53,
        "raw_problem": "# Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\ndef next_smallest_palindrome(num):\n",
        "raw_solution": "    if all(digit == '9' for digit in str(num)):\n        return num + 2\n    else:\n        num = [int(digit) for digit in str(num)]\n        n = len(num)\n        mid = n // 2\n        left_smaller = False\n        # if n is odd, ignore the middle digit at first\n        i = mid - 1\n        j = mid + 1 if n % 2 else mid\n        while i >= 0 and num[i] == num[j]:\n            i -= 1\n            j += 1\n        # stop if traverse end or difference found\n        if i < 0 or num[i] < num[j]:\n            left_smaller = True\n        # copy left to right\n        while i >= 0:\n            num[j] = num[i]\n            j += 1\n            i -= 1\n        # the middle digit must be incremented\n        if left_smaller:\n            carry = 1\n            i = mid - 1\n            if n % 2:\n                num[mid] += carry\n                carry = num[mid] // 10\n                num[mid] %= 10\n                j = mid + 1\n            else:\n                j = mid\n            while i >= 0:\n                num[i] += carry\n                carry = num[i] // 10\n                num[i] %= 10\n                num[j] = num[i]\n                j += 1\n                i -= 1\n    return int(\"\".join(map(str, num)))\n",
        "new_problem": "# Given a list of integers, find the next smallest palindrome for each integer in the list, and then return the sum of these palindromes. If the list is empty, return 0.\ndef sum_of_next_smallest_palindromes(nums):\n",
        "new_solution": "    def next_smallest_palindrome(num):\n        if all(digit == '9' for digit in str(num)):\n            return num + 2\n        else:\n            num = [int(digit) for digit in str(num)]\n            n = len(num)\n            mid = n // 2\n            left_smaller = False\n            i = mid - 1\n            j = mid + 1 if n % 2 else mid\n            while i >= 0 and num[i] == num[j]:\n                i -= 1\n                j += 1\n            if i < 0 or num[i] < num[j]:\n                left_smaller = True\n            while i >= 0:\n                num[j] = num[i]\n                j += 1\n                i -= 1\n            if left_smaller:\n                carry = 1\n                i = mid - 1\n                if n % 2:\n                    num[mid] += carry\n                    carry = num[mid] // 10\n                    num[mid] %= 10\n                    j = mid + 1\n                else:\n                    j = mid\n                while i >= 0:\n                    num[i] += carry\n                    carry = num[i] // 10\n                    num[i] %= 10\n                    num[j] = num[i]\n                    j += 1\n                    i -= 1\n        return int(\"\".join(map(str, num)))\n    \n    if not nums:\n        return 0\n    return sum(next_smallest_palindrome(num) for num in nums)\n",
        "test_code": "assert sum_of_next_smallest_palindromes([123, 121, 999]) == 131 + 131 + 1001\nassert sum_of_next_smallest_palindromes([191, 202, 303]) == 202 + 212 + 313\nassert sum_of_next_smallest_palindromes([]) == 0\nassert sum_of_next_smallest_palindromes([888, 999, 1001]) == 898 + 1001 + 1111"
    },
    {
        "id": 54,
        "raw_problem": "# Write a function to find the kth element in the given array using 1-based indexing.\ndef kth_element(arr, k):\n",
        "raw_solution": "  return arr[k-1]\n",
        "new_problem": "# Given an array of arrays, where each sub-array contains integers, write a function to find the kth element in the flattened version of the array using 1-based indexing.\ndef kth_element_in_flattened_array(arr_of_arrs, k):\n",
        "new_solution": "    flattened_array = [element for sub_array in arr_of_arrs for element in sub_array]\n    return kth_element(flattened_array, k)\n",
        "test_code": "assert kth_element_in_flattened_array([[1, 2], [3, 4, 5], [6]], 5) == 5\nassert kth_element_in_flattened_array([[10], [20, 30], [40, 50, 60]], 3) == 30\nassert kth_element_in_flattened_array([[100, 200], [300]], 1) == 100\nassert kth_element_in_flattened_array([[1, 2, 3], [4, 5], [6, 7, 8, 9]], 7) == 7"
    },
    {
        "id": 55,
        "raw_problem": "# Write a function to convert a snake case string to camel case string.\ndef snake_to_camel(word):\n",
        "raw_solution": "    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n",
        "new_problem": "# Given a list of snake case strings, write a function to convert each string to camel case and then concatenate them into a single camel case string. The final string should start with the first letter of the first word capitalized and the rest in lowercase.\ndef convert_and_concatenate(snake_case_list):\n",
        "new_solution": "    camel_case_list = [snake_to_camel(word).capitalize() for word in snake_case_list]\n    return ''.join(camel_case_list)\n",
        "test_code": "assert convert_and_concatenate(['hello_world', 'foo_bar']) == 'HelloworldFoobar'\nassert convert_and_concatenate(['snake_case', 'to_camel_case']) == 'SnakecaseTocamelcase'\nassert convert_and_concatenate(['this_is_a_test', 'another_test']) == 'ThisisatestAnothertest'\nassert convert_and_concatenate(['one_two_three', 'four_five_six']) == 'OnetwothreeFourfivesix'\nassert convert_and_concatenate(['short', 'long_string']) == 'ShortLongstring'"
    },
    {
        "id": 56,
        "raw_problem": "# Write a function to find the Eulerian number a(n, m).\ndef eulerian_num(n, m):\n",
        "raw_solution": "    if (m >= n or n == 0): \n        return 0 \n    if (m == 0): \n        return 1 \n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n",
        "new_problem": "# Given a list of tuples representing pairs of integers (n, m), where each tuple represents a request to find the Eulerian number a(n, m), write a function to compute the sum of all Eulerian numbers for the given list of tuples.\ndef sum_eulerian_nums(pairs):\n",
        "new_solution": "    total_sum = 0\n    for n, m in pairs:\n        total_sum += eulerian_num(n, m)\n    return total_sum\n",
        "test_code": "assert sum_eulerian_nums([(3, 1), (4, 2)]) == 15\nassert sum_eulerian_nums([(5, 0), (5, 3)]) == 27\nassert sum_eulerian_nums([(6, 4), (7, 5)]) == 177"
    },
    {
        "id": 57,
        "raw_problem": "# Write a function to sort each sublist of strings in a given list of lists.\ndef sort_sublists(input_list):\n",
        "raw_solution": "    return [sorted(x) for x in input_list]\n",
        "new_problem": "# Given a list of lists of strings, sort each sublist and then sort the entire list of lists by the first element of each sublist. If two sublists have the same first element, sort them by their second element, and so on.\ndef sort_nested_lists(input_list):\n",
        "new_solution": "    sorted_sublists = sort_sublists(input_list)\n    return sorted(sorted_sublists, key=lambda x: tuple(x))\n",
        "test_code": "assert sort_nested_lists([['b', 'a'], ['c', 'd'], ['a', 'b']]) == [['a', 'b'], ['a', 'b'], ['c', 'd']]\nassert sort_nested_lists([['z', 'y'], ['x', 'w'], ['v', 'u']]) == [['u', 'v'], ['w', 'x'], ['y', 'z']]\nassert sort_nested_lists([['apple', 'banana'], ['cherry', 'date'], ['elderberry', 'fig']]) == [['apple', 'banana'], ['cherry', 'date'], ['elderberry', 'fig']]"
    },
    {
        "id": 58,
        "raw_problem": "# Write a python function to count true booleans in the given list.\ndef count(lst):\n",
        "raw_solution": "    return sum(lst) \n",
        "new_problem": "# Write a Python function to count true booleans in multiple lists and return the total count across all lists.\ndef total_count(lists):\n",
        "new_solution": "    return sum(count(lst) for lst in lists)\n",
        "test_code": "assert total_count([[True, False, True], [False, True, True]]) == 4\nassert total_count([[False, False], [True, True, True]]) == 3\nassert total_count([[], [True, False, True]]) == 2\nassert total_count([[False, False, False], [False, False]]) == 0\nassert total_count([[True], [True], [True]]) == 3"
    },
    {
        "id": 59,
        "raw_problem": "# Write a function to append the given list to the given tuples.\ndef add_lists(test_list, test_tup):\n",
        "raw_solution": "  return test_tup + tuple(test_list)\n",
        "new_problem": "# Given a list of tuples and a list of lists, write a function to append each list in the list of lists to the corresponding tuple in the list of tuples. If the number of tuples is less than the number of lists, append the remaining lists to the last tuple. If the number of lists is less than the number of tuples, append an empty list to the remaining tuples.\ndef append_lists_to_tuples(tuples_list, lists_list):\n",
        "new_solution": "    result = []\n    for i in range(max(len(tuples_list), len(lists_list))):\n        if i < len(tuples_list) and i < len(lists_list):\n            result.append(add_lists(lists_list[i], tuples_list[i]))\n        elif i < len(tuples_list):\n            result.append(add_lists([], tuples_list[i]))\n        else:\n            result.append(add_lists(lists_list[i], tuples_list[-1]))\n    return result\n",
        "test_code": "assert append_lists_to_tuples([(1, 2), (3, 4)], [[5, 6], [7, 8]]) == [(1, 2, 5, 6), (3, 4, 7, 8)]\nassert append_lists_to_tuples([(1, 2), (3, 4)], [[5, 6]]) == [(1, 2, 5, 6), (3, 4,)]\nassert append_lists_to_tuples([(1, 2)], [[5, 6], [7, 8]]) == [(1, 2, 5, 6), (1, 2, 7, 8)]"
    },
    {
        "id": 60,
        "raw_problem": "# Write a function to merge three lists into a single sorted list.\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n",
        "raw_solution": "  return sorted(num1 + num2 + num3)\n",
        "new_problem": "# Given a list of lists, where each list is already sorted, write a function to merge all the lists into a single sorted list.\nimport heapq\n\ndef merge_sorted_lists(lists):\n",
        "new_solution": "    merged_list = []\n    for lst in lists:\n        merged_list = merge_sorted_list(merged_list, lst, [])\n    return merged_list\n",
        "test_code": "assert merge_sorted_lists([[1, 4, 5], [1, 3, 4], [2, 6]]) == [1, 1, 2, 3, 4, 4, 5, 6]\nassert merge_sorted_lists([[10, 20], [15, 30], [5, 25]]) == [5, 10, 15, 20, 25, 30]\nassert merge_sorted_lists([[1], [2], [3]]) == [1, 2, 3]\nassert merge_sorted_lists([[], [1], [2]]) == [1, 2]\nassert merge_sorted_lists([[], [], []]) == []"
    },
    {
        "id": 61,
        "raw_problem": "# Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\ndef odd_Equivalent(s,n):\n",
        "raw_solution": "    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \n",
        "new_problem": "# Given a list of binary strings, determine the total number of numbers with an odd value when each binary string is rotated the given number of times. Each binary string has a corresponding number of rotations specified in a separate list.\ndef total_odd_equivalents(binary_strings, rotations):\n",
        "new_solution": "    total_odd_count = 0\n    for s, n in zip(binary_strings, rotations):\n        total_odd_count += odd_Equivalent(s, n)\n    return total_odd_count\n",
        "test_code": "assert total_odd_equivalents(['101', '110'], [2, 3]) == 3\nassert total_odd_equivalents(['111', '000'], [1, 2]) == 1\nassert total_odd_equivalents(['1010', '1111'], [4, 4]) == 6"
    },
    {
        "id": 62,
        "raw_problem": "# Write a function to find the common elements in given nested lists.\ndef common_in_nested_lists(nestedlist):\n",
        "raw_solution": "    return list(set.intersection(*map(set, nestedlist)))\n",
        "new_problem": "# Given a list of nested lists, write a function to find the common elements across all nested lists and then count the occurrences of these common elements in each nested list. Return a dictionary where the keys are the common elements and the values are lists of counts from each nested list.\ndef common_elements_count(nested_lists):\n",
        "new_solution": "    common_elements = common_in_nested_lists(nested_lists)\n    result = {element: [] for element in common_elements}\n    for sublist in nested_lists:\n        for element in common_elements:\n            result[element].append(sublist.count(element))\n    return result\n",
        "test_code": "assert common_elements_count([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == {3: [1, 1, 1]};\nassert common_elements_count([[1, 1, 1], [1, 2, 2], [1, 3, 3]]) == {1: [3, 1, 1]};\nassert common_elements_count([[10, 20], [20, 30], [30, 40]]) == {}\nassert common_elements_count([['a', 'b'], ['b', 'c'], ['c', 'd']]) == {}"
    },
    {
        "id": 63,
        "raw_problem": "# Write a function to check if a string represents an integer or not.\ndef check_integer(text):\n",
        "raw_solution": " text = text.strip()\n if len(text) < 1:\n    return None\n else:\n    if text[0] in '+-':\n        text = text[1:]\n    return text.isdigit()\n",
        "new_problem": "# Given a list of strings, write a function to count how many of them represent integers. Additionally, return a list of all the integers found in the original list, maintaining their original order.\ndef count_and_extract_integers(strings):\n",
        "new_solution": "    integers = []\n    count = 0\n    for s in strings:\n        if check_integer(s):\n            count += 1\n            integers.append(int(s))\n    return count, integers\n",
        "test_code": "assert count_and_extract_integers(['123', '+456', '-789', 'abc', '12a']) == (3, [123, 456, -789])\nassert count_and_extract_integers(['+0', '-0', '0', '00', '0a']) == (4, [0, 0, 0, 0])\nassert count_and_extract_integers(['abc', 'def', 'ghi']) == (0, [])\nassert count_and_extract_integers([]) == (0, [])\nassert count_and_extract_integers(['123', '456', '789']) == (3, [123, 456, 789])"
    },
    {
        "id": 64,
        "raw_problem": "# Write a function to convert a given tuple of positive integers into a single integer.\ndef tuple_to_int(nums):\n",
        "raw_solution": "    return int(''.join(map(str,nums)))\n",
        "new_problem": "# Given a list of tuples, each containing positive integers, write a function to convert each tuple into a single integer and then sum all these integers together.\ndef sum_tuples_to_int(tuples_list):\n",
        "new_solution": "    return sum(tuple_to_int(t) for t in tuples_list)\n",
        "test_code": "assert sum_tuples_to_int([(1, 2), (3, 4)]) == 46\nassert sum_tuples_to_int([(1,), (2, 3), (4, 5, 6)]) == 1 + 23 + 456\nassert sum_tuples_to_int([]) == 0\nassert sum_tuples_to_int([(9, 9, 9), (1, 0, 0)]) == 999 + 100\nassert sum_tuples_to_int([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == 123 + 456 + 789"
    },
    {
        "id": 65,
        "raw_problem": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string):\n",
        "raw_solution": "    return string.split(\" \")\n",
        "new_problem": "# Write a function to convert a list of strings into a list of lists where each sublist contains the words of the corresponding string from the original list, split on the space character.\ndef list_of_strings_to_list_of_lists(list_of_strings):\n",
        "new_solution": "    return [string_to_list(string) for string in list_of_strings]\n",
        "test_code": "assert list_of_strings_to_list_of_lists(['hello world', 'python is fun']) == [['hello', 'world'], ['python', 'is', 'fun']]\nassert list_of_strings_to_list_of_lists(['']) == [['']]\nassert list_of_strings_to_list_of_lists(['singleword']) == [['singleword']]"
    },
    {
        "id": 66,
        "raw_problem": "# Write a python function to find the element that appears only once in a sorted array.\ndef search(arr):\n",
        "raw_solution": "    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)\n",
        "new_problem": "# Given a list of sorted arrays, each containing elements that appear twice except for one unique element, write a Python function to find all unique elements from these arrays.\ndef find_all_unique_elements(arrays):\n",
        "new_solution": "    unique_elements = []\n    for arr in arrays:\n        unique_elements.append(search(arr))\n    return unique_elements\n",
        "test_code": "assert find_all_unique_elements([[1, 1, 2, 3, 3], [4, 4, 5, 6, 6], [7, 7, 8, 8, 9]]) == [2, 5, 9]"
    },
    {
        "id": 67,
        "raw_problem": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1):\n",
        "raw_solution": "    return max(abs(x * y) for x, y in list1)\n",
        "new_problem": "# Given a list of lists of tuples, where each tuple contains two numbers, write a function to find the maximum absolute product between numbers in pairs of tuples across all sublists. The function should return the maximum product found.\ndef max_product_nested_list(nested_list):\n",
        "new_solution": "    return max(max_product_tuple(sublist) for sublist in nested_list)\n",
        "test_code": "assert max_product_nested_list([[(1, 2), (3, 4)], [(5, 6), (7, 8)]]) == 56\nassert max_product_nested_list([[(1, -1), (2, -2)], [(3, -3), (4, -4)]]) == 16\nassert max_product_nested_list([[(0, 0), (0, 0)], [(0, 0), (0, 0)]]) == 0"
    },
    {
        "id": 68,
        "raw_problem": "# Write a function to sum all amicable numbers from 1 to a specified number.\ndef div_sum(num):\n",
        "raw_solution": "    res = 1\n    i = 2\n    while i * i <= num:\n        if num % i == 0:\n            res += i\n            if i * i != num:\n                res += num / i\n        i += 1\n    return res\ndef amicable_numbers_sum(limit):\n    amicables = set()\n    for num in range(2, limit + 1):\n        if num in amicables:\n            continue\n        sum_fact = div_sum(num)\n        sum_fact2 = div_sum(sum_fact)\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)\n",
        "new_problem": "# Write a function to find the sum of all amicable numbers within multiple ranges provided as a list of tuples. Each tuple contains the start and end of a range. The function should return the total sum of amicable numbers found across all ranges.\ndef sum_amicable_numbers_in_ranges(ranges):\n",
        "new_solution": "    total_sum = 0\n    for start, end in ranges:\n        total_sum += amicable_numbers_sum(end) - amicable_numbers_sum(start - 1)\n    return total_sum\n",
        "test_code": "assert sum_amicable_numbers_in_ranges([(1, 300), (301, 500)]) == 504\nassert sum_amicable_numbers_in_ranges([(1, 1000)]) == 504\nassert sum_amicable_numbers_in_ranges([(1, 100), (101, 200), (201, 300)]) == 504"
    },
    {
        "id": 69,
        "raw_problem": "# Write a function to get the angle of a complex number.\nimport cmath\ndef angle_complex(a,b):\n",
        "raw_solution": "  angle=cmath.phase(a+b)\n  return angle\n",
        "new_problem": "# Given a list of complex numbers, find the average angle of these complex numbers. The angle of a complex number can be found using the function `angle_complex` provided.\nimport cmath\n\ndef angle_complex(a, b):\n",
        "new_solution": "  angle = cmath.phase(a + b)\n  return angle\n\ndef average_angle(complex_numbers):\n  angles = [angle_complex(c.real, c.imag) for c in complex_numbers]\n  average = sum(angles) / len(angles)\n  return average\n",
        "test_code": "assert average_angle([complex(1, 1), complex(1, -1)]) == 0.0\nassert average_angle([complex(0, 1), complex(0, -1)]) == 1.5707963267948966\nassert average_angle([complex(1, 0), complex(0, 1)]) == 0.0"
    },
    {
        "id": 70,
        "raw_problem": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string):\n",
        "raw_solution": "    current_sum = 0\n    max_sum = 0\n    for c in string: \n        current_sum += 1 if c == '0' else -1\n        if current_sum < 0: \n            current_sum = 0\n        max_sum = max(current_sum, max_sum) \n    return max_sum\n",
        "new_problem": "# Given a list of binary strings, find the maximum difference between the number of 0s and number of 1s in any sub-string across all strings. You need to consider all possible sub-strings from the concatenation of all binary strings in the list.\n\ndef find_max_difference(binary_strings):\n",
        "new_solution": "    # Concatenate all binary strings into a single string\n    concatenated_string = ''.join(binary_strings)\n    \n    # Use the find_length function to calculate the maximum difference\n    max_difference = find_length(concatenated_string)\n    \n    return max_difference\n",
        "test_code": "assert find_max_difference(['01', '101']) == 1\nassert find_max_difference(['1100', '0011']) == 4\nassert find_max_difference(['101010']) == 1\nassert find_max_difference(['0000', '1111']) == 4\nassert find_max_difference(['111', '000']) == 3"
    },
    {
        "id": 71,
        "raw_problem": "# Write a python function to find the sum of common divisors of two given numbers.\nimport math\ndef sum(a,b):\n",
        "raw_solution": "    sum = 0\n    n = math.gcd(a, b)\n    N = int(math.sqrt(n)) + 1\n    for i in range (1, N): \n        if (n % i == 0): \n            sum += i\n            if (n / i != i): \n                sum += (n / i)\n    return sum\n",
        "new_problem": "# Given a list of pairs of numbers, write a Python function to find the sum of the sums of common divisors for each pair in the list.\n\n\ndef sum_of_sums_of_common_divisors(pairs):\n",
        "new_solution": "    total_sum = 0\n    for pair in pairs:\n        total_sum += sum(pair[0], pair[1])\n    return total_sum\n",
        "test_code": "assert sum_of_sums_of_common_divisors([(12, 18), (20, 30)]) == 30.0\nassert sum_of_sums_of_common_divisors([(10, 20), (15, 30)]) == 42.0\nassert sum_of_sums_of_common_divisors([(7, 14), (21, 28)]) == 16.0"
    },
    {
        "id": 72,
        "raw_problem": "# Write a function to multiply two integers.\ndef multiply_int(x, y):\n",
        "raw_solution": "    return x * y\n",
        "new_problem": "# Given a list of integers, write a function to calculate the product of all elements in the list.\ndef product_of_list(lst):\n",
        "new_solution": "    result = 1\n    for num in lst:\n        result = multiply_int(result, num)\n    return result\n",
        "test_code": "assert product_of_list([1, 2, 3, 4]) == 24\nassert product_of_list([0, 1, 2]) == 0\nassert product_of_list([-1, 2, -3, 4]) == 24\nassert product_of_list([]) == 1"
    },
    {
        "id": 73,
        "raw_problem": "# Write a function to find words that are longer than n characters from a given list of words.\ndef long_words(n, s):\n",
        "raw_solution": "    return list(filter(lambda x: len(x) > n, s.split(' ')))\n",
        "new_problem": "# Given a string containing multiple sentences, each sentence separated by a period, write a function to find all words longer than a specified number of characters in each sentence and return a list of lists where each sublist contains the qualifying words for the corresponding sentence.\ndef find_long_words_in_sentences(n, text):\n",
        "new_solution": "        sentences = text.split('. ')\n        return [long_words(n, sentence) for sentence in sentences if sentence]\n",
        "test_code": "assert find_long_words_in_sentences(4, 'This is a test. Python is great.') == [[], ['Python', 'great.']]\nassert find_long_words_in_sentences(5, 'Short words here. Longer words there.') == [[], ['Longer', 'there.']]\nassert find_long_words_in_sentences(3, 'One two three. Four five six.') == [['three'], ['Four', 'five', 'six.']]\nassert find_long_words_in_sentences(6, 'This is a long sentence. Another one.') == [['sentence'], ['Another']]"
    },
    {
        "id": 74,
        "raw_problem": "# Write a function to calculate whether the matrix is a magic square.\ndef magic_square_test(my_matrix):\n",
        "raw_solution": "    s = sum(my_matrix[0])\n    # row\n    if any(sum(row) != s for row in my_matrix):\n        return False\n    # column\n    if any(sum(row[i] for row in my_matrix) != s for i in range(len(my_matrix[0]))):\n        return False\n    # diagonal\n    if sum(my_matrix[i][i] for i in range(len(my_matrix))) != s:\n        return False\n    # anti-diagonal\n    if sum(my_matrix[i][len(my_matrix) - i - 1] for i in range(len(my_matrix))) != s:\n        return False\n    return True\n",
        "new_problem": "# Given a list of matrices, write a function to determine the number of magic squares in the list.\ndef count_magic_squares(matrices):\n",
        "new_solution": "    count = 0\n    for matrix in matrices:\n        if magic_square_test(matrix):\n            count += 1\n    return count\n",
        "test_code": "assert count_magic_squares([[[2, 7, 6], [9, 5, 1], [4, 3, 8]], [[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[8, 1, 6], [3, 5, 7], [4, 9, 2]]]) == 2\nassert count_magic_squares([[[1, 1, 1], [1, 1, 1], [1, 1, 1]], [[2, 7, 6], [9, 5, 1], [4, 3, 8]]]) == 2\nassert count_magic_squares([[[1, 2], [2, 1]], [[1, 1], [1, 1]]]) == 1"
    },
    {
        "id": 75,
        "raw_problem": "# Write a function to find the item with maximum frequency in a given list.\nfrom collections import defaultdict\ndef max_occurrences(nums):\n",
        "raw_solution": "    d = defaultdict(int)\n    for n in nums:\n        d[n] += 1\n    return max(d, key=d.get)\n",
        "new_problem": "# Given a list of lists, write a function to find the item that appears most frequently across all the lists combined. If there is a tie, return the item that appears first in the lexicographical order.\nfrom collections import defaultdict\n\ndef max_occurrences(nums):\n",
        "new_solution": "    d = defaultdict(int)\n    for n in nums:\n        d[n] += 1\n    return max(d, key=d.get)\n\ndef most_frequent_item(list_of_lists):\n    combined_list = []\n    for lst in list_of_lists:\n        combined_list.extend(lst)\n    return max_occurrences(combined_list)\n",
        "test_code": "assert most_frequent_item([[1, 2, 2], [2, 3, 3, 3], [4, 4, 4, 4]]) == 4\nassert most_frequent_item([['a', 'b', 'b'], ['b', 'c', 'c', 'c'], ['d', 'd', 'd', 'd']]) == 'd'\nassert most_frequent_item([[10, 20], [20, 30], [30, 30]]) == 30\nassert most_frequent_item([['apple', 'banana'], ['banana', 'cherry'], ['cherry', 'cherry']]) == 'cherry'"
    },
    {
        "id": 76,
        "raw_problem": "# Write a python function to reverse only the vowels of a given string (where y is not a vowel).\ndef reverse_vowels(str1):\n",
        "raw_solution": "    is_vowel = lambda x: x in 'aeiouAEIOU'\n    pos = [i for i, c in enumerate(str1) if is_vowel(c)]\n    return ''.join(c if not is_vowel(c) else str1[pos.pop()] for c in str1)\n        \n",
        "new_problem": "# Write a python function to reverse the vowels of each word in a given list of strings. If a word has no vowels, it should remain unchanged.\ndef reverse_vowels_in_words(lst):\n",
        "new_solution": "    return [reverse_vowels(word) for word in lst]\n",
        "test_code": "assert reverse_vowels_in_words(['hello', 'world', 'python']) == ['holle', 'world', 'python']\nassert reverse_vowels_in_words(['aeiou', 'bcdfgh']) == ['uoiea', 'bcdfgh']\nassert reverse_vowels_in_words(['']) == ['']\nassert reverse_vowels_in_words(['AEIOU', 'bcdfgh']) == ['UOIEA', 'bcdfgh']"
    },
    {
        "id": 77,
        "raw_problem": "# Write a function to convert a tuple to a string.\ndef tup_string(tup1):\n",
        "raw_solution": "  return ''.join(tup1)\n",
        "new_problem": "# Given a list of tuples, write a function to convert each tuple in the list to a string and then concatenate all the resulting strings into a single string.\ndef list_tup_string(list_of_tuples):\n",
        "new_solution": "    return ''.join(tup_string(tup) for tup in list_of_tuples)\n",
        "test_code": "assert list_tup_string([('a', 'b'), ('c', 'd')]) == 'abcd'\nassert list_tup_string([('1', '2'), ('3', '4')]) == '1234'\nassert list_tup_string([('h', 'e', 'l', 'l', 'o'), ('w', 'o', 'r', 'l', 'd')]) == 'helloworld'"
    },
    {
        "id": 78,
        "raw_problem": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums):\n",
        "raw_solution": "  return sum(x for x in nums if x < 0)\n",
        "new_problem": "# Given a list of lists of numbers, write a function to calculate the sum of all negative numbers in each sublist and return a list of these sums.\ndef sum_negativenums(nums_list):\n",
        "new_solution": "  return [sum_negativenum(sublist) for sublist in nums_list]\n",
        "test_code": "assert sum_negativenums([[1, -2, 3], [-4, 5, -6], [7, -8, 9]]) == [-2, -10, -8]\nassert sum_negativenums([[0, -1], [2, 3], [-4, -5]]) == [-1, 0, -9]\nassert sum_negativenums([[], [1, -1], [-2, 2]]) == [0, -1, -2]"
    },
    {
        "id": 79,
        "raw_problem": "# Write a function to find the nth hexagonal number.\ndef hexagonal_num(n):\n",
        "raw_solution": "    return n * (2 * n - 1) \n",
        "new_problem": "# Write a function to find the sum of the first N hexagonal numbers.\ndef sum_of_hexagonal_numbers(N):\n",
        "new_solution": "    sum = 0\n    for i in range(1, N + 1):\n        sum += hexagonal_num(i)\n    return sum\n",
        "test_code": "assert sum_of_hexagonal_numbers(1) == 1\nassert sum_of_hexagonal_numbers(2) == 7\nassert sum_of_hexagonal_numbers(3) == 22\nassert sum_of_hexagonal_numbers(4) == 50"
    },
    {
        "id": 80,
        "raw_problem": "# Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\ndef zero_count(nums):\n",
        "raw_solution": "    if all(x == 0 for x in nums):\n        return float('inf')\n    return sum(x == 0 for x in nums) / sum(x != 0 for x in nums)\n",
        "new_problem": "# Given a list of 2D matrices, write a function to find the ratio of zeroes to non-zeroes for each matrix and then return the average of these ratios across all matrices. If a matrix contains only zeroes, its ratio should be considered as infinity.\ndef average_zero_ratio(matrices):\n",
        "new_solution": "    ratios = [zero_count(matrix) for matrix in matrices]\n    return sum(ratios) / len(ratios) if ratios else float('inf')\n",
        "test_code": "assert average_zero_ratio([[[0, 1], [2, 3]], [[0, 0], [0, 0]], [[1, 0], [0, 1]]]) == 0.0\nassert average_zero_ratio([[[0, 1], [2, 3]], [[1, 2], [3, 4]], [[1, 0], [0, 1]]]) == 0.0\nassert average_zero_ratio([[[0, 0], [0, 0]], [[0, 0], [0, 0]]]) == 0.0\nassert average_zero_ratio([[[1, 2], [3, 4]], [[5, 6], [7, 8]]]) == 0.0"
    },
    {
        "id": 81,
        "raw_problem": "# Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef is_Sum_Of_Powers_Of_Two(n):\n",
        "raw_solution": "    return n > 0 and n % 2 == 0\n",
        "new_problem": "# Write a Python function to check whether the given list of numbers can each be represented as the sum of non-zero powers of 2. The function should return a list of boolean values, where each boolean value corresponds to whether the respective number in the input list can be represented as such.\ndef check_list_for_powers_of_two(numbers):\n",
        "new_solution": "    return [is_Sum_Of_Powers_Of_Two(num) for num in numbers]\n",
        "test_code": "assert check_list_for_powers_of_two([2, 4, 8, 10]) == [True, True, True, True]\nassert check_list_for_powers_of_two([1, 3, 5, 7]) == [False, False, False, False]\nassert check_list_for_powers_of_two([16, 32, 64, 128]) == [True, True, True, True]"
    },
    {
        "id": 82,
        "raw_problem": "# Write a function to find the circumference of a circle.\nimport math\ndef circle_circumference(r):\n",
        "raw_solution": "  return 2 * math.pi * r\n",
        "new_problem": "# Given a list of radii of multiple circles, write a function to calculate the total circumference of all the circles combined.\nimport math\n\ndef circle_circumference(r):\n",
        "new_solution": "  return 2 * math.pi * r\n\ndef total_circumference(radii):\n  total = 0\n  for r in radii:\n    total += circle_circumference(r)\n  return total\n",
        "test_code": "assert total_circumference([1, 2, 3]) == 2 * math.pi * (1 + 2 + 3)\nassert total_circumference([0, 0, 0]) == 0\nassert total_circumference([5]) == 2 * math.pi * 5"
    },
    {
        "id": 83,
        "raw_problem": "# Write a function to flatten the list of lists into a single set of numbers.\ndef extract_singly(test_list):\n",
        "raw_solution": "  return set([item for sublist in test_list for item in sublist])\n",
        "new_problem": "# Given a list of lists of lists, write a function to flatten it into a single set of numbers. The function should handle any level of nested lists.\ndef deep_extract_singly(test_list):\n",
        "new_solution": "    # Recursive function to handle arbitrary levels of nesting\n    if isinstance(test_list, list):\n        return set().union(*(deep_extract_singly(item) for item in test_list))\n    else:\n        return {test_list}\n\n",
        "test_code": "assert deep_extract_singly([1, 2, [3, 4], [[5], [6, 7]], [[[8]], 9]]) == {1, 2, 3, 4, 5, 6, 7, 8, 9}\nassert deep_extract_singly([[1, 2, [3]], [4, [5, 6]], [[7, [8]], 9]]) == {1, 2, 3, 4, 5, 6, 7, 8, 9}\nassert deep_extract_singly([[[[1]]], [[[[2]]]], [[[[[3]]]]]]) == {1, 2, 3}\nassert deep_extract_singly([10, [20, [30, [40, [50]]]]]) == {10, 20, 30, 40, 50}\nassert deep_extract_singly([]) == set()\nassert deep_extract_singly([[1, 2], [2, 3], [3, 4, [4, 5]]]) == {1, 2, 3, 4, 5}"
    },
    {
        "id": 84,
        "raw_problem": "# Write a function to sort a list of elements.\ndef pancake_sort(nums):\n",
        "raw_solution": "    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums\n",
        "new_problem": "# Given a list of lists, where each sublist contains unsorted elements, write a function to sort each sublist and then sort the main list based on the sum of elements in each sublist.\ndef complex_sort(list_of_lists):\n",
        "new_solution": "    sorted_sublists = [pancake_sort(sublist) for sublist in list_of_lists]\n    sorted_sublists.sort(key=lambda x: sum(x))\n    return sorted_sublists\n",
        "test_code": "assert complex_sort([[3, 1, 2], [5, 4], [6]]) == [[1, 2, 3], [6], [4, 5]]\nassert complex_sort([[9, 8, 7], [6, 5], [4, 3, 2, 1]]) == [[1, 2, 3, 4], [5, 6], [7, 8, 9]]\nassert complex_sort([[10], [20, 30], [40, 50, 60]]) == [[10], [20, 30], [40, 50, 60]]"
    },
    {
        "id": 85,
        "raw_problem": "# Write a function to count number items that are identical in the same position of three given lists.\ndef count_samepair(list1,list2,list3):\n",
        "raw_solution": "    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
        "new_problem": "# Given a list of lists, each containing the same number of elements, write a function to count the number of items that are identical in the same position across all lists in the list of lists.\ndef count_same_items_in_lists(list_of_lists):\n",
        "new_solution": "    if not list_of_lists or not list_of_lists[0]:\n        return 0\n    count = 0\n    for i in range(len(list_of_lists[0])):\n        if all(list_of_lists[j][i] == list_of_lists[0][i] for j in range(1, len(list_of_lists))):\n            count += 1\n    return count\n",
        "test_code": "assert count_same_items_in_lists([[1, 2, 3], [1, 2, 4], [1, 2, 5]]) == 2\nassert count_same_items_in_lists([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == 3\nassert count_same_items_in_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 0\nassert count_same_items_in_lists([[1, 'a', 3.14], [1, 'b', 3.14], [1, 'c', 3.14]]) == 2\nassert count_same_items_in_lists([[], [], []]) == 0"
    },
    {
        "id": 86,
        "raw_problem": "# Write a python function to find the maximum difference between any two elements in a given array.\ndef max_Abs_Diff(arr):\n",
        "raw_solution": "    return max(arr) - min(arr)\n",
        "new_problem": "# Given a list of arrays, write a Python function to find the maximum difference between any two elements across all arrays. The function should return the maximum difference found.\ndef max_Abs_Diff_Across_Arrays(arrays):\n",
        "new_solution": "    max_diff = 0\n    for arr in arrays:\n        current_diff = max_Abs_Diff(arr)\n        if current_diff > max_diff:\n            max_diff = current_diff\n    return max_diff\n",
        "test_code": "assert max_Abs_Diff_Across_Arrays([[1, 2, 3], [4, 5], [10, 1]]) == 9\nassert max_Abs_Diff_Across_Arrays([[1, 1, 1], [2, 2], [3, 3]]) == 0\nassert max_Abs_Diff_Across_Arrays([[10, 20, 30], [40, 50], [60, 70]]) == 20\nassert max_Abs_Diff_Across_Arrays([[1], [1], [1]]) == 0"
    },
    {
        "id": 87,
        "raw_problem": "# Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\ndef find_solution(a, b, n):\n",
        "raw_solution": "    i = 0\n    while i * a <= n:\n        if (n - (i * a)) % b == 0: \n            return (i, (n - (i * a)) // b)\n        i = i + 1\n    return None\n",
        "new_problem": "# Given a list of tuples, where each tuple contains three integers (a, b, n), write a function that returns a list of tuples. Each tuple in the returned list should contain the integers x and y that satisfy the equation ax + by = n for the corresponding tuple (a, b, n) from the input list. If no solution exists for a particular tuple, the corresponding tuple in the returned list should be None.\ndef find_solutions(tuples_list):\n",
        "new_solution": "    result = []\n    for a, b, n in tuples_list:\n        result.append(find_solution(a, b, n))\n    return result\n\n# Using the raw solution function\n# def find_solution(a, b, n):\n#     i = 0\n#     while i * a <= n:\n#         if (n - (i * a)) % b == 0:\n#             return (i, (n - (i * a)) // b)\n#         i = i + 1\n#     return None\n",
        "test_code": "assert find_solutions([(2, 3, 10), (1, 5, 10), (3, 4, 11)]) == [(2, 2), (0, 2), (1, 2)]"
    },
    {
        "id": 88,
        "raw_problem": "# Write a function to remove all elements from a given list present in another list.\ndef remove_elements(list1, list2):\n",
        "raw_solution": "    return [x for x in list1 if x not in list2]\n",
        "new_problem": "# Given a list of lists, remove all elements from each sublist that are present in a given exclusion list. Return a new list of lists where each sublist has had the excluded elements removed.\ndef remove_elements_from_lists(list_of_lists, exclusion_list):\n",
        "new_solution": "    return [remove_elements(sublist, exclusion_list) for sublist in list_of_lists]\n",
        "test_code": "assert remove_elements_from_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]], [2, 5, 8]) == [[1, 3], [4, 6], [7, 9]]\nassert remove_elements_from_lists([[10, 20, 30], [40, 50, 60], [70, 80, 90]], [30, 60, 90]) == [[10, 20], [40, 50], [70, 80]]\nassert remove_elements_from_lists([[1, 1, 1], [2, 2, 2], [3, 3, 3]], [1, 2, 3]) == [[], [], []]"
    },
    {
        "id": 89,
        "raw_problem": "# Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\ndef sum_series(n):\n",
        "raw_solution": "  if n <= 0:\n    return 0\n  return sum(n - 2 * i for i in range(n // 2 + 1))\n",
        "new_problem": "# Given a list of integers, calculate the sum of the series for each integer in the list, then return the maximum sum obtained. If the list is empty, return 0.\ndef max_sum_of_series(lst):\n",
        "new_solution": "  if not lst:\n    return 0\n  return max(sum_series(n) for n in lst)\n",
        "test_code": "assert max_sum_of_series([5, 3, 7]) == 16\nassert max_sum_of_series([10, 20, 30]) == 240\nassert max_sum_of_series([]) == 0\nassert max_sum_of_series([1]) == 1\nassert max_sum_of_series([4, 4, 4]) == 6"
    },
    {
        "id": 90,
        "raw_problem": "# Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\ndef count_char_position(str1):\n",
        "raw_solution": "    return sum(ord(ch.lower()) - ord('a') == i for i, ch in enumerate(str1))\n",
        "new_problem": "# Given a list of strings, write a function to count the total number of characters in all strings that occur at the same position in the string as in the English alphabet (case insensitive).\ndef total_char_position(strings):\n",
        "new_solution": "    return sum(count_char_position(s) for s in strings)\n",
        "test_code": "assert total_char_position(['abc', 'def']) == 3\nassert total_char_position(['xyz', 'pqr']) == 0\nassert total_char_position(['a', 'b', 'c']) == 1\nassert total_char_position(['', 'abc', 'def']) == 3\nassert total_char_position(['AbC', 'dEf']) == 3"
    },
    {
        "id": 91,
        "raw_problem": "# Write a function that counts the number of pairs of integers in a list that xor to an even number.\ndef find_even_pair(A):\n",
        "raw_solution": "  if len(A) < 2: \n    return 0\n  return sum((a ^ b) % 2 == 0 for i, a in enumerate(A) for b in A[i + 1:])\n",
        "new_problem": "# Given a list of lists of integers, write a function that counts the number of pairs of integers across all sublists that xor to an even number.\ndef find_even_pair_across_lists(list_of_lists):\n",
        "new_solution": "    return sum(find_even_pair(sublist) for sublist in list_of_lists)\n",
        "test_code": "assert find_even_pair_across_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 3\nassert find_even_pair_across_lists([[1, 3, 5], [2, 4, 6], [7, 9]]) == 7\nassert find_even_pair_across_lists([[10, 20], [30, 40, 50], [60]]) == 4"
    },
    {
        "id": 92,
        "raw_problem": "# Write a python function to find the smallest power of 2 greater than or equal to n.\ndef next_power_of_2(n): \n  if n and not n & (n - 1):\n",
        "raw_solution": "    return n\n  res = 1\n  while n != 0: \n    n >>= 1\n    res <<= 1\n  return res; \n",
        "new_problem": "# Given a list of integers, write a function to find the smallest power of 2 greater than or equal to the sum of all integers in the list. If the list is empty, return 0.\ndef smallest_power_of_2_for_sum(lst):\n",
        "new_solution": "    if not lst:\n        return 0\n    total_sum = sum(lst)\n    return next_power_of_2(total_sum)\n",
        "test_code": "assert smallest_power_of_2_for_sum([1, 2, 3]) == 8\nassert smallest_power_of_2_for_sum([5, 5, 5]) == 16\nassert smallest_power_of_2_for_sum([]) == 0\nassert smallest_power_of_2_for_sum([16, 16, 16]) == 64\nassert smallest_power_of_2_for_sum([1, 1, 1, 1, 1, 1, 1, 1]) == 8"
    },
    {
        "id": 93,
        "raw_problem": "# Write a function to count the number of occurrences of a number in a given list.\ndef frequency(a,x):\n",
        "raw_solution": "    return a.count(x)\n",
        "new_problem": "# Given a list of lists, write a function to count the total number of occurrences of a specific number across all sublists.\ndef total_frequency(list_of_lists, x):\n",
        "new_solution": "    return sum(frequency(sublist, x) for sublist in list_of_lists)\n",
        "test_code": "assert total_frequency([[1, 2, 2], [2, 3, 4], [2, 2, 2]], 2) == 6\nassert total_frequency([[1, 1, 1], [1, 1, 1], [1, 1, 1]], 1) == 9\nassert total_frequency([[5, 5], [5, 5, 5], [5]], 5) == 6\nassert total_frequency([[10, 20], [30, 40], [50]], 100) == 0"
    },
    {
        "id": 94,
        "raw_problem": "# Write a function to find the sum of numbers in a list within a range specified by two indices.\ndef sum_range_list(list1, m, n):\n",
        "raw_solution": "    return sum(list1[m : n + 1])\n",
        "new_problem": "# Given a list of lists, each containing integers, and a range specified by two indices (m, n), write a function to find the sum of all numbers in each sublist within the specified range and return the total sum of these sums.\ndef total_sum_of_ranges(list_of_lists, m, n):\n",
        "new_solution": "    total_sum = 0\n    for sublist in list_of_lists:\n        total_sum += sum_range_list(sublist, m, n)\n    return total_sum\n",
        "test_code": "assert total_sum_of_ranges([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1, 2) == 33\nassert total_sum_of_ranges([[10, 20, 30], [40, 50, 60], [70, 80, 90]], 0, 1) == 270\nassert total_sum_of_ranges([[1, 1, 1], [2, 2, 2], [3, 3, 3]], 0, 0) == 6"
    },
    {
        "id": 95,
        "raw_problem": "# Write a function to find the perimeter of a regular pentagon from the length of its sides.\ndef perimeter_pentagon(a):\n",
        "raw_solution": "  return 5 * a\n",
        "new_problem": "# Given a list of side lengths of multiple regular pentagons, write a function to calculate the total perimeter of all pentagons combined.\ndef total_perimeter_pentagons(side_lengths):\n",
        "new_solution": "  total_perimeter = 0\n  for side in side_lengths:\n    total_perimeter += perimeter_pentagon(side)\n  return total_perimeter\n",
        "test_code": "assert total_perimeter_pentagons([1, 2, 3]) == 30\nassert total_perimeter_pentagons([0, 0, 0]) == 0\nassert total_perimeter_pentagons([5]) == 25\nassert total_perimeter_pentagons([1.5, 2.5, 3.5]) == 37.5"
    },
    {
        "id": 96,
        "raw_problem": "# Write a function to count the number of occurence of the string 'std' in a given string.\ndef count_occurance(s):\n",
        "raw_solution": "  return s.count('std')\n",
        "new_problem": "# Given a list of strings, write a function to count the total number of occurrences of the string 'std' across all strings in the list.\ndef total_occurance(lst):\n",
        "new_solution": "  return sum(count_occurance(s) for s in lst)\n",
        "test_code": "assert total_occurance(['stdstd', 'test', 'std']) == 3\nassert total_occurance(['', 'std', 'stdstd']) == 3\nassert total_occurance(['test', 'test', 'test']) == 0\nassert total_occurance(['stdstdstd', 'std', '']) == 4"
    },
    {
        "id": 97,
        "raw_problem": "# Write a function to check if all the elements in tuple have same data type or not.\ndef check_type(test_tuple):\n",
        "raw_solution": "    return all(isinstance(item, type(test_tuple[0])) for item in test_tuple)\n",
        "new_problem": "# Given a list of tuples, write a function to check if each tuple in the list has elements of the same data type. The function should return a list of boolean values, where each boolean value corresponds to whether the elements in the respective tuple have the same data type or not.\ndef check_types_in_list(tuple_list):\n",
        "new_solution": "    return [check_type(tup) for tup in tuple_list]\n",
        "test_code": "assert check_types_in_list([(1, 2, 3), ('a', 'b', 'c'), (1, 'a', 3)]) == [True, True, False]\nassert check_types_in_list([(True, False), (1.0, 2.0, 3.0), ('hello', 123)]) == [True, True, False]\nassert check_types_in_list([(1, 1, 1), ('a', 'a', 'a'), (True, True, True)]) == [True, True, True]"
    },
    {
        "id": 98,
        "raw_problem": "# Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfrom bisect import bisect_left, bisect_right\ndef is_majority(arr, n, x):\n",
        "raw_solution": "    if x not in arr:\n        return False\n    l = bisect_left(arr, x)\n    r = bisect_right(arr, x)\n    return r - l > n / 2\n",
        "new_problem": "# Given a list of sorted arrays, each with its length, and a target element, determine if the target element is the majority element in any of the given sorted arrays. Return a list of boolean values corresponding to each array, indicating whether the target element is the majority element in that array.\ndef is_majority_in_arrays(arrays, lengths, target):\n",
        "new_solution": "    results = []\n    for arr, n in zip(arrays, lengths):\n        results.append(is_majority(arr, n, target))\n    return results\n",
        "test_code": "assert is_majority_in_arrays([[1, 2, 2, 2, 3], [1, 1, 2, 2, 3]], [5, 5], 2) == [True, False]\nassert is_majority_in_arrays([[1, 1, 1, 2, 3], [1, 2, 2, 2, 3]], [5, 5], 1) == [True, False]\nassert is_majority_in_arrays([[1, 2, 3, 4, 5], [1, 1, 1, 2, 3]], [5, 5], 3) == [False, False]"
    },
    {
        "id": 99,
        "raw_problem": "# Write a python function to count the number of set bits (binary digits with value 1) in a given number.\ndef count_Set_Bits(n):\n",
        "raw_solution": "    return bin(n)[2:].count('1')\n",
        "new_problem": "# Given a list of integers, write a Python function to return the total number of set bits in all the numbers combined.\ndef total_Set_Bits(numbers):\n",
        "new_solution": "    return sum(count_Set_Bits(n) for n in numbers)\n",
        "test_code": "assert total_Set_Bits([0, 1, 2, 3, 4]) == 5\nassert total_Set_Bits([10, 11, 12, 13, 14]) == 13\nassert total_Set_Bits([255, 255, 255]) == 24\nassert total_Set_Bits([0, 0, 0, 0]) == 0\nassert total_Set_Bits([1, 2, 4, 8, 16]) == 5"
    },
    {
        "id": 100,
        "raw_problem": "# Write a python function to remove the characters which have odd index values of a given string.\ndef odd_values_string(str1):\n",
        "raw_solution": "    return ''.join(str1[i] for i in range(0, len(str1), 2))\n",
        "new_problem": "# Write a Python function to remove the characters which have odd index values from a list of strings. The function should return a list of strings where each string has had its odd-indexed characters removed.\ndef remove_odd_values_from_list(list_of_strings):\n",
        "new_solution": "    return [odd_values_string(s) for s in list_of_strings]\n",
        "test_code": "assert remove_odd_values_from_list(['hello', 'world']) == ['hlo', 'wrd']\nassert remove_odd_values_from_list(['python', 'programming']) == ['pto', 'pormig']\nassert remove_odd_values_from_list(['12345', '67890']) == ['135', '680']"
    },
    {
        "id": 101,
        "raw_problem": "# Write a function to find minimum of three numbers.\ndef min_of_three(a,b,c):\n",
        "raw_solution": "  return min(a, b, c)\n",
        "new_problem": "# Given a list of lists where each sublist contains three numbers, write a function to find the minimum number from each sublist and then return the maximum of these minimum numbers.\ndef max_of_min_of_three(list_of_lists):\n",
        "new_solution": "    min_numbers = [min_of_three(sublist[0], sublist[1], sublist[2]) for sublist in list_of_lists]\n    return max(min_numbers)\n",
        "test_code": "assert max_of_min_of_three([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 7\nassert max_of_min_of_three([[9, 8, 7], [6, 5, 4], [3, 2, 1]]) == 7\nassert max_of_min_of_three([[5, 3, 8], [2, 7, 4], [6, 1, 9]]) == 3"
    },
    {
        "id": 102,
        "raw_problem": "# Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\ndef replace_blank(str1, char):\n",
        "raw_solution": "    return str1.replace(' ', char)\n",
        "new_problem": "# Write a function that takes in a list of strings and a character. The function should replace all blank spaces in each string with the given character, and then concatenate all the modified strings into a single string. Finally, return the concatenated string.\ndef replace_and_concatenate(str_list, char):\n",
        "new_solution": "    modified_strings = [replace_blank(s, char) for s in str_list]\n    return ''.join(modified_strings)\n",
        "test_code": "assert replace_and_concatenate(['hello world', 'goodbye space'], '-') == 'hello-worldgoodbye-space'\nassert replace_and_concatenate(['no spaces here'], '*') == 'no*spaces*here'\nassert replace_and_concatenate(['', 'empty string'], '_') == 'empty_string'"
    },
    {
        "id": 103,
        "raw_problem": "# Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\nimport heapq\ndef larg_nnum(list1, n):\n",
        "raw_solution": "    return heapq.nlargest(n,list1)\n",
        "new_problem": "# Given a list of lists, where each sublist contains integers, write a function that returns a list of the n largest items from each sublist combined. The function should handle an arbitrary number of sublists.\nimport heapq\n\ndef larg_nnum(list1, n):\n",
        "new_solution": "    return heapq.nlargest(n, list1)\n\ndef combined_largest(list_of_lists, n):\n    combined_list = []\n    for sublist in list_of_lists:\n        combined_list.extend(sublist)\n    return larg_nnum(combined_list, n)\n",
        "test_code": "assert combined_largest([[4, 1, 7], [3, 8, 2], [9, 5, 6]], 3) == [9, 8, 7]\nassert combined_largest([[10, 15], [20, 25, 30], [35]], 4) == [35, 30, 25, 20]\nassert combined_largest([[1, 2, 3], [4, 5], [6]], 2) == [6, 5]\nassert combined_largest([[100], [200, 300], [400, 500, 600]], 5) == [600, 500, 400, 300, 200]"
    },
    {
        "id": 104,
        "raw_problem": "# Write a function to find the lateral surface area of a cylinder.\nimport math\ndef lateralsuface_cylinder(r, h):\n",
        "raw_solution": "  return 2 * math.pi * r * h\n",
        "new_problem": "# Write a function to calculate the total surface area of multiple cylinders. The function should take a list of tuples where each tuple contains the radius and height of a cylinder. Use the provided function `lateralsurface_cylinder` to calculate the lateral surface area of each cylinder and sum them up to get the total surface area.\nimport math\n\ndef lateralsurface_cylinder(r, h):\n",
        "new_solution": "  return 2 * math.pi * r * h\n\ndef total_surface_area(cylinders):\n  total_area = 0\n  for cylinder in cylinders:\n    r, h = cylinder\n    total_area += lateralsurface_cylinder(r, h)\n  return total_area\n",
        "test_code": "assert total_surface_area([(1, 2), (2, 3), (3, 4)]) == 2 * math.pi * 1 * 2 + 2 * math.pi * 2 * 3 + 2 * math.pi * 3 * 4"
    },
    {
        "id": 105,
        "raw_problem": "# Write a function to find the volume of a cube given its side length.\ndef volume_cube(l):\n",
        "raw_solution": "  return l ** 3\n",
        "new_problem": "# Write a function to calculate the total volume of multiple cubes given their side lengths in a list.\ndef total_volume_cubes(side_lengths):\n",
        "new_solution": "  total_volume = 0\n  for l in side_lengths:\n    total_volume += volume_cube(l)\n  return total_volume\n",
        "test_code": "assert total_volume_cubes([1, 2, 3]) == 36"
    },
    {
        "id": 106,
        "raw_problem": "# Write a python function to set all even bits of a given number.\ndef even_bit_set_number(n):\n",
        "raw_solution": "    mask = 2\n    while mask < n:\n        n |= mask\n        mask <<= 2\n    return n\n",
        "new_problem": "# Given a list of numbers, write a Python function to set all even bits for each number in the list and then return the sum of all the modified numbers.\ndef sum_of_even_bit_set_numbers(numbers):\n",
        "new_solution": "    def even_bit_set_number(n):\n        mask = 2\n        while mask < n:\n            n |= mask\n            mask <<= 2\n        return n\n    return sum(even_bit_set_number(num) for num in numbers)\n",
        "test_code": "assert sum_of_even_bit_set_numbers([1, 2, 3]) == 6\nassert sum_of_even_bit_set_numbers([5, 10, 15]) == 32\nassert sum_of_even_bit_set_numbers([0, 1, 2, 3, 4]) == 12"
    },
    {
        "id": 107,
        "raw_problem": "# Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\nfrom collections import Counter \ndef check_occurences(test_list):\n",
        "raw_solution": "  return dict(Counter(tuple(sorted(t)) for t in test_list))\n",
        "new_problem": "# Given a list of lists of tuples, write a function that returns a dictionary mapping each unique tuple to the total number of times it occurs across all sublists. Each sublist represents a different set of tuples, and tuples within a sublist are considered unique.\nfrom collections import Counter\n\ndef check_occurences(test_list):\n",
        "new_solution": "  return dict(Counter(tuple(sorted(t)) for t in test_list))\n\ndef total_occurences(list_of_lists):\n  total_counter = Counter()\n  for sublist in list_of_lists:\n    sublist_counter = check_occurences(sublist)\n    total_counter.update(sublist_counter)\n  return dict(total_counter)\n",
        "test_code": "assert total_occurences([[(1, 2), (2, 3)], [(2, 3), (3, 4)], [(1, 2), (4, 5)]]) == {(1, 2): 2, (2, 3): 2, (3, 4): 1, (4, 5): 1}\nassert total_occurences([[(1, 2)], [(2, 3)], [(3, 4)]]) == {(1, 2): 1, (2, 3): 1, (3, 4): 1}\nassert total_occurences([[(1, 2), (1, 2)], [(1, 2), (1, 2)]]) == {(1, 2): 4}"
    },
    {
        "id": 108,
        "raw_problem": "# Write a python function to count the number of non-empty substrings of a given string.\ndef number_of_substrings(str1):\n",
        "raw_solution": "    str_len = len(str1) \n    return str_len * (str_len + 1) // 2\n",
        "new_problem": "# Write a Python function to count the number of non-empty substrings for each string in a list of strings, and then return the sum of these counts.\ndef total_number_of_substrings(str_list):\n",
        "new_solution": "    total_count = 0\n    for s in str_list:\n        total_count += number_of_substrings(s)\n    return total_count\n",
        "test_code": "assert total_number_of_substrings(['abc', 'def']) == 12\nassert total_number_of_substrings(['', 'a']) == 1\nassert total_number_of_substrings(['hello', 'world']) == 30\nassert total_number_of_substrings(['python', 'programming']) == 87"
    },
    {
        "id": 109,
        "raw_problem": "# Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\ndef get_total_number_of_sequences(m, n):\n",
        "raw_solution": "    T=[[0 for _ in range(n + 1)] for _ in range(m + 1)] \n    for i in range(m + 1): \n        for j in range(n + 1): \n            if i==0 or j==0: \n                T[i][j] = 0\n            elif i<j: \n                T[i][j] = 0\n            elif j==1: \n                T[i][j] = i \n            else: \n                T[i][j] = T[i-1][j] + T[i//2][j-1] \n    return T[m][n]\n",
        "new_problem": "# Given a list of tuples where each tuple contains two positive integers m and n, find the sum of the number of possible sequences of length n for each tuple, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. The list can contain up to 100 tuples.\ndef get_total_number_of_sequences_sum(tuples_list):\n",
        "new_solution": "    total_sum = 0\n    for m, n in tuples_list:\n        total_sum += get_total_number_of_sequences(m, n)\n    return total_sum\n",
        "test_code": "assert get_total_number_of_sequences_sum([(5, 3), (10, 2)]) == 27\nassert get_total_number_of_sequences_sum([(3, 2), (4, 2), (5, 2)]) == 12\nassert get_total_number_of_sequences_sum([(1, 1), (2, 1), (3, 1)]) == 6"
    },
    {
        "id": 110,
        "raw_problem": "# Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\ndef replace_list(list1, list2):\n",
        "raw_solution": "    return list1[:-1] + list2\n",
        "new_problem": "# Given a list of lists, where each sublist contains two lists, replace the last element of the first list in each sublist with the elements of the second list in the same sublist. Return the modified list of lists.\ndef replace_list_of_lists(list_of_lists):\n",
        "new_solution": "    return [replace_list(sublist[0], sublist[1]) for sublist in list_of_lists]\n",
        "test_code": "assert replace_list_of_lists([[[1, 2, 3], [4, 5]], [[6, 7], [8, 9]]]) == [[1, 2, 4, 5], [6, 8, 9]]\nassert replace_list_of_lists([[[10], [11, 12]], [[13, 14, 15], [16]]]) == [[11, 12], [13, 14, 16]]\nassert replace_list_of_lists([[[], [1, 2]], [[3, 4], []]]) == [[1, 2], [3]]"
    },
    {
        "id": 111,
        "raw_problem": "# Write a function to count the total number of characters in a string.\ndef count_charac(str1):\n",
        "raw_solution": "    return len(str1)\n",
        "new_problem": "# Given a list of strings, write a function to count the total number of characters in all strings combined.\ndef count_total_chars(str_list):\n",
        "new_solution": "    total_chars = 0\n    for s in str_list:\n        total_chars += count_charac(s)\n    return total_chars\n",
        "test_code": "assert count_total_chars(['hello', 'world']) == 10\nassert count_total_chars(['python', 'programming']) == 17\nassert count_total_chars(['']) == 0\nassert count_total_chars(['a', 'b', 'c', 'd']) == 4"
    },
    {
        "id": 112,
        "raw_problem": "# Write a python function to find the next perfect square greater than a given number.\nimport math  \ndef next_Perfect_Square(N):\n",
        "raw_solution": "    if N < 0:\n        return 0\n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \n",
        "new_problem": "# Write a Python function to find the sum of the next three perfect squares greater than a given list of numbers. The function should return the sum of these three perfect squares for each number in the list.\nimport math\n\ndef next_Perfect_Square(N):\n",
        "new_solution": "    if N < 0:\n        return 0\n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN\n\ndef sum_of_next_three_perfect_squares(numbers):\n    result = []\n    for num in numbers:\n        sum_squares = 0\n        for _ in range(3):\n            num = next_Perfect_Square(num)\n            sum_squares += num\n        result.append(sum_squares)\n    return result\n",
        "test_code": "assert sum_of_next_three_perfect_squares([15, 27]) == [77, 149]\nassert sum_of_next_three_perfect_squares([0, 1]) == [14, 29]\nassert sum_of_next_three_perfect_squares([-1, 100]) == [5, 434]\nassert sum_of_next_three_perfect_squares([49, 64]) == [245, 302]"
    },
    {
        "id": 113,
        "raw_problem": "# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\ndef max_sum(arr):\n",
        "raw_solution": "    MSIBS = arr[:] \n    for i in range(len(arr)): \n        for j in range(0, i): \n            if arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n                MSIBS[i] = MSIBS[j] + arr[i] \n    MSDBS = arr[:] \n    for i in range(1, len(arr) + 1): \n        for j in range(1, i): \n            if arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n                MSDBS[-i] = MSDBS[-j] + arr[-i] \n    max_sum = float(\"-Inf\") \n    for i, j, k in zip(MSIBS, MSDBS, arr): \n        max_sum = max(max_sum, i + j - k) \n    return max_sum\n",
        "new_problem": "# Given a 2D array where each element is an array of integers, find the maximum sum of a bitonic subsequence for each row and then return the sum of the maximum bitonic sums of all rows.\ndef max_sum_2d(arr_2d):\n",
        "new_solution": "    total_max_sum = 0\n    for row in arr_2d:\n        total_max_sum += max_sum(row)\n    return total_max_sum\n\n",
        "test_code": "assert max_sum_2d([[1, 15, 51, 45, 33, 100, 12, 18, 9]]) == 194\nassert max_sum_2d([[80, 60, 30, 40, 20, 10], [1, 15, 51, 45, 33, 100, 12, 18, 9]]) == 404\nassert max_sum_2d([[1, 2, 3, 4, 5, 4, 3, 2, 1], [5, 4, 3, 2, 1, 2, 3, 4, 5]]) == 40"
    },
    {
        "id": 114,
        "raw_problem": "# Write a function to find the length of the longest palindromic subsequence in the given string.\ndef lps(str1):\n",
        "raw_solution": "    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n - 1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i + 1, n):\n            if str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]\n",
        "new_problem": "# Given a list of strings, write a function to find the total length of the longest palindromic subsequence across all strings. You need to sum the lengths of the longest palindromic subsequences for each string in the list.\ndef total_lps_length(strings):\n",
        "new_solution": "    return sum(lps(s) if s else 0 for s in strings)\n",
        "test_code": "assert total_lps_length(['racecar', 'level', 'a']) == 13\nassert total_lps_length(['a', 'bb', 'ccc']) == 6\nassert total_lps_length(['abc', 'def', 'ghi']) == 3\nassert total_lps_length(['']) == 0\nassert total_lps_length(['abba', 'madam', 'radar']) == 14"
    },
    {
        "id": 115,
        "raw_problem": "# Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\ndef count_X(tup, x):\n",
        "raw_solution": "    return tup.count(x)\n",
        "new_problem": "# Given a list of tuples, each containing elements of different types, write a Python function that counts the total occurrences of a specified element across all tuples.\ndef total_count_X(tuples_list, x):\n",
        "new_solution": "    total_count = 0\n    for tup in tuples_list:\n        total_count += count_X(tup, x)\n    return total_count\n",
        "test_code": "assert total_count_X([(1, 2, 3), (2, 3, 4), (3, 4, 5)], 3) == 3\nassert total_count_X([('a', 'b', 'a'), ('b', 'c', 'c'), ('a', 'c', 'a')], 'a') == 4\nassert total_count_X([(1, 'a', 1), ('b', 1, 'b'), (1, 'c', 1)], 1) == 5\nassert total_count_X([(True, False, True), (False, True, False), (True, True, True)], True) == 6\nassert total_count_X([(1, 2, 3), ('a', 'b', 'c'), (True, False, True)], 'd') == 0"
    },
    {
        "id": 116,
        "raw_problem": "# Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\ndef insert_element(list1, element):\n",
        "raw_solution": "    list1 = [v for elt in list1 for v in (element, elt)]\n    return list1\n",
        "new_problem": "# Given a nested list where each sublist contains elements of the same type, write a function that inserts a specified element before each element in each sublist. The function should return the modified nested list.\ndef insert_element_in_nested_list(nested_list, element):\n",
        "new_solution": "    return [insert_element(sublist, element) for sublist in nested_list]\n",
        "test_code": "assert insert_element_in_nested_list([[1, 2], [3, 4]], 0) == [[0, 1, 0, 2], [0, 3, 0, 4]]\nassert insert_element_in_nested_list([['a', 'b'], ['c', 'd']], 'x') == [['x', 'a', 'x', 'b'], ['x', 'c', 'x', 'd']]\nassert insert_element_in_nested_list([[True, False], [False, True]], None) == [[None, True, None, False], [None, False, None, True]]\nassert insert_element_in_nested_list([[10], [20]], 5) == [[5, 10], [5, 20]]\nassert insert_element_in_nested_list([[], []], 'z') == [[], []]"
    },
    {
        "id": 117,
        "raw_problem": "# Write a python function to convert complex numbers to polar coordinates.\nimport cmath  \ndef convert(numbers):\n",
        "raw_solution": "  return cmath.polar(numbers)  \n",
        "new_problem": "# Given a list of complex numbers, write a Python function to find the average distance from the origin in polar coordinates for all numbers. The distance in polar coordinates is given by the magnitude (r) of the polar form of the complex number.\ndef average_distance(complex_numbers):\n",
        "new_solution": "    distances = [convert(num)[0] for num in complex_numbers]\n    return sum(distances) / len(distances)\n",
        "test_code": "assert average_distance([1+1j, 2+2j, 3+3j]) == 2.8284271247461903\nassert average_distance([0j, 1j, 2j]) == 1.0\nassert average_distance([-1-1j, 1+1j, -1+1j, 1-1j]) == 1.4142135623730951"
    },
    {
        "id": 118,
        "raw_problem": "# Write a python function that returns the number of integer elements in a given list.\ndef count_integer(list1):\n",
        "raw_solution": "    return sum(isinstance(x, int) for x in list1)\n",
        "new_problem": "# Given a list of lists, write a Python function that returns the total number of integer elements across all sublists.\ndef total_integer_count(list_of_lists):\n",
        "new_solution": "    return sum(count_integer(sublist) for sublist in list_of_lists)\n",
        "test_code": "assert total_integer_count([[1, 'a', 3], [4, 5, 'b'], [6, 7, 8]]) == 7\nassert total_integer_count([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 9\nassert total_integer_count([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]) == 0\nassert total_integer_count([[1, 'a', 3], [4, 'b', 6], ['c', 7, 8]]) == 6"
    },
    {
        "id": 119,
        "raw_problem": "# Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nfrom itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n",
        "raw_solution": "    return list(combinations_with_replacement(l, n))\n",
        "new_problem": "# Given a list of colors and a list of lengths, generate all combinations (with repetition) of the colors for each length and return a dictionary where the keys are the lengths and the values are lists of tuples representing the combinations for that length.\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors_by_lengths(colors, lengths):\n",
        "new_solution": "    result = {}\n    for length in lengths:\n        result[length] = list(combinations_with_replacement(colors, length))\n    return result\n",
        "test_code": "assert combinations_colors_by_lengths(['red', 'blue'], [1, 2]) == {1: [('red',), ('blue',)], 2: [('red', 'red'), ('red', 'blue'), ('blue', 'blue')]}\nassert combinations_colors_by_lengths(['green', 'yellow', 'purple'], [2, 3]) == {2: [('green', 'green'), ('green', 'yellow'), ('green', 'purple'), ('yellow', 'yellow'), ('yellow', 'purple'), ('purple', 'purple')], 3: [('green', 'green', 'green'), ('green', 'green', 'yellow'), ('green', 'green', 'purple'), ('green', 'yellow', 'yellow'), ('green', 'yellow', 'purple'), ('green', 'purple', 'purple'), ('yellow', 'yellow', 'yellow'), ('yellow', 'yellow', 'purple'), ('yellow', 'purple', 'purple'), ('purple', 'purple', 'purple')]}"
    },
    {
        "id": 120,
        "raw_problem": "# Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\ndef count_Primes_nums(n):\n",
        "raw_solution": "    return sum(all(i % j != 0 for j in range(2, i)) for i in range(2, n))\n",
        "new_problem": "# Write a Python function that takes in a list of non-negative numbers and returns a list where each element is the number of prime numbers less than the corresponding non-negative number in the input list.\ndef count_Primes_for_list(nums):\n",
        "new_solution": "    return [count_Primes_nums(n) for n in nums]\n",
        "test_code": "assert count_Primes_for_list([10, 20, 30]) == [4, 8, 10]"
    },
    {
        "id": 121,
        "raw_problem": "# Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\ndef swap_numbers(a,b):\n",
        "raw_solution": "    return (b, a)\n",
        "new_problem": "# Given a list of tuples, where each tuple contains two numbers, write a function that swaps the numbers in each tuple and then returns a new list of tuples with the swapped numbers. If the list is empty, return an empty list.\ndef swap_all_numbers(tuples_list):\n",
        "new_solution": "    return [swap_numbers(a, b) for a, b in tuples_list] if tuples_list else []\n",
        "test_code": "assert swap_all_numbers([(1, 2), (3, 4), (5, 6)]) == [(2, 1), (4, 3), (6, 5)]\nassert swap_all_numbers([(10, 20), (30, 40)]) == [(20, 10), (40, 30)]\nassert swap_all_numbers([]) == []\nassert swap_all_numbers([(7, 8)]) == [(8, 7)]"
    },
    {
        "id": 122,
        "raw_problem": "# Write a function to maximize the given two tuples.\ndef maximize_elements(test_tup1, test_tup2):\n",
        "raw_solution": "  return tuple((max(a, c), max(b, d)) for (a, b), (c, d) in zip(test_tup1, test_tup2))\n",
        "new_problem": "# Given a list of tuples, each containing two tuples, write a function to maximize each pair of tuples within each tuple in the list. The function should return a list of tuples where each tuple contains the maximized elements from the corresponding pair of tuples in the input list.\ndef maximize_tuples_in_list(list_of_tuples):\n",
        "new_solution": "    results = []\n    for tup1, tup2 in list_of_tuples:\n        maximized_tuple = maximize_elements(tup1, tup2)\n        results.append(maximized_tuple)\n    return results\n",
        "test_code": "assert maximize_tuples_in_list([(((1, 2), (3, 4)), ((5, 6), (7, 8)))]) == [((5, 6), (7, 8))]\nassert maximize_tuples_in_list([(((10, 20), (30, 40)), ((50, 60), (70, 80)))]) == [((50, 60), (70, 80))]\nassert maximize_tuples_in_list([(((1, 1), (1, 1)), ((2, 2), (2, 2)))]) == [((2, 2), (2, 2))]\nassert maximize_tuples_in_list([(((100, 200), (300, 400)), ((500, 600), (700, 800)))]) == [((500, 600), (700, 800))]"
    },
    {
        "id": 123,
        "raw_problem": "# Write a function to find the nth newman\u2013shanks\u2013williams prime number.\ndef newman_prime(n):\n",
        "raw_solution": "    if n == 0 or n == 1: \n        return 1\n    a = 1\n    b = 1\n    c = 1\n    for _ in range(2, n + 1):\n        c = 2 * b + a\n        a = b\n        b = c\n    return c\n",
        "new_problem": "# Write a function to find the sum of the first 'k' Newman-Shanks-Williams prime numbers.\ndef sum_newman_primes(k):\n",
        "new_solution": "    def newman_prime(n):\n        if n == 0 or n == 1:\n            return 1\n        a = 1\n        b = 1\n        c = 1\n        for _ in range(2, n + 1):\n            c = 2 * b + a\n            a = b\n            b = c\n        return c\n    sum_primes = 0\n    for i in range(k):\n        sum_primes += newman_prime(i)\n    return sum_primes\n",
        "test_code": "assert sum_newman_primes(1) == 1\nassert sum_newman_primes(2) == 2\nassert sum_newman_primes(3) == 5\nassert sum_newman_primes(4) == 12\nassert sum_newman_primes(5) == 29"
    },
    {
        "id": 124,
        "raw_problem": "# Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\ndef division_elements(test_tup1, test_tup2):\n",
        "raw_solution": "  return tuple(ele1 / ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n",
        "new_problem": "# Write a function that takes in a list of tuples and performs mathematical division operation element-wise across each tuple. The function should return a list of tuples where each tuple contains the results of the division operations for the corresponding input tuple.\ndef division_elements_list(tuple_list):\n",
        "new_solution": "  return [division_elements(tup1, tup2) for tup1, tup2 in tuple_list]\n",
        "test_code": "assert division_elements_list([((10, 4, 6), (5, 2, 3)), ((8, 12, 18), (2, 3, 6))]) == [(2.0, 2.0, 2.0), (4.0, 4.0, 3.0)]\nassert division_elements_list([((15, 9, 3), (5, 3, 1)), ((20, 16, 12), (4, 4, 3))]) == [(3.0, 3.0, 3.0), (5.0, 4.0, 4.0)]\nassert division_elements_list([((7, 14, 21), (1, 2, 3)), ((6, 12, 18), (2, 4, 6))]) == [(7.0, 7.0, 7.0), (3.0, 3.0, 3.0)]"
    },
    {
        "id": 125,
        "raw_problem": "# Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\ndef split_two_parts(list1, L):\n",
        "raw_solution": "    return list1[:L], list1[L:]\n",
        "new_problem": "# Write a function that takes in a list and a list of integers representing the lengths of parts to split the given list into. The function should return a list of lists where each sublist corresponds to the parts specified by the input lengths. If the sum of the input lengths is not equal to the length of the original list, the function should return an empty list.\ndef split_list_by_lengths(list1, lengths):\n",
        "new_solution": "    if sum(lengths) != len(list1):\n        return []\n    result = []\n    start = 0\n    for length in lengths:\n        result.append(split_two_parts(list1[start:], length)[0])\n        start += length\n    return result\n",
        "test_code": "assert split_list_by_lengths([1, 2, 3, 4, 5], [2, 3]) == [[1, 2], [3, 4, 5]]\nassert split_list_by_lengths([1, 2, 3, 4, 5], [1, 2, 2]) == [[1], [2, 3], [4, 5]]\nassert split_list_by_lengths([1, 2, 3, 4, 5], [1, 4]) == [[1], [2, 3, 4, 5]]\nassert split_list_by_lengths([], [0]) == [[]]"
    },
    {
        "id": 126,
        "raw_problem": "# Write a function to calculate a dog's age in dog's years.\ndef dog_age(h_age):\n",
        "raw_solution": "    if h_age <= 2:\n        d_age = h_age * 10.5\n    else:\n        d_age = 21 + (h_age - 2) * 4\n    return d_age\n",
        "new_problem": "# Write a function to calculate the average dog age in dog years for a list of human ages. The function should return the average age in dog years.\ndef average_dog_age(h_ages):\n",
        "new_solution": "    total_d_age = 0\n    for h_age in h_ages:\n        total_d_age += dog_age(h_age)\n    return total_d_age / len(h_ages)\n",
        "test_code": "assert average_dog_age([1, 2, 3]) == 18.833333333333332\nassert average_dog_age([5, 10, 15]) == 53.0\nassert average_dog_age([0, 1, 2, 3, 4]) == 17.1"
    },
    {
        "id": 127,
        "raw_problem": "# Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\ndef list_split(S, step):\n",
        "raw_solution": "    return [S[i::step] for i in range(step)]\n",
        "new_problem": "# Given a list of integers and two integers m and n, split the list into sublists using the function from the raw question for every nth element. Then, for each sublist, split it again using the same function for every mth element. Return a list of all the resulting sublists.\ndef complex_list_split(S, m, n):\n",
        "new_solution": "    first_split = list_split(S, n)\n    result = []\n    for sublist in first_split:\n        result.extend(list_split(sublist, m))\n    return result\n",
        "test_code": "assert complex_list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 3) == [[1, 7], [4, 10], [2, 8], [5], [3, 9], [6]]\nassert complex_list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 2) == [[1, 3, 5, 7, 9], [2, 4, 6, 8, 10]]\nassert complex_list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4) == [[1], [5], [9], [2], [6], [10], [3], [7], [], [4], [8], []]"
    },
    {
        "id": 128,
        "raw_problem": "# Write a function to find the lateral surface area of a cube given its side length.\ndef lateralsurface_cube(l):\n",
        "raw_solution": "  return 4 * l * l\n",
        "new_problem": "# Write a function to calculate the total surface area of multiple cubes given a list of their side lengths.\ndef total_surface_area_cubes(side_lengths):\n",
        "new_solution": "    total_area = 0\n    for l in side_lengths:\n        total_area += lateralsurface_cube(l)\n    return total_area\n",
        "test_code": "assert total_surface_area_cubes([1, 2, 3]) == 56\nassert total_surface_area_cubes([0, 1, 2]) == 20"
    },
    {
        "id": 129,
        "raw_problem": "# Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\ndef square_Sum(n):\n",
        "raw_solution": "    return n * (4 * n * n - 1) / 3\n",
        "new_problem": "# Write a Python function that takes in a list of integers, where each integer represents a different value of n. The function should return the sum of the sums of the squares of the first n odd natural numbers for each integer in the list.\ndef sum_of_square_sums(lst):\n",
        "new_solution": "    return sum(square_Sum(n) for n in lst)\n",
        "test_code": "assert sum_of_square_sums([1, 2, 3]) == 46"
    },
    {
        "id": 130,
        "raw_problem": "# Write a function to find the n'th star number.\ndef find_star_num(n):\n",
        "raw_solution": "    return 6 * n * (n - 1) + 1 \n",
        "new_problem": "# Write a function to find the sum of the first k star numbers.\ndef sum_star_nums(k):\n",
        "new_solution": "    total = 0\n    for i in range(1, k + 1):\n        total += find_star_num(i)\n    return total\n",
        "test_code": "assert sum_star_nums(1) == 1\nassert sum_star_nums(2) == 14\nassert sum_star_nums(3) == 51\nassert sum_star_nums(4) == 124"
    },
    {
        "id": 131,
        "raw_problem": "# Write a function to find the ascii value of a character.\ndef ascii_value(k):\n",
        "raw_solution": "  return ord(k)\n",
        "new_problem": "# Write a function to calculate the sum of the ASCII values of all characters in a given string.\ndef sum_ascii_values(s):\n",
        "new_solution": "  return sum(ascii_value(char) for char in s)\n",
        "test_code": "assert sum_ascii_values('') == 0\nassert sum_ascii_values('A') == 65\nassert sum_ascii_values('hello') == 532\nassert sum_ascii_values('Python') == 642\nassert sum_ascii_values('123') == 150"
    },
    {
        "id": 132,
        "raw_problem": "# Write a python function to find the sum of even numbers at even positions of a list.\ndef sum_even_and_even_index(arr):\n",
        "raw_solution": "    return sum(x for x in arr[::2] if x % 2 == 0)\n",
        "new_problem": "# Given a list of lists, write a Python function to find the sum of even numbers at even positions for each sublist, and then return the sum of these sums.\ndef sum_of_sums_even_and_even_index(arr_of_arrs):\n",
        "new_solution": "    return sum(sum_even_and_even_index(sublist) for sublist in arr_of_arrs)\n",
        "test_code": "assert sum_of_sums_even_and_even_index([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == 0\nassert sum_of_sums_even_and_even_index([[1, 3, 5, 7], [2, 4, 6, 8], [10, 12, 14, 16]]) == 32\nassert sum_of_sums_even_and_even_index([[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3]]) == 4"
    },
    {
        "id": 133,
        "raw_problem": "# Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\ndef even_Power_Sum(n):\n",
        "raw_solution": "    return sum(x ** 5 for x in range(2, 2 * n + 1, 2))\n",
        "new_problem": "# Write a python function that takes in a list of integers and finds the sum of the first n even natural numbers that are raised to the fifth power for each integer n in the list. The function should return a list of sums corresponding to each integer in the input list.\ndef even_Power_Sum_List(lst):\n",
        "new_solution": "    return [even_Power_Sum(n) for n in lst]\n",
        "test_code": "assert even_Power_Sum_List([1, 2, 3]) == [32, 1056, 8832]\nassert even_Power_Sum_List([0, 4, 5]) == [0, 41600, 141600]\nassert even_Power_Sum_List([10]) == [7066400]"
    },
    {
        "id": 134,
        "raw_problem": "# Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\ndef rear_extract(test_list):\n",
        "raw_solution": "  return [x[-1] for x in test_list]\n",
        "new_problem": "# Write a function that takes in a list of lists of tuples and returns a list containing the rear element of each tuple from each list. If a list is empty, it should be skipped in the result.\ndef multi_rear_extract(test_lists):\n",
        "new_solution": "  return [rear_extract(sublist) for sublist in test_lists if sublist]\n",
        "test_code": "assert multi_rear_extract([[(1, 2), (3, 4)], [(5, 6), (7, 8)]]) == [[2, 4], [6, 8]]\nassert multi_rear_extract([[(1, 2)], [], [(3, 4)]]) == [[2], [4]]\nassert multi_rear_extract([[], [(1, 2), (3, 4)]]) == [[2, 4]]\nassert multi_rear_extract([[], []]) == []\nassert multi_rear_extract([[(1, 2), (3, 4)], [(5, 6)]]) == [[2, 4], [6]]"
    },
    {
        "id": 135,
        "raw_problem": "# Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\ndef substract_elements(test_tup1, test_tup2):\n",
        "raw_solution": "  return tuple(x - y for x, y in zip(test_tup1, test_tup2))\n",
        "new_problem": "# Write a function that takes in a list of tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index, then subtracts the result from the third tuple, and so on. The function should return the final result as a tuple.\ndef chained_subtract_elements(tuple_list):\n",
        "new_solution": "    result = tuple_list[0]\n    for tup in tuple_list[1:]:\n        result = substract_elements(result, tup)\n    return result\n",
        "test_code": "assert chained_subtract_elements([(10, 20, 30), (5, 5, 5), (2, 2, 2)]) == (3, 13, 23)\nassert chained_subtract_elements([(100, 200), (10, 20), (5, 10)]) == (85, 170)\nassert chained_subtract_elements([(1, 1, 1), (1, 1, 1), (1, 1, 1)]) == (-1, -1, -1)"
    },
    {
        "id": 136,
        "raw_problem": "# Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nimport math  \ndef even_binomial_Coeff_Sum(n):\n",
        "raw_solution": "    return 1 << (n - 1)\n",
        "new_problem": "# Write a Python function that takes in a list of positive integers and finds the sum of even index binomial coefficients for each integer in the list. The function should return a list of the results for each integer.\ndef sum_even_binomial_coeffs(numbers):\n",
        "new_solution": "    return [even_binomial_Coeff_Sum(n) for n in numbers]\n",
        "test_code": "assert sum_even_binomial_coeffs([1, 2, 3]) == [1, 2, 4]\nassert sum_even_binomial_coeffs([4, 5, 6]) == [8, 16, 32]\nassert sum_even_binomial_coeffs([7, 8, 9]) == [64, 128, 256]"
    },
    {
        "id": 137,
        "raw_problem": "# Write a function that takes in the radius and height of a cylinder and returns the the volume.\nimport math\ndef volume_cylinder(r,h):\n",
        "raw_solution": "  return math.pi * r * r * h\n",
        "new_problem": "# Given a list of cylinders, each represented by a tuple (radius, height), write a function that returns the total volume of all cylinders. If the list is empty, return 0.\nimport math\n\ndef volume_cylinder(r, h):\n",
        "new_solution": "  return math.pi * r * r * h\n\ndef total_volume_cylinders(cylinders):\n  total_volume = 0\n  for cylinder in cylinders:\n    radius, height = cylinder\n    total_volume += volume_cylinder(radius, height)\n  return total_volume\n",
        "test_code": "assert total_volume_cylinders([(2, 3), (4, 5)]) == 289.02652413026095\nassert total_volume_cylinders([]) == 0"
    },
    {
        "id": 138,
        "raw_problem": "# Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\ndef dict_filter(dict1, n):\n",
        "raw_solution": "    return {key : value for (key, value) in dict1.items() if value >=n}\n",
        "new_problem": "# Given a list of dictionaries, each containing the same keys but different values, and an integer n, write a function that returns a new list of dictionaries where each dictionary is filtered to only include entries with values greater than or equal to n. Additionally, the function should return the total count of all filtered entries across all dictionaries.\ndef multi_dict_filter(dict_list, n):\n",
        "new_solution": "    filtered_list = [dict_filter(d, n) for d in dict_list]\n    total_count = sum(len(d) for d in filtered_list)\n    return filtered_list, total_count\n",
        "test_code": "assert multi_dict_filter([{'a': 1, 'b': 2}, {'a': 3, 'b': 4}], 3) == ([{}, {'a': 3, 'b': 4}], 2)\nassert multi_dict_filter([{'a': 1, 'b': 2}, {'a': 3, 'b': 4}, {'a': 5, 'b': 6}], 4) == ([{}, {'b': 4}, {'a': 5, 'b': 6}], 3)\nassert multi_dict_filter([{'a': 1, 'b': 2}, {'a': 3, 'b': 4}, {'a': 5, 'b': 6}], 1) == ([{'a': 1, 'b': 2}, {'a': 3, 'b': 4}, {'a': 5, 'b': 6}], 6)"
    },
    {
        "id": 139,
        "raw_problem": "# Write a function to find the number of elements that occurs before the tuple element in the given tuple.\ndef count_first_elements(test_tup):\n",
        "raw_solution": "  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return count\n",
        "new_problem": "# Given a list of tuples, write a function to find the total number of elements that occur before any tuple element in each tuple, and then sum these counts for all tuples in the list.\ndef sum_counts_before_tuples(tup_list):\n",
        "new_solution": "    total_count = 0\n    for tup in tup_list:\n        total_count += count_first_elements(tup)\n    return total_count\n",
        "test_code": "assert sum_counts_before_tuples([(1, 2, 3), (4, (5, 6), 7), (8, 9, (10, 11))]) == 5\nassert sum_counts_before_tuples([(1, (2, 3)), (4, 5, (6, 7)), ((8, 9), 10)]) == 3\nassert sum_counts_before_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == 6"
    },
    {
        "id": 140,
        "raw_problem": "# Write a function to find the nth decagonal number.\ndef is_num_decagonal(n):\n",
        "raw_solution": "    return 4 * n * n - 3 * n \n",
        "new_problem": "# Given a list of integers, write a function to find the sum of the first 10 decagonal numbers for each integer in the list. If the integer is negative, return 0 for that integer.\ndef sum_of_decagonal_numbers(lst):\n",
        "new_solution": "    result = []\n    for num in lst:\n        if num < 0:\n            result.append(0)\n        else:\n            sum_decagonal = sum(is_num_decagonal(i) for i in range(1, 11))\n            result.append(sum_decagonal)\n    return result\n",
        "test_code": "assert sum_of_decagonal_numbers([1, 2, 3]) == [1375, 1375, 1375]\nassert sum_of_decagonal_numbers([-1, 0, 1]) == [0, 1375, 1375]\nassert sum_of_decagonal_numbers([5, 10, 15]) == [1375, 1375, 1375]\nassert sum_of_decagonal_numbers([-5, -10, -15]) == [0, 0, 0]"
    },
    {
        "id": 141,
        "raw_problem": "# Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\ndef sequential_search(dlist, item):\n",
        "raw_solution": "    return item in dlist, (dlist.index(item) if item in dlist else -1)\n",
        "new_problem": "# Write a function that takes in two arrays and returns a tuple containing two lists. The first list should contain the indices of the first occurrence of each element of the second array in the first array. The second list should contain the indices of the last occurrence of each element of the second array in the first array. If an element from the second array is not found in the first array, its index should be represented as -1 in both lists.\ndef find_indices(arr1, arr2):\n",
        "new_solution": "    first_occurrences = []\n    last_occurrences = []\n    for item in arr2:\n        found, index = sequential_search(arr1, item)\n        if found:\n            first_occurrences.append(index)\n            last_occurrences.append(arr1.index(item, index))\n        else:\n            first_occurrences.append(-1)\n            last_occurrences.append(-1)\n    return first_occurrences, last_occurrences\n",
        "test_code": "assert find_indices([1, 2, 3, 4, 5], [3, 6, 1]) == ([2, -1, 0], [2, -1, 0])\nassert find_indices(['a', 'b', 'a', 'c'], ['a', 'c', 'd']) == ([0, 3, -1], [0, 3, -1])\nassert find_indices([10, 20, 30], [20, 30, 10]) == ([1, 2, 0], [1, 2, 0])"
    },
    {
        "id": 142,
        "raw_problem": "# Write a python function to check if the elements of a given list are unique or not.\ndef all_unique(test_list):\n",
        "raw_solution": "    return len(test_list) == len(set(test_list))\n",
        "new_problem": "# Given a list of lists, write a Python function to check if all the sublists have unique elements. If any sublist contains duplicate elements, the function should return False, otherwise it should return True.\ndef all_sublists_unique(list_of_lists):\n",
        "new_solution": "    return all(all_unique(sublist) for sublist in list_of_lists)\n",
        "test_code": "assert all_sublists_unique([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == True\nassert all_sublists_unique([[1, 2, 2], [4, 5, 6], [7, 8, 9]]) == False\nassert all_sublists_unique([[1, 2, 3], [4, 5, 6], [7, 7, 9]]) == False\nassert all_sublists_unique([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == True"
    },
    {
        "id": 143,
        "raw_problem": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1,nums2):\n",
        "raw_solution": "  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
        "new_problem": "# Given a list of lists, where each sublist contains exactly two lists, write a function to subtract the second list from the first list element-wise for each sublist and return a list of the results.\ndef sub_list_of_lists(list_of_lists):\n",
        "new_solution": "  return [sub_list(sublist[0], sublist[1]) for sublist in list_of_lists]\n",
        "test_code": "assert sub_list_of_lists([[[1, 2, 3], [1, 1, 1]], [[4, 5, 6], [2, 2, 2]]]) == [[0, 1, 2], [2, 3, 4]]\nassert sub_list_of_lists([[[7, 8, 9], [3, 4, 5]], [[10, 11, 12], [6, 7, 8]]]) == [[4, 4, 4], [4, 4, 4]]\nassert sub_list_of_lists([[[1, 1, 1], [1, 1, 1]], [[2, 2, 2], [2, 2, 2]]]) == [[0, 0, 0], [0, 0, 0]]"
    },
    {
        "id": 144,
        "raw_problem": "# Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n):\n",
        "raw_solution": "    digits = [int(digit) for digit in str(n)]\n    return all(digit >= digits.count(digit) for digit in digits)\n",
        "new_problem": "# Given a list of integers, write a function that checks whether for each integer in the list, the frequency of each digit in the integer is less than or equal to the digit itself. The function should return a list of boolean values, where each boolean corresponds to whether the condition is satisfied for the respective integer in the list.\ndef validate_list(numbers):\n",
        "new_solution": "    return [validate(num) for num in numbers]\n",
        "test_code": "assert validate_list([123, 444, 55555]) == [True, True, True]\nassert validate_list([1234, 555, 666666]) == [True, True, True]\nassert validate_list([111, 222, 3333]) == [False, False, False]"
    },
    {
        "id": 145,
        "raw_problem": "# Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\ndef check_element(list1, element):\n",
        "raw_solution": "  return all(v == element for v in list1)\n",
        "new_problem": "# Write a function that takes in a list of lists and an element. The function should return a list of booleans where each boolean indicates whether all items in the corresponding sublist are equal to the given element.\ndef check_elements_in_lists(list_of_lists, element):\n",
        "new_solution": "    return [check_element(sublist, element) for sublist in list_of_lists]\n",
        "test_code": "assert check_elements_in_lists([[1, 1, 1], [2, 2, 2], [1, 1, 1]], 1) == [True, False, True]\nassert check_elements_in_lists([[3, 3], [3, 3], [3, 3]], 3) == [True, True, True]\nassert check_elements_in_lists([[4, 5], [5, 5], [5, 4]], 5) == [False, True, False]"
    },
    {
        "id": 146,
        "raw_problem": "# Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nimport re\ndef text_match_two_three(text):\n",
        "raw_solution": "    patterns = 'ab{2,3}'\n    return re.search(patterns, text) is not None\n",
        "new_problem": "# Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters, and then followed by another 'a' character followed by two or three 'b' characters again. The function should return True if both patterns are found in the string, otherwise False.\nimport re\n\ndef text_match_two_three_twice(text):\n",
        "new_solution": "    pattern1 = 'ab{2,3}'\n    pattern2 = 'ab{2,3}'\n    match1 = re.search(pattern1, text)\n    if match1:\n        remaining_text = text[match1.end():]\n        match2 = re.search(pattern2, remaining_text)\n        return match2 is not None\n    return False\n",
        "test_code": "assert text_match_two_three_twice('abbaabb') == True\nassert text_match_two_three_twice('abbabb') == True\nassert text_match_two_three_twice('abba') == False\nassert text_match_two_three_twice('abbbabbb') == True\nassert text_match_two_three_twice('aabb') == False"
    },
    {
        "id": 147,
        "raw_problem": "# Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\ndef max_sub_array_sum_repeated(a, n, k):\n",
        "raw_solution": "    modifed = a * k\n    pre = 0    # dp[i-1]\n    res = modifed[0]\n    for n in modifed:\n        pre = max(pre + n, n)\n        res = max(pre, res)\n    return res\n",
        "new_problem": "# Given a list of arrays, each representing a modified array formed by repeating a given array k times, write a function to find the largest sum of a contiguous subarray for each modified array and return the maximum sum among all the modified arrays.\ndef max_sub_array_sum_repeated_multiple(arrays, ks):\n",
        "new_solution": "    max_sum = float('-inf') \n    for a, k in zip(arrays, ks): \n        current_max = max_sub_array_sum_repeated(a, len(a), k) \n        if current_max > max_sum: \n            max_sum = current_max \n    return max_sum\n",
        "test_code": "assert max_sub_array_sum_repeated_multiple([[1, 2], [3, -1]], [2, 3]) == 7\nassert max_sub_array_sum_repeated_multiple([[-1, -2], [3, 4]], [1, 2]) == 14"
    },
    {
        "id": 148,
        "raw_problem": "# Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\ndef square_Sum(n):\n",
        "raw_solution": "    return 2 * n * (n + 1) * (2 * n + 1) /3\n",
        "new_problem": "# Write a Python function that takes in a list of integers, where each integer represents a number of even natural numbers. The function should return a list where each element is the sum of squares of the first n even natural numbers corresponding to the integers in the input list.\ndef sum_of_squares_list(numbers):\n",
        "new_solution": "    return [square_Sum(num) for num in numbers]\n",
        "test_code": "assert sum_of_squares_list([1, 2, 3]) == [4.0, 20.0, 56.0]\nassert sum_of_squares_list([0, 4, 5]) == [0.0, 120.0, 220.0]\nassert sum_of_squares_list([10]) == [1540.0]"
    },
    {
        "id": 149,
        "raw_problem": "# Write a function to find the list of maximum length in a list of lists.\ndef max_length(list1):\n",
        "raw_solution": "    return max([(len(x), x) for x in list1], key=lambda x: x[0])\n",
        "new_problem": "# Given a list of lists, where each sublist contains integers, find the sublist with the maximum sum and the sublist with the maximum length. If there are multiple sublists with the same maximum sum, return the one with the longest length. If there are multiple sublists with the same maximum length, return the one with the highest sum.\ndef max_sum_and_length(list_of_lists):\n",
        "new_solution": "    max_sum_list = max(list_of_lists, key=sum)\n    max_length_list = max_length(list_of_lists)[1]\n    if sum(max_sum_list) > sum(max_length_list):\n        return max_sum_list\n    elif sum(max_sum_list) < sum(max_length_list):\n        return max_length_list\n    else:\n        return max(max_sum_list, max_length_list, key=len)\n\n# Using the raw solution function\ndef max_length(list1):\n    return max([(len(x), x) for x in list1], key=lambda x: x[0])\n",
        "test_code": "assert max_sum_and_length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]\nassert max_sum_and_length([[1, 2], [3, 4], [5, 6]]) == [5, 6]\nassert max_sum_and_length([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5]]) == [1, 2, 3, 4, 5]\nassert max_sum_and_length([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [7, 8, 9]"
    },
    {
        "id": 150,
        "raw_problem": "# Write a python function to find quotient of two numbers (rounded down to the nearest integer).\ndef find(n,m):\n",
        "raw_solution": "    return n // m \n",
        "new_problem": "# Given a list of tuples, where each tuple contains two integers representing a division operation, write a Python function to find the sum of all quotients (rounded down to the nearest integer) for each tuple in the list.\ndef sum_of_quotients(operations):\n",
        "new_solution": "    total = 0\n    for n, m in operations:\n        total += find(n, m)\n    return total\n",
        "test_code": "assert sum_of_quotients([(10, 3), (7, 2), (15, 4)]) == 9\nassert sum_of_quotients([(20, 5), (9, 3), (12, 4)]) == 10\nassert sum_of_quotients([(100, 10), (81, 9), (64, 8)]) == 27"
    },
    {
        "id": 151,
        "raw_problem": "# Write a function to find the third side of a right angled triangle.\nimport math\ndef otherside_rightangle(w,h):\n",
        "raw_solution": "  return math.sqrt(w * w + h * h)\n",
        "new_problem": "# Given a list of tuples representing the legs of multiple right-angled triangles, write a function to calculate the sum of the third sides of all these triangles.\nimport math\n\ndef otherside_rightangle(w, h):\n",
        "new_solution": "  return math.sqrt(w * w + h * h)\n\ndef sum_of_third_sides(triangles):\n  total_sum = 0\n  for triangle in triangles:\n    total_sum += otherside_rightangle(triangle[0], triangle[1])\n  return total_sum\n",
        "test_code": "assert sum_of_third_sides([(3, 4), (5, 12), (8, 15)]) == 35.0\nassert sum_of_third_sides([(1, 1), (2, 2), (3, 3)]) == 8.485281374238571"
    },
    {
        "id": 152,
        "raw_problem": "# Write a function to find the maximum value in a given heterogeneous list.\ndef max_val(listval):\n",
        "raw_solution": "     max_val = max(i for i in listval if isinstance(i, int)) \n     return max_val\n",
        "new_problem": "# Given a list of heterogeneous lists, write a function to find the maximum value across all the lists.\ndef max_val_across_lists(list_of_lists):\n",
        "new_solution": "    max_values = [max_val(lst) for lst in list_of_lists]\n    return max(max_values)\n",
        "test_code": "assert max_val_across_lists([[1, 'a', 3], [4, 'b', 6], [7, 'c', 9]]) == 9\nassert max_val_across_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 9\nassert max_val_across_lists([[1, 'a', 3], [4, 'b', 6], [7, 'c', 8]]) == 8\nassert max_val_across_lists([[1, 'a', 3], [4, 'b', 6], [7, 'c', 9], [10, 'd', 11]]) == 11"
    },
    {
        "id": 153,
        "raw_problem": "# Write a python function to count inversions in an array.\ndef get_Inv_Count(arr):\n",
        "raw_solution": "    # consider use merge sort, but for simplicity, use brute force\n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \n",
        "new_problem": "# Given a list of arrays, write a Python function to find the total number of inversions across all arrays. An inversion in an array is defined as a pair (arr[i], arr[j]) where i < j and arr[i] > arr[j].\ndef total_inversions(arrays):\n",
        "new_solution": "    total_inv_count = 0\n    for arr in arrays:\n        total_inv_count += get_Inv_Count(arr)\n    return total_inv_count\n",
        "test_code": "assert total_inversions([[1, 2, 3], [3, 2, 1], [1, 3, 2]]) == 4\nassert total_inversions([[1, 2, 3, 4], [4, 3, 2, 1]]) == 6\nassert total_inversions([[1, 1, 1], [2, 2, 2]]) == 0\nassert total_inversions([[5, 4, 3, 2, 1], [1, 2, 3, 4, 5]]) == 10"
    },
    {
        "id": 154,
        "raw_problem": "# Write a function to flatten a given nested list structure.\ndef flatten_list(list1):\n",
        "raw_solution": "    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result\n",
        "new_problem": "# Given a list of nested lists, where each nested list contains either integers or further nested lists, write a function to find the sum of all integers in the entire structure. If a nested list contains other nested lists, you should recursively flatten these lists to get the sum of all integers.\n\ndef sum_nested_list(list1):\n",
        "new_solution": "    flattened_list = flatten_list(list1)\n    return sum(flattened_list)\n",
        "test_code": "assert sum_nested_list([1, [2, [3, 4], 5], 6]) == 21\nassert sum_nested_list([[1, 2], [3, [4, 5]], 6]) == 21\nassert sum_nested_list([1, 2, 3, 4, 5]) == 15\nassert sum_nested_list([[[1], 2], [3, [4]], 5]) == 15\nassert sum_nested_list([]) == 0"
    },
    {
        "id": 155,
        "raw_problem": "# Write a function to calculate the maximum aggregate from the list of tuples.\nfrom collections import defaultdict\ndef max_aggregate(stdata):\n",
        "raw_solution": "    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\n",
        "new_problem": "# Given a list of student records, where each record is a tuple containing a student's name and a list of their marks across multiple subjects, write a function to calculate the student with the highest average marks across all subjects.\nfrom collections import defaultdict\n\ndef max_aggregate(stdata):\n",
        "new_solution": "    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\n\ndef highest_average_marks(records):\n    aggregated_marks = defaultdict(list)\n    for name, marks_list in records:\n        for marks in marks_list:\n            aggregated_marks[name].append(marks)\n    average_marks = {name: sum(marks)/len(marks) for name, marks in aggregated_marks.items()}\n    return max(average_marks.items(), key=lambda x: x[1])\n",
        "test_code": "assert highest_average_marks([('Alice', [85, 90, 92]), ('Bob', [80, 88, 95]), ('Charlie', [75, 82, 87])]) == ('Alice', 89.0)\nassert highest_average_marks([('David', [90, 95, 100]), ('Eve', [85, 92, 98]), ('Frank', [80, 85, 90])]) == ('David', 95.0)\nassert highest_average_marks([('Grace', [70, 75, 80]), ('Hannah', [65, 70, 75]), ('Ivy', [60, 65, 70])]) == ('Grace', 75.0)"
    },
    {
        "id": 156,
        "raw_problem": "# Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\ndef count_binary_seq(n):\n",
        "raw_solution": "    nCr = 1\n    res = 1\n    for r in range(1, n + 1): \n        nCr = (nCr * (n + 1 - r)) / r \n        res += nCr * nCr \n    return res \n",
        "new_problem": "# Write a function to find the count of all binary sequences of length 4n such that the sum of the first n bits is the same as the sum of the next n bits, the sum of the next n bits is the same as the sum of the next n bits, and so on, until the last n bits.\ndef count_binary_seq_4n(n):\n",
        "new_solution": "    count_seq = count_binary_seq(n)\n    return count_seq ** 4\n",
        "test_code": "assert count_binary_seq_4n(1) == 16\nassert count_binary_seq_4n(2) == 1296.0\nassert count_binary_seq_4n(3) == 160000.0"
    },
    {
        "id": 157,
        "raw_problem": "# Write a function to find the depth of a dictionary.\ndef dict_depth_aux(d):\n",
        "raw_solution": "    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth_aux, d.values())) if d else 0)\n    return 0\ndef dict_depth(d):\n    return dict_depth_aux(d)\n",
        "new_problem": "# Given a list of dictionaries, write a function to find the maximum depth among all dictionaries in the list.\ndef max_dict_depth(dict_list):\n",
        "new_solution": "    return max(dict_depth(d) for d in dict_list)\n",
        "test_code": "assert max_dict_depth([{'a': {}}, {'b': {'c': {}}}]) == 3\nassert max_dict_depth([{}, {'a': {'b': {}}}]) == 3\nassert max_dict_depth([{'a': {'b': {'c': {}}}}]) == 4\nassert max_dict_depth([{}]) == 1"
    },
    {
        "id": 158,
        "raw_problem": "# Write a function to return two words from a list of words starting with letter 'p'.\nimport re\ndef start_withp(words):\n",
        "raw_solution": "    for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()\n",
        "new_problem": "# Given a list of sentences, write a function to return a list of tuples. Each tuple should contain two words starting with the letter 'p' from each sentence. If a sentence does not contain two such words, it should be ignored.\nimport re\n\ndef extract_p_words(sentences):\n",
        "new_solution": "    result = []\n    for sentence in sentences:\n        words = sentence.split()\n        p_words = start_withp(words)\n        if p_words:\n            result.append(p_words)\n    return result\n",
        "test_code": "assert extract_p_words(['Peter Piper picked a peck of pickled peppers', 'Please pass the peas']) == []\nassert extract_p_words(['This is a test sentence', 'Another sentence without p words']) == []\nassert extract_p_words(['Pineapple pizza is popular', 'Penguins prefer polar regions']) == []"
    },
    {
        "id": 159,
        "raw_problem": "# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\ndef max_sum_increasing_subseq(a, n, index, k):\n",
        "raw_solution": "    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        if a[i] > a[0]:\n            dp[0][i] = a[i] + a[0]\n        else:\n            dp[0][i] = a[i]\n    for i in range(1, n):\n        for j in range(n):\n            if a[j] > a[i] and j > i:\n                if dp[i - 1][i] + a[j] > dp[i - 1][j]:\n                    dp[i][j] = dp[i - 1][i] + a[j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[index][k]\n",
        "new_problem": "# Given an array of integers, find the maximum sum of increasing subsequences that can be formed by including elements from multiple non-overlapping ranges. Specifically, you are given a list of tuples where each tuple contains two indices (start, end) representing a range. For each range, you need to find the maximum sum of increasing subsequences that includes the element at the 'end' index. The final result should be the sum of the maximum sums obtained from each range.\ndef max_sum_increasing_subseq_multiple_ranges(a, ranges):\n",
        "new_solution": "    total_sum = 0\n    for start, end in ranges:\n        total_sum += max_sum_increasing_subseq(a, len(a), start, end)\n    return total_sum\n",
        "test_code": "assert max_sum_increasing_subseq_multiple_ranges([1, 101, 2, 3, 100, 4, 5], [(0, 1), (2, 4), (5, 6)]) == 220\nassert max_sum_increasing_subseq_multiple_ranges([3, 4, 5, 10], [(0, 1), (1, 2), (2, 3)]) == 41\nassert max_sum_increasing_subseq_multiple_ranges([10, 5, 4, 3], [(0, 1), (1, 2), (2, 3)]) == 12"
    },
    {
        "id": 160,
        "raw_problem": "# Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\ndef large_product(nums1, nums2, N):\n",
        "raw_solution": "    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
        "new_problem": "# Given multiple pairs of lists, write a function to find the specified number of largest products from each pair of lists, selecting one factor from each list in each pair. The function should return a list of the largest products for each pair of lists.\ndef large_products_from_pairs(list_pairs, N):\n",
        "new_solution": "    results = []\n    for nums1, nums2 in list_pairs:\n        results.append(large_product(nums1, nums2, N))\n    return results\n",
        "test_code": "assert large_products_from_pairs([([1, 2], [3, 4]), ([5, 6], [7, 8])], 2) == [[8, 6], [48, 42]]"
    },
    {
        "id": 161,
        "raw_problem": "# Write a python function to find the maximum of two numbers.\ndef maximum(a,b):\n",
        "raw_solution": "    return max(a, b)\n",
        "new_problem": "# Write a Python function to find the maximum value in a list of tuples where each tuple contains two numbers. The function should return the maximum value found across all tuples.\ndef find_max_in_tuples(tuples_list):\n",
        "new_solution": "    max_value = float('-inf')\n    for tup in tuples_list:\n        max_value = maximum(max_value, maximum(tup[0], tup[1]))\n    return max_value\n",
        "test_code": "assert find_max_in_tuples([(1, 2), (3, 4), (5, 6)]) == 6\nassert find_max_in_tuples([(-1, -2), (-3, -4), (-5, -6)]) == -1\nassert find_max_in_tuples([(0, 0), (0, 0), (0, 0)]) == 0\nassert find_max_in_tuples([(10, 20), (30, 40), (50, 60)]) == 60\nassert find_max_in_tuples([(1, 1), (2, 2), (3, 3)]) == 3"
    },
    {
        "id": 162,
        "raw_problem": "# Write a function to convert a given string to a tuple of characters.\ndef string_to_tuple(str1):\n",
        "raw_solution": "    result = tuple(x for x in str1 if not x.isspace()) \n    return result\n",
        "new_problem": "# Given a list of strings, write a function to convert each string to a tuple of characters, then concatenate all tuples into a single tuple and return it.\ndef convert_and_concatenate(string_list):\n",
        "new_solution": "    result = tuple()\n    for string in string_list:\n        result += string_to_tuple(string)\n    return result\n",
        "test_code": "assert convert_and_concatenate(['hello', 'world']) == ('h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd')\nassert convert_and_concatenate(['python', 'programming']) == ('p', 'y', 't', 'h', 'o', 'n', 'p', 'r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g')\nassert convert_and_concatenate(['', 'test']) == ('t', 'e', 's', 't')\nassert convert_and_concatenate(['spaces', '  ', 'removed']) == ('s', 'p', 'a', 'c', 'e', 's', 'r', 'e', 'm', 'o', 'v', 'e', 'd')"
    },
    {
        "id": 163,
        "raw_problem": "# Write a python function to set the left most unset bit.\ndef set_left_most_unset_bit(n):\n",
        "raw_solution": "    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1\n        temp >>= 1\n    return (n | (1 << (pos))) \n",
        "new_problem": "# Given a list of integers, write a Python function to set the leftmost unset bit for each integer in the list and return the sum of all the modified integers.\ndef sum_of_set_left_most_unset_bits(lst):\n",
        "new_solution": "    return sum(set_left_most_unset_bit(num) for num in lst)\n",
        "test_code": "assert sum_of_set_left_most_unset_bits([10, 12, 15]) == 43\nassert sum_of_set_left_most_unset_bits([0, 1, 3]) == 4\nassert sum_of_set_left_most_unset_bits([7, 8, 9]) == 32\nassert sum_of_set_left_most_unset_bits([1, 2, 4]) == 10\nassert sum_of_set_left_most_unset_bits([5, 6, 11]) == 29"
    },
    {
        "id": 164,
        "raw_problem": "# Write a function to find the volume of a cone.\nimport math\ndef volume_cone(r,h):\n",
        "raw_solution": "  return (1.0 / 3) * math.pi * r * r * h\n",
        "new_problem": "# Given a list of cones with their respective radii and heights, write a function to calculate the total volume of all cones and the average volume per cone.\nimport math\n\ndef volume_cone(r, h):\n",
        "new_solution": "  return (1.0 / 3) * math.pi * r * r * h\n\ndef total_and_average_volume(cones):\n  total_volume = 0\n  for cone in cones:\n    total_volume += volume_cone(cone['radius'], cone['height'])\n  average_volume = total_volume / len(cones)\n  return total_volume, average_volume\n",
        "test_code": "assert total_and_average_volume([{'radius': 3, 'height': 5}, {'radius': 4, 'height': 6}]) == (147.6548547187203, 73.82742735936014)\nassert total_and_average_volume([{'radius': 1, 'height': 2}]) == (2.0943951023931953, 2.0943951023931953)"
    },
    {
        "id": 165,
        "raw_problem": "# Write a python function to find the highest power of 2 that is less than or equal to n.\ndef highest_Power_of_2(n):\n",
        "raw_solution": "    i = 0\n    while ((1 << i) <= n): \n        i += 1\n    return (1 << (i - 1))\n",
        "new_problem": "# Given a list of integers, write a Python function to find the highest power of 2 that is less than or equal to the sum of any two distinct elements in the list.\n\ndef highest_power_of_2_for_sums(lst):\n",
        "new_solution": "    max_power = 0\n    n = len(lst)\n    for i in range(n):\n        for j in range(i + 1, n):\n            sum_of_two = lst[i] + lst[j]\n            power = highest_Power_of_2(sum_of_two)\n            if power > max_power:\n                max_power = power\n    return max_power\n",
        "test_code": "assert highest_power_of_2_for_sums([1, 2, 3, 4]) == 4\nassert highest_power_of_2_for_sums([5, 8, 10, 12]) == 16\nassert highest_power_of_2_for_sums([1, 1, 1, 1]) == 2\nassert highest_power_of_2_for_sums([1024, 2048, 4096]) == 4096"
    },
    {
        "id": 166,
        "raw_problem": "# Write a function to find the n'th lucas number.\ndef find_lucas(n):\n",
        "raw_solution": "    if (n == 0): \n        return 2\n    if (n == 1): \n        return 1\n    return find_lucas(n - 1) + find_lucas(n - 2) \n",
        "new_problem": "# Write a function to find the sum of the first 'k' Lucas numbers starting from the 'start' position. For example, if start is 3 and k is 2, you should sum the 3rd and 4th Lucas numbers.\ndef sum_lucas_numbers(start, k):\n",
        "new_solution": "    total_sum = 0\n    for i in range(start, start + k):\n        total_sum += find_lucas(i)\n    return total_sum\n",
        "test_code": "assert sum_lucas_numbers(3, 2) == 11"
    },
    {
        "id": 167,
        "raw_problem": "# Write a function to apply a given format string to all of the elements in a list.\ndef add_string(list_, string):\n",
        "raw_solution": "    return [string.format(i) for i in  list_]\n",
        "new_problem": "# Given a list of lists, where each sublist contains elements that need to be formatted with a corresponding format string from another list, write a function to apply the format strings to the elements in the sublists and return a new list of lists with the formatted elements.\ndef format_sublists(list_of_lists, format_strings):\n",
        "new_solution": "    return [add_string(sublist, format_strings[i]) for i, sublist in enumerate(list_of_lists)]\n",
        "test_code": "assert format_sublists([[1, 2], [3, 4]], ['Item {}', 'Value {}']) == [['Item 1', 'Item 2'], ['Value 3', 'Value 4']]\nassert format_sublists([[5], [6, 7]], ['Number {}', 'Digit {}']) == [['Number 5'], ['Digit 6', 'Digit 7']]\nassert format_sublists([[], [8, 9]], ['Empty', 'Full {}']) == [[], ['Full 8', 'Full 9']]"
    },
    {
        "id": 168,
        "raw_problem": "# Write a function to convert more than one list to nested dictionary.\ndef convert_list_dictionary(l1, l2, l3):\n",
        "raw_solution": "     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
        "new_problem": "# Given multiple sets of three lists, each representing a nested dictionary structure, write a function to combine all these sets into a single nested dictionary where each key from the first list in a set maps to a dictionary where each key from the second list maps to the corresponding value from the third list. If there are conflicting keys, the latest occurrence should overwrite the previous one.\ndef combine_nested_dictionaries(list_of_lists):\n",
        "new_solution": "    combined_dict = {}\n    \n    for lists in list_of_lists:\n        l1, l2, l3 = lists\n        small_dicts = convert_list_dictionary(l1, l2, l3)\n        \n        for small_dict in small_dicts:\n            for outer_key, inner_dict in small_dict.items():\n                if outer_key not in combined_dict:\n                    combined_dict[outer_key] = {}\n                # Update or add inner dictionary elements, overwriting conflicts\n                combined_dict[outer_key].update(inner_dict)\n    \n    return combined_dict\n",
        "test_code": "assert combine_nested_dictionaries([[['a', 'b'], ['x', 'y'], [1, 2]], [['a', 'c'], ['x', 'z'], [3, 4]]]) == {'a': {'x': 3}, 'b': {'y': 2}, 'c': {'z': 4}}\nassert combine_nested_dictionaries([[['a'], ['x'], [1]], [['b'], ['y'], [2]]]) == {'a': {'x': 1}, 'b': {'y': 2}}\nassert combine_nested_dictionaries([[['a'], ['x'], [1]], [['a'], ['x'], [2]]]) == {'a': {'x': 2}}\nassert combine_nested_dictionaries([[['a', 'b'], ['x', 'y'], [1, 2]], [['b', 'c'], ['y', 'z'], [3, 4]]]) == {'a': {'x': 1}, 'b': {'y': 3}, 'c': {'z': 4}}"
    },
    {
        "id": 169,
        "raw_problem": "# Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ndef get_max_sum (n):\n",
        "raw_solution": "    # if n = 0, f(0) = max(5(f(0), 0)), so f(0) = 5f(0) or f(0) = 0, for both cases f(0) = 0\n    res = [0]\n    for i in range(1, n + 1):\n        res.append(max(res[i // 2] + res[i // 3] + res[i // 4] + res[i // 5], i))\n    return res[n]\n",
        "new_problem": "# Given a list of integers, find the maximum sum possible by applying the function f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n) to each element in the list. Return the sum of the maximum sums obtained for each element in the list.\ndef get_max_sum_list(lst):\n",
        "new_solution": "    def get_max_sum(n):\n        res = [0]\n        for i in range(1, n + 1):\n            res.append(max(res[i // 2] + res[i // 3] + res[i // 4] + res[i // 5], i))\n        return res[n]\n    total_sum = 0\n    for num in lst:\n        total_sum += get_max_sum(num)\n    return total_sum\n",
        "test_code": "assert get_max_sum_list([1, 2, 3]) == 6"
    },
    {
        "id": 170,
        "raw_problem": "# Write a function to check if given tuple contains no duplicates.\ndef check_distinct(test_tup):\n",
        "raw_solution": "  return len(test_tup) == len(set(test_tup))\n",
        "new_problem": "# Given a list of tuples, write a function to return a list of tuples that contain no duplicates. If a tuple contains duplicates, it should not be included in the returned list.\ndef filter_distinct_tuples(tup_list):\n",
        "new_solution": "    return [tup for tup in tup_list if check_distinct(tup)]\n",
        "test_code": "assert filter_distinct_tuples([(1, 2, 3), (1, 1, 2), (4, 5, 6)]) == [(1, 2, 3), (4, 5, 6)]\nassert filter_distinct_tuples([(1, 2), (2, 3), (3, 3)]) == [(1, 2), (2, 3)]\nassert filter_distinct_tuples([(1,), (2, 2), (3,)]) == [(1,), (3,)]"
    },
    {
        "id": 171,
        "raw_problem": "# Write a python function to find the first non-repeated character in a given string.\ndef first_non_repeating_character(str1):\n",
        "raw_solution": "  for ch in str1:\n    if str1.count(ch) == 1:\n      return ch\n  return None\n",
        "new_problem": "# Write a Python function to find the first non-repeated character in each of the given strings in a list. Return a list of these characters, in the order of the input strings. If a string does not have a non-repeated character, append None to the result list.\ndef first_non_repeating_characters(strings):\n",
        "new_solution": "  result = []\n  for s in strings:\n    result.append(first_non_repeating_character(s))\n  return result\n",
        "test_code": "assert first_non_repeating_characters(['abacddbec', 'abc', 'aabbcc']) == ['e', 'a', None]"
    },
    {
        "id": 172,
        "raw_problem": "# Write a function to find the median of three numbers.\ndef median_numbers(a,b,c):\n",
        "raw_solution": "    return sorted([a,b,c])[1]\n",
        "new_problem": "# Given a list of integers, write a function to find the median of each triplet in the list and return a list of these medians. If the list length is not a multiple of three, ignore the remaining elements.\ndef medians_of_triplets(lst):\n",
        "new_solution": "    medians = []\n    for i in range(0, len(lst) - len(lst) % 3, 3):\n        medians.append(median_numbers(lst[i], lst[i+1], lst[i+2]))\n    return medians\n",
        "test_code": "assert medians_of_triplets([1, 2, 3, 4, 5, 6]) == [2, 5]\nassert medians_of_triplets([10, 20, 30, 40, 50, 60, 70]) == [20, 50]\nassert medians_of_triplets([1, 1, 1, 2, 2, 2, 3, 3, 3]) == [1, 2, 3]\nassert medians_of_triplets([5, 3, 8, 9, 1, 7, 4, 6, 2]) == [5, 7, 4]"
    },
    {
        "id": 173,
        "raw_problem": "# Write a function to compute the sum of digits of each number of a given list.\ndef sum_of_digits(nums):\n",
        "raw_solution": "    return sum(int(el) for n in nums for el in str(n) if el.isdigit())\n",
        "new_problem": "# Given a list of lists of numbers, write a function to compute the sum of digits of each number in each sublist, and then return the total sum of all these sums.\ndef total_sum_of_digits(lists_of_nums):\n",
        "new_solution": "    return sum(sum_of_digits(sublist) for sublist in lists_of_nums)\n",
        "test_code": "assert total_sum_of_digits([[123, 456], [789, 12]]) == 48\nassert total_sum_of_digits([[0, 1], [2, 3]]) == 6\nassert total_sum_of_digits([[10, 20], [30, 40]]) == 10\nassert total_sum_of_digits([[111, 222], [333, 444]]) == 30\nassert total_sum_of_digits([[555, 666], [777, 888]]) == 78"
    },
    {
        "id": 174,
        "raw_problem": "# Write a python function to find the minimum of two numbers.\ndef minimum(a,b):\n",
        "raw_solution": "    return min(a,b)\n",
        "new_problem": "# Write a Python function to find the minimum value in a list of tuples where each tuple contains two numbers. The function should return the minimum value found across all tuples.\ndef find_minimum_in_tuples(tuples_list):\n",
        "new_solution": "    min_value = float('inf')\n    for tup in tuples_list:\n        min_value = min(min_value, minimum(tup[0], tup[1]))\n    return min_value\n",
        "test_code": "assert find_minimum_in_tuples([(1, 2), (3, 4), (0, -1)]) == -1\nassert find_minimum_in_tuples([(5, 5), (6, 6), (7, 7)]) == 5\nassert find_minimum_in_tuples([(-2, -3), (-4, -5), (-1, -1)]) == -5"
    },
    {
        "id": 175,
        "raw_problem": "# Write a function to check whether an element exists within a tuple.\ndef check_tuplex(tuplex, element):\n",
        "raw_solution": "  return element in tuplex\n",
        "new_problem": "# Given a list of tuples, write a function to return a set of all elements that exist in at least one of the tuples.\ndef find_all_elements(list_of_tuples):\n",
        "new_solution": "    all_elements = set()\n    for tuplex in list_of_tuples:\n        for element in tuplex:\n            if check_tuplex(tuplex, element):\n                all_elements.add(element)\n    return all_elements\n",
        "test_code": "assert find_all_elements([(1, 2, 3), (2, 3, 4), (3, 4, 5)]) == set([1, 2, 3, 4, 5])\nassert find_all_elements([('a', 'b'), ('b', 'c'), ('c', 'd')]) == set(['a', 'd', 'b', 'c'])\nassert find_all_elements([(1, 'a'), (2, 'b'), (3, 'c')]) == set([1, 2, 3, 'a', 'b', 'c'])"
    },
    {
        "id": 176,
        "raw_problem": "# Write a python function to find whether the parity of a given number is odd.\ndef find_Parity(x):\n",
        "raw_solution": "    return x % 2 != 0\n",
        "new_problem": "# Write a Python function to determine if the sum of the parities of a list of numbers is odd. The parity of a number is considered odd if the number is odd, and even if the number is even.\ndef sum_of_parities_is_odd(numbers):\n",
        "new_solution": "    return sum(find_Parity(number) for number in numbers) % 2 != 0\n",
        "test_code": "assert sum_of_parities_is_odd([1, 2, 3, 4]) == False\nassert sum_of_parities_is_odd([2, 4, 6, 8]) == False\nassert sum_of_parities_is_odd([1, 3, 5, 7]) == False\nassert sum_of_parities_is_odd([1, 2, 3, 4, 5]) == True"
    },
    {
        "id": 177,
        "raw_problem": "# Write a function to find the minimum product from the pairs of tuples within a given list.\ndef min_product_tuple(list1):\n",
        "raw_solution": "    return min(x * y for x, y in list1)\n",
        "new_problem": "# Given a list of lists of tuples, where each tuple contains two integers, write a function to find the minimum product from the pairs of tuples within each sublist, and then return the maximum of these minimum products.\ndef max_of_min_products(list_of_lists):\n",
        "new_solution": "    return max(min_product_tuple(sublist) for sublist in list_of_lists)\n",
        "test_code": "assert max_of_min_products([[(1, 2), (3, 4)], [(5, 6), (7, 8)]]) == 30\nassert max_of_min_products([[(10, 20), (30, 40)], [(50, 60), (70, 80)]]) == 3000\nassert max_of_min_products([[(1, 1), (2, 2)], [(3, 3), (4, 4)]]) == 9\nassert max_of_min_products([[(1, 2), (3, 4)], [(5, 6), (7, 8)], [(9, 10), (11, 12)]]) == 90\nassert max_of_min_products([[(1, 1), (1, 1)], [(1, 1), (1, 1)]]) == 1"
    },
    {
        "id": 178,
        "raw_problem": "# Write a function to find the minimum value in a given heterogeneous list.\ndef min_val(listval):\n",
        "raw_solution": "     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\n",
        "new_problem": "# Given a list of heterogeneous lists, write a function to find the minimum value across all the lists. If a list contains no integers, it should be ignored in the search for the minimum value.\ndef min_val_across_lists(list_of_lists):\n",
        "new_solution": "    min_values = []\n    for sublist in list_of_lists:\n        if any(isinstance(i, int) for i in sublist):\n            min_values.append(min_val(sublist))\n    return min(min_values) if min_values else None\n",
        "test_code": "assert min_val_across_lists([[1, 'a', 3], [4, 'b', 6], [7, 'c', 9]]) == 1\nassert min_val_across_lists([[1, 'a', 3], [], [4, 'b', 6], [7, 'c', 9]]) == 1\nassert min_val_across_lists([[1, 'a', 3], [4, 'b', 6], [7, 'c', 9], [10, 'd', 12]]) == 1\nassert min_val_across_lists([[], ['a', 'b'], ['c', 'd']]) == None\nassert min_val_across_lists([[1, 'a', 3], [4, 'b', 6], [7, 'c', 9], [10, 'd', 12], [2, 'e', 5]]) == 1"
    },
    {
        "id": 179,
        "raw_problem": "# Write a python function to remove odd numbers from a given list.\ndef remove_odd(l):\n",
        "raw_solution": "    return [i for i in l if i % 2 == 0]\n",
        "new_problem": "# Write a python function to process a list of lists, where each sublist contains numbers. The function should return a new list of lists where all odd numbers in each sublist are removed.\ndef process_lists(list_of_lists):\n",
        "new_solution": "    return [remove_odd(sublist) for sublist in list_of_lists]\n",
        "test_code": "assert process_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[2], [4, 6], [8]]\nassert process_lists([[10, 11, 12], [13, 14, 15]]) == [[10, 12], [14]]\nassert process_lists([[20, 21, 22, 23, 24]]) == [[20, 22, 24]]"
    },
    {
        "id": 180,
        "raw_problem": "# Write a function to extract the nth element from a given list of tuples.\ndef extract_nth_element(list1, n):\n",
        "raw_solution": "    return [x[n] for x in list1]\n",
        "new_problem": "# Given a list of lists of tuples, write a function to extract the nth element from each tuple in each sublist and return a list of lists where each sublist contains the extracted elements.\ndef extract_nth_elements_from_lists(list_of_lists, n):\n",
        "new_solution": "    return [extract_nth_element(sublist, n) for sublist in list_of_lists]\n",
        "test_code": "assert extract_nth_elements_from_lists([[(1, 2), (3, 4)], [(5, 6), (7, 8)]], 0) == [[1, 3], [5, 7]]\nassert extract_nth_elements_from_lists([[(1, 2), (3, 4)], [(5, 6), (7, 8)]], 1) == [[2, 4], [6, 8]]\nassert extract_nth_elements_from_lists([[('a', 'b'), ('c', 'd')], [('e', 'f'), ('g', 'h')]], 0) == [['a', 'c'], ['e', 'g']]\nassert extract_nth_elements_from_lists([[('a', 'b'), ('c', 'd')], [('e', 'f'), ('g', 'h')]], 1) == [['b', 'd'], ['f', 'h']]\nassert extract_nth_elements_from_lists([[(1, 'a'), (2, 'b')], [(3, 'c'), (4, 'd')]], 0) == [[1, 2], [3, 4]]\nassert extract_nth_elements_from_lists([[(1, 'a'), (2, 'b')], [(3, 'c'), (4, 'd')]], 1) == [['a', 'b'], ['c', 'd']]"
    },
    {
        "id": 181,
        "raw_problem": "# Write a python function to check whether any value in a sequence exists in a sequence or not.\ndef overlapping(list1,list2):\n",
        "raw_solution": "    return any(v in list2 for v in list1)\n",
        "new_problem": "# Given a list of sequences, write a Python function to determine if there are any overlapping values between any of the sequences. Return a list of tuples where each tuple contains the indices of the sequences that have overlapping values.\ndef find_overlapping_sequences(sequences):\n",
        "new_solution": "    overlapping_pairs = []\n    for i in range(len(sequences)):\n        for j in range(i + 1, len(sequences)):\n            if overlapping(sequences[i], sequences[j]):\n                overlapping_pairs.append((i, j))\n    return overlapping_pairs\n",
        "test_code": "assert find_overlapping_sequences([[1, 2, 3], [3, 4, 5], [5, 6, 7]]) == [(0, 1), (1, 2)]\nassert find_overlapping_sequences([[1, 2], [3, 4], [5, 6]]) == []\nassert find_overlapping_sequences([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == [(0, 1), (0, 2), (1, 2)]\nassert find_overlapping_sequences([[1], [1], [1]]) == [(0, 1), (0, 2), (1, 2)]"
    },
    {
        "id": 182,
        "raw_problem": "# Write a python function to find a pair with highest product from a given array of integers.\ndef max_Product(arr):\n",
        "raw_solution": "    pairs = [(a, b) for a in arr for b in arr if a != b]\n    return max(pairs, key=lambda x: x[0] * x[1])\n",
        "new_problem": "# Given a list of lists of integers, write a Python function to find the pair with the highest product across all sublists. If there are multiple pairs with the same highest product, return the pair from the first sublist that contains such a pair.\ndef max_Product_Across_Lists(list_of_lists):\n",
        "new_solution": "    max_product = float('-inf')\n    result_pair = None\n    for sublist in list_of_lists:\n        # Check if all elements in the sublist are identical\n        if len(set(sublist)) == 1:\n            # If all elements are identical, set current_pair to (element, element)\n            current_pair = (sublist[0], sublist[0])\n        else:\n            # Otherwise, use max_Product to find the max product pair\n            current_pair = max_Product(sublist)\n        \n        # Calculate the product of the current pair\n        current_product = current_pair[0] * current_pair[1]\n        if current_product > max_product:\n            max_product = current_product\n            result_pair = current_pair\n    return result_pair\n",
        "test_code": "assert max_Product_Across_Lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == (8, 9)\nassert max_Product_Across_Lists([[10, 20], [30, 40], [50, 60]]) == (50, 60)\nassert max_Product_Across_Lists([[1, 1], [2, 2], [3, 3]]) == (3, 3)\nassert max_Product_Across_Lists([[1, 2], [3, 4], [5, 6]]) == (5, 6)"
    },
    {
        "id": 183,
        "raw_problem": "# Write a python function to find the element of a list having maximum length.\ndef Find_Max(lst):\n",
        "raw_solution": "    return max(lst, key = len)\n",
        "new_problem": "# Given a list of lists, write a Python function to find the list with the maximum total length of its elements. If there are multiple lists with the same total length, return the first one encountered.\ndef Find_Max_List(lst_of_lsts):\n",
        "new_solution": "    return max(lst_of_lsts, key=lambda lst: sum(len(element) for element in lst))\n",
        "test_code": "assert Find_Max_List([['a', 'bb', 'ccc'], ['d', 'ee'], ['f', 'gg', 'hhh', 'iiii']]) == ['f', 'gg', 'hhh', 'iiii']\nassert Find_Max_List([['a'], ['b', 'c'], ['d', 'e', 'f']]) == ['d', 'e', 'f']\nassert Find_Max_List([['a', 'b'], ['c', 'd'], ['e', 'f']]) == ['a', 'b']\nassert Find_Max_List([['a', 'b'], ['c', 'd', 'e'], ['f']]) == ['c', 'd', 'e']\nassert Find_Max_List([['a'], ['b'], ['c']]) == ['a']"
    },
    {
        "id": 184,
        "raw_problem": "# Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\ndef round_and_sum(list1):\n",
        "raw_solution": "  l = len(list1)\n  return sum([round(i) for i in list1]) * l\n",
        "new_problem": "# Given a list of lists of numbers, write a function to round every number in each sublist, calculate the total sum of each sublist, and then return the sum of these total sums multiplied by the total number of sublists.\ndef round_and_sum_nested(list_of_lists):\n",
        "new_solution": "  total_sum = 0\n  for sublist in list_of_lists:\n    total_sum += round_and_sum(sublist)\n  return total_sum * len(list_of_lists)\n\n# Helper function from raw solution\ndef round_and_sum(list1):\n  l = len(list1)\n  return sum([round(i) for i in list1]) * l\n",
        "test_code": "assert round_and_sum_nested([[1.1, 2.2], [3.3, 4.4], [5.5, 6.6]]) == 138\nassert round_and_sum_nested([[0.5, 1.5], [2.5, 3.5]]) == 32\nassert round_and_sum_nested([[10.1, 10.9], [11.2, 11.8]]) == 176"
    },
    {
        "id": 185,
        "raw_problem": "# Write a python function to find the cube sum of first n even natural numbers.\ndef cube_Sum(n):\n",
        "raw_solution": "    return 2 * (n ** 2) * ((n + 1) ** 2)\n",
        "new_problem": "# Write a python function to find the sum of the cube sums of the first n even natural numbers for each even number up to m.\ndef sum_of_cube_sums(m):\n",
        "new_solution": "    total_sum = 0\n    for n in range(1, m // 2 + 1):\n        total_sum += cube_Sum(n)\n    return total_sum\n",
        "test_code": "assert sum_of_cube_sums(2) == 8\nassert sum_of_cube_sums(4) == 80\nassert sum_of_cube_sums(6) == 368\nassert sum_of_cube_sums(8) == 1168"
    },
    {
        "id": 186,
        "raw_problem": "# Write a function to concatenate each element of tuple by the delimiter.\ndef concatenate_tuple(test_tup):\n",
        "raw_solution": "    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \n",
        "new_problem": "# Given a list of tuples, concatenate each element of each tuple by a delimiter and then concatenate all the results into a single string with a new delimiter separating each concatenated tuple result.\ndef concatenate_tuples(list_of_tuples):\n",
        "new_solution": "    delim = \"-\"\n    new_delim = \" | \"\n    res = new_delim.join([concatenate_tuple(tup) for tup in list_of_tuples])\n    return res\n",
        "test_code": "assert concatenate_tuples([(1, 2, 3), ('a', 'b', 'c'), (4, 5, 6)]) == '1-2-3 | a-b-c | 4-5-6'\nassert concatenate_tuples([(10, 20), (30, 40), (50, 60)]) == '10-20 | 30-40 | 50-60'\nassert concatenate_tuples([('x', 'y'), ('z', 'w')]) == 'x-y | z-w'"
    },
    {
        "id": 187,
        "raw_problem": "# Write a python function to find the average of cubes of first n natural numbers.\ndef find_Average_Of_Cube(n):\n",
        "raw_solution": "    return sum([(i ** 3) for i in range(1, n + 1)]) / n\n",
        "new_problem": "# Write a Python function to find the average of the sums of cubes of the first n natural numbers for multiple ranges of n provided as a list of tuples. Each tuple contains a start and end value for n, and the function should return a list of averages corresponding to each tuple.\ndef find_Average_Of_Cubes_For_Ranges(ranges):\n",
        "new_solution": "    averages = []\n    for start, end in ranges:\n        total_sum = sum([find_Average_Of_Cube(i) for i in range(start, end + 1)])\n        averages.append(total_sum / (end - start + 1))\n    return averages\n",
        "test_code": "assert find_Average_Of_Cubes_For_Ranges([(1, 3), (2, 4)]) == [5.833333333333333, 13.833333333333334]\nassert find_Average_Of_Cubes_For_Ranges([(1, 1), (2, 2), (3, 3)]) == [1.0, 4.5, 12.0]\nassert find_Average_Of_Cubes_For_Ranges([(1, 5), (6, 10)]) == [17.5, 175.0]"
    },
    {
        "id": 188,
        "raw_problem": "# Write a function to extract only the rear index element of each string in the given tuple.\ndef extract_rear(test_tuple):\n",
        "raw_solution": "  return [ele[-1] for ele in test_tuple]\n",
        "new_problem": "# Given a list of tuples, each containing strings, write a function to extract the rear index element of each string in each tuple and then concatenate these elements to form a single string. If a tuple is empty, it should be ignored in the concatenation.\ndef concatenate_rear_elements(tuple_list):\n",
        "new_solution": "    result = \"\" \n    tuple_list = [tup if tup[-1] else '' for tup in tuple_list]\n    for t in tuple_list:\n        if len(t) > 0:  # Explicitly check if the tuple is non-empty\n            rear_elements = extract_rear(t)\n            result += ''.join(rear_elements)\n    return result\n",
        "test_code": "assert concatenate_rear_elements([('hello', 'world'), ('python', 'programming'), ('',)]) == 'odng'\nassert concatenate_rear_elements([('a', 'b', 'c'), ('d', 'e', 'f'), ('g', 'h', 'i')]) == 'abcdefghi'\nassert concatenate_rear_elements([('single',), ('element',), ('tuple',)]) == 'ete'\nassert concatenate_rear_elements([('empty', 'tuple', ''), ('ignore', 'this', 'tuple')]) == 'ese'\nassert concatenate_rear_elements([('only', 'one', 'element'), ('',), ('',)]) == 'yet'"
    },
    {
        "id": 189,
        "raw_problem": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x):\n",
        "raw_solution": "    return sum(x in sublist for sublist in list1)\n",
        "new_problem": "# Given a list of lists, where each sublist contains integers, and a list of target elements, write a function to count the number of sublists containing at least one of the target elements.\ndef count_sublists_with_targets(list1, targets):\n",
        "new_solution": "    return sum(any(target in sublist for target in targets) for sublist in list1)\n",
        "test_code": "assert count_sublists_with_targets([[1, 2, 3], [4, 5], [6, 7, 8]], [2, 5]) == 2\nassert count_sublists_with_targets([[1, 2, 3], [4, 5], [6, 7, 8]], [9, 10]) == 0\nassert count_sublists_with_targets([[1, 2, 3], [4, 5], [6, 7, 8]], [1, 4, 6]) == 3\nassert count_sublists_with_targets([[1, 2, 3], [4, 5], [6, 7, 8]], [3, 5, 7]) == 3\nassert count_sublists_with_targets([[1, 2, 3], [4, 5], [6, 7, 8]], [2, 4, 6, 8]) == 3"
    },
    {
        "id": 190,
        "raw_problem": "# Write a function to filter odd numbers.\ndef filter_oddnumbers(nums):\n",
        "raw_solution": "    return [n for n in nums if n % 2 == 1]\n",
        "new_problem": "# Write a function to find the sum of all odd numbers in a list of lists of integers.\ndef sum_oddnumbers_in_lists(lists):\n",
        "new_solution": "    total_sum = 0\n    for lst in lists:\n        total_sum += sum(filter_oddnumbers(lst))\n    return total_sum\n",
        "test_code": "assert sum_oddnumbers_in_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 25\nassert sum_oddnumbers_in_lists([[2, 4, 6], [8, 10, 12], [14, 16, 18]]) == 0\nassert sum_oddnumbers_in_lists([[1, 3, 5], [7, 9, 11], [13, 15, 17]]) == 81"
    },
    {
        "id": 191,
        "raw_problem": "# Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nimport re\ndef change_date_format(dt):\n",
        "raw_solution": "    return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\n",
        "new_problem": "# Given a list of dates in 'yyyy-mm-dd' format, write a function to convert them to a list of dates in 'dd-mm-yyyy' format and then filter out the dates that fall on weekends (Saturday or Sunday).\nimport re\nfrom datetime import datetime\n\ndef change_date_format(dt):\n",
        "new_solution": "    return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\n\ndef filter_weekend_dates(dates):\n    converted_dates = [change_date_format(date) for date in dates]\n    filtered_dates = []\n    for date in converted_dates:\n        day_of_week = datetime.strptime(date, '%d-%m-%Y').weekday()\n        if day_of_week < 5:\n            filtered_dates.append(date)\n    return filtered_dates\n",
        "test_code": "assert filter_weekend_dates(['2023-10-06', '2023-10-07', '2023-10-08', '2023-10-09']) == ['06-10-2023', '09-10-2023']\nassert filter_weekend_dates(['2023-01-01', '2023-01-02']) == ['02-01-2023']\nassert filter_weekend_dates([]) == []\nassert filter_weekend_dates(['2023-12-25']) == ['25-12-2023']"
    },
    {
        "id": 192,
        "raw_problem": "# Write a function to sort the given array by using shell sort.\ndef shell_sort(my_list):\n",
        "raw_solution": "    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n    return my_list\n",
        "new_problem": "# Given a list of lists, where each sublist contains integers, write a function to sort each sublist using shell sort and then return a new list that contains the sorted sublists. If a sublist is empty, it should be included in the result as is.\ndef sort_sublists(list_of_lists):\n",
        "new_solution": "    sorted_lists = []\n    for sublist in list_of_lists:\n        if sublist:\n            sorted_lists.append(shell_sort(sublist))\n        else:\n            sorted_lists.append(sublist)\n    return sorted_lists\n",
        "test_code": "assert sort_sublists([[3, 2, 1], [5, 4], [], [9, 7, 8, 6]]) == [[1, 2, 3], [4, 5], [], [6, 7, 8, 9]]\nassert sort_sublists([[1], [2], [3], [4]]) == [[1], [2], [3], [4]]\nassert sort_sublists([[], [1, 0], [3, 2, 1], []]) == [[], [0, 1], [1, 2, 3], []]\nassert sort_sublists([[5, 5, 5], [4, 4, 4], [3, 3, 3]]) == [[5, 5, 5], [4, 4, 4], [3, 3, 3]]"
    },
    {
        "id": 193,
        "raw_problem": "# Write a function to extract the elementwise and tuples from the given two tuples.\ndef and_tuples(test_tup1, test_tup2):\n",
        "raw_solution": "  return tuple(x & y for x, y in zip(test_tup1, test_tup2))\n",
        "new_problem": "# Given a list of tuples, extract the elementwise AND tuples for each pair of tuples in the list. Return a list of these AND tuples.\ndef and_tuples_list(tuples_list):\n",
        "new_solution": "  return [and_tuples(tup1, tup2) for tup1, tup2 in zip(tuples_list[::2], tuples_list[1::2])]\n",
        "test_code": "assert and_tuples_list([(1, 2, 3), (3, 2, 1), (4, 5, 6), (6, 5, 4)]) == [(1, 2, 1), (4, 5, 4)]\nassert and_tuples_list([(7, 8, 9), (9, 8, 7), (10, 11, 12), (12, 11, 10)]) == [(1, 8, 1), (8, 11, 8)]"
    },
    {
        "id": 194,
        "raw_problem": "# Write a function to find the directrix of a parabola.\ndef parabola_directrix(a, b, c):\n",
        "raw_solution": "  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
        "new_problem": "# Given a list of parabolas represented by their coefficients (a, b, c), find the sum of the directrices of all the parabolas. If the list is empty, return 0.\ndef sum_of_directrices(parabolas):\n",
        "new_solution": "    total_directrix = 0\n    for parabola in parabolas:\n        a, b, c = parabola\n        total_directrix += parabola_directrix(a, b, c)\n    return total_directrix\n",
        "test_code": "assert sum_of_directrices([(1, 2, 3), (2, 3, 4)]) == -93\nassert sum_of_directrices([]) == 0\nassert sum_of_directrices([(1, 0, 0)]) == -4\nassert sum_of_directrices([(1, 1, 1), (1, -1, 1)]) == -14"
    },
    {
        "id": 195,
        "raw_problem": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1,base2,height):\n",
        "raw_solution": "    return (base1 + base2) / 2\n",
        "new_problem": "# Given a list of trapeziums, each defined by their two bases and height, write a function to find the average median length of all the trapeziums.\ndef average_median_trapeziums(trapeziums):\n",
        "new_solution": "    total_median = 0\n    for trapezium in trapeziums:\n        base1, base2, height = trapezium\n        total_median += median_trapezium(base1, base2, height)\n    return total_median / len(trapeziums)\n",
        "test_code": "assert average_median_trapeziums([(1, 3, 2), (2, 4, 3), (3, 5, 4)]) == 3.0\nassert average_median_trapeziums([(1, 2, 1), (2, 3, 2), (3, 4, 3)]) == 2.5"
    },
    {
        "id": 196,
        "raw_problem": "# Write a function to check whether the entered number is greater than the elements of the given array.\ndef check_greater(arr, number):\n",
        "raw_solution": "  return all(number > el for el in arr)\n",
        "new_problem": "# Given a list of arrays and a target number, determine how many arrays in the list have all their elements less than the target number. Additionally, for each array that meets this condition, find the sum of its elements.\ndef count_and_sum_arrays(arrays, target_number):\n",
        "new_solution": "    count = 0\n    sums = []\n    for arr in arrays:\n        if check_greater(arr, target_number):\n            count += 1\n            sums.append(sum(arr))\n    return count, sums\n",
        "test_code": "assert count_and_sum_arrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 10) == (3, [6, 15, 24])\nassert count_and_sum_arrays([[10, 20, 30], [5, 15, 25], [35, 45, 55]], 25) == (0, [])\nassert count_and_sum_arrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5) == (1, [6])\nassert count_and_sum_arrays([], 10) == (0, [])\nassert count_and_sum_arrays([[1, 2, 3]], 4) == (1, [6])"
    },
    {
        "id": 197,
        "raw_problem": "# Write a python function to find the last digit of a given number.\ndef last_Digit(n) :\n",
        "raw_solution": "    if n < 0: \n        n = -n\n    return n % 10\n",
        "new_problem": "# Write a Python function to find the last digit of the sum of the last digits of a list of numbers.\ndef last_digit_of_sum(numbers):\n",
        "new_solution": "    return sum(last_Digit(number) for number in numbers) % 10\n",
        "test_code": "assert last_digit_of_sum([123, 456, 789]) == 8\nassert last_digit_of_sum([-123, -456, -789]) == 8\nassert last_digit_of_sum([10, 20, 30]) == 0\nassert last_digit_of_sum([1, 2, 3, 4, 5]) == 5"
    },
    {
        "id": 198,
        "raw_problem": "# Write a python function to return the negative numbers in a list.\ndef neg_nos(list1):\n",
        "raw_solution": "  return [i for i in list1 if i < 0]\n",
        "new_problem": "# Given a list of lists, write a Python function to return a list containing all the negative numbers from all the sublists. Each sublist can contain both positive and negative numbers.\ndef all_neg_nos(list_of_lists):\n",
        "new_solution": "    return [num for sublist in list_of_lists for num in neg_nos(sublist)]\n",
        "test_code": "assert all_neg_nos([[1, -2, 3], [-4, 5, -6], [7, -8, 9]]) == [-2, -4, -6, -8]"
    },
    {
        "id": 199,
        "raw_problem": "# Write a function to remove odd characters in a string.\ndef remove_odd(str1):\n",
        "raw_solution": "    return str1[1::2]\n",
        "new_problem": "# Given a list of strings, write a function to remove the odd characters from each string and then concatenate the results into a single string.\ndef process_strings(str_list):\n",
        "new_solution": "    result = ''\n    for s in str_list:\n        result += remove_odd(s)\n    return result\n",
        "test_code": "assert process_strings(['abc', 'def']) == 'be'\nassert process_strings(['hello', 'world']) == 'elol'\nassert process_strings(['12345', '67890']) == '2479'\nassert process_strings(['']) == ''\nassert process_strings(['a']) == ''"
    },
    {
        "id": 200,
        "raw_problem": "# Write a function to join a list of multiple integers into a single integer.\ndef multiple_to_single(L):\n",
        "raw_solution": "  return int(''.join(map(str,L)))\n",
        "new_problem": "# Given a list of lists of integers, write a function to join each sublist into a single integer and then sum all these integers together.\ndef sum_of_joined_integers(LL):\n",
        "new_solution": "    return sum(multiple_to_single(L) for L in LL)\n",
        "test_code": "assert sum_of_joined_integers([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 123 + 45 + 6789\nassert sum_of_joined_integers([[0], [0, 0, 0], [1]]) == 0 + 0 + 1\nassert sum_of_joined_integers([[1, 2], [3, 4], [5, 6]]) == 12 + 34 + 56\nassert sum_of_joined_integers([[10, 20], [30, 40], [50, 60]]) == 1020 + 3040 + 5060\nassert sum_of_joined_integers([[1], [2], [3]]) == 1 + 2 + 3"
    },
    {
        "id": 201,
        "raw_problem": "# Write a function to find the first adverb and their positions in a given sentence.\nimport re\ndef find_adverb_position(text):\n",
        "raw_solution": "    for m in re.finditer(r\"\\w+ly\", text):\n        return (m.start(), m.end(), m.group(0))\n",
        "new_problem": "# Write a function to find all adverbs and their positions in multiple sentences. The function should return a list of tuples where each tuple contains the start position, end position, and the adverb for each sentence.\nimport re\n\ndef find_all_adverbs_positions(sentences):\n",
        "new_solution": "    results = []\n    for sentence in sentences:\n        adverb_info = find_adverb_position(sentence)\n        if adverb_info:\n            results.append(adverb_info)\n    return results\n\ndef find_adverb_position(text):\n    for m in re.finditer(r\"\\w+ly\", text):\n        return (m.start(), m.end(), m.group(0))\n",
        "test_code": "assert find_all_adverbs_positions(['She quickly ran to the store.', 'He slowly walked home.']) == [(4, 11, 'quickly'), (3, 9, 'slowly')]\nassert find_all_adverbs_positions(['The dog barked loudly.', 'The cat meowed softly.']) == [(15, 21, 'loudly'), (15, 21, 'softly')]\nassert find_all_adverbs_positions(['There was no adverb in this sentence.']) == []"
    },
    {
        "id": 202,
        "raw_problem": "# Write a function to find the surface area of a cube of a given size.\ndef surfacearea_cube(l):\n",
        "raw_solution": "  return 6 * l * l\n",
        "new_problem": "# Given a list of sizes representing different cubes, write a function to calculate the total surface area of all the cubes.\ndef total_surface_area(sizes):\n",
        "new_solution": "  return sum(surfacearea_cube(l) for l in sizes)",
        "test_code": "assert total_surface_area([1, 2, 3]) == 84\nassert total_surface_area([0, 1, 2]) == 30\nassert total_surface_area([5, 5, 5]) == 450"
    },
    {
        "id": 203,
        "raw_problem": "# Write a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef index_multiplication(test_tup1, test_tup2):\n",
        "raw_solution": "  return tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n",
        "new_problem": "# Given a list of tuples, where each tuple contains two tuples, write a function to perform index-wise multiplication of tuple elements in the given two tuples for each tuple in the list. Then, sum the results of these multiplications for each tuple in the list to get a final list of sums.\ndef complex_index_multiplication(tuple_list):\n",
        "new_solution": "    # Initialize an empty list to store the results\n    result = []\n    # Iterate over each pair of tuples in the list\n    for tup1, tup2 in tuple_list:\n        # Perform index-wise multiplication of the tuples\n        multiplied_tuples = tuple(a * b for a, b in zip(tup1, tup2))\n        # Sum the results of the multiplication\n        sum_of_multiplication = sum(multiplied_tuples)\n        # Append the sum to the result list\n        result.append(sum_of_multiplication)\n    return result\n",
        "test_code": "assert complex_index_multiplication([((1, 2), (3, 4)), ((5, 6), (7, 8))]) == [11, 83]\nassert complex_index_multiplication([((0, 2, 3), (4, 5, 6)), ((7, 0, 9), (10, 11, 12))]) == [28, 178]\nassert complex_index_multiplication([((-1, 2, -3), (4, -5, 6)), ((7, -8, 9), (-10, 11, -12))]) == [-32, -266]\nassert complex_index_multiplication([((1,), (4,)), ((7,), (10,))]) == [4, 70]\nassert complex_index_multiplication([((1, 2, 3), (0, 0, 0)), ((7, 8, 9), (0, 0, 0))]) == [0, 0]"
    },
    {
        "id": 204,
        "raw_problem": "# Write a python function to count the occurence of all elements of list in a tuple.\nfrom collections import Counter \ndef count_Occurrence(tup, lst):\n",
        "raw_solution": "    return sum(tup.count(ele) for ele in lst)\n",
        "new_problem": "# Given a list of tuples and a list of elements, write a function to count the occurrence of each element in the list of elements across all tuples in the list of tuples.\n\ndef count_Occurrences_Across_Tuples(list_of_tuples, elements_list):\n",
        "new_solution": "    total_count = Counter()\n    for tup in list_of_tuples:\n        total_count.update(Counter({ele: count_Occurrence(tup, [ele]) for ele in elements_list}))\n    return total_count\n",
        "test_code": "assert count_Occurrences_Across_Tuples([(1, 2, 3), (2, 3, 4), (3, 4, 5)], [2, 3]) == Counter({2: 2, 3: 3})\nassert count_Occurrences_Across_Tuples([('a', 'b', 'c'), ('b', 'c', 'd'), ('c', 'd', 'e')], ['b', 'c']) == Counter({'b': 2, 'c': 3})\nassert count_Occurrences_Across_Tuples([(10, 20), (20, 30), (30, 40)], [10, 20, 30, 40]) == Counter({10: 1, 20: 2, 30: 2, 40: 1})"
    },
    {
        "id": 205,
        "raw_problem": "# Write a function to find cubes of individual elements in a list.\ndef cube_nums(nums):\n",
        "raw_solution": "    return [n**3 for n in nums]\n",
        "new_problem": "# Given a list of lists, where each sublist contains integers, write a function to find the sum of cubes of all elements in each sublist and return a list of these sums.\ndef sum_of_cubes(lists):\n",
        "new_solution": "    return [sum(cube_nums(sublist)) for sublist in lists]\n",
        "test_code": "assert sum_of_cubes([[1, 2], [3, 4]]) == [9, 91]\nassert sum_of_cubes([[0], [1, 1, 1]]) == [0, 3]\nassert sum_of_cubes([[2, 2, 2], [3, 3]]) == [24, 54]"
    },
    {
        "id": 206,
        "raw_problem": "# Write a function to calculate the sum of perrin numbers.\ndef cal_sum(n):\n",
        "raw_solution": "    a = 3\n    b = 0\n    c = 2\n    if (n == 0): \n        return 3\n    if (n == 1): \n        return 3\n    if (n == 2): \n        return 5\n    sum = 5\n    while (n > 2): \n        d = a + b \n        sum = sum + d \n        a = b \n        b = c \n        c = d \n        n = n - 1\n    return sum\n",
        "new_problem": "# Write a function to calculate the sum of perrin numbers for multiple ranges. Given a list of tuples where each tuple contains two integers representing the start and end of a range (inclusive), calculate the sum of perrin numbers for each range and return the total sum of these sums.\ndef cal_sum_of_ranges(ranges):\n",
        "new_solution": "    total_sum = 0\n    for start, end in ranges:\n        total_sum += cal_sum(end) - cal_sum(start - 1) if start > 0 else cal_sum(end)\n    return total_sum\n",
        "test_code": "assert cal_sum_of_ranges([(0, 2), (3, 5)]) == 15\nassert cal_sum_of_ranges([(1, 1), (2, 2)]) == 2\nassert cal_sum_of_ranges([(0, 0), (1, 1), (2, 2)]) == 5"
    },
    {
        "id": 207,
        "raw_problem": "# Write a function to extract specified size of strings from a given list of string values.\ndef extract_string(str1, l):\n",
        "raw_solution": "    return [e for e in str1 if len(e) == l] \n",
        "new_problem": "# Given a list of strings, extract all strings of specified sizes and return a dictionary where the keys are the sizes and the values are lists of strings of those sizes. If a size has no corresponding strings, it should not appear in the dictionary.\ndef extract_strings_by_size(str_list):\n",
        "new_solution": "    sizes = set(len(s) for s in str_list)\n    result = {size: extract_string(str_list, size) for size in sizes if extract_string(str_list, size)}\n    return result\n",
        "test_code": "assert extract_strings_by_size(['a', 'ab', 'abc', 'abcd', 'abcde']) == {1: ['a'], 2: ['ab'], 3: ['abc'], 4: ['abcd'], 5: ['abcde']}\nassert extract_strings_by_size(['hello', 'world', 'python', 'code']) == {4: ['code'], 5: ['hello', 'world'], 6: ['python']}\nassert extract_strings_by_size(['a', 'bb', 'ccc', 'dddd', 'eeeee']) == {1: ['a'], 2: ['bb'], 3: ['ccc'], 4: ['dddd'], 5: ['eeeee']}\nassert extract_strings_by_size(['', 'a', 'aa', 'aaa', 'aaaa']) == {0: [''], 1: ['a'], 2: ['aa'], 3: ['aaa'], 4: ['aaaa']}\nassert extract_strings_by_size(['short', 'longer', 'longest']) == {5: ['short'], 6: ['longer'], 7: ['longest']}"
    },
    {
        "id": 208,
        "raw_problem": "# Write a function to remove all whitespaces from the given string.\nimport re\ndef remove_whitespaces(text1):\n",
        "raw_solution": "  return text1.replace(' ', '')\n",
        "new_problem": "# Given a list of strings, write a function to remove all whitespaces from each string and then concatenate the resulting strings into a single string, separated by a hyphen.\ndef concatenate_no_whitespaces(strings_list):\n",
        "new_solution": "  return '-'.join([remove_whitespaces(s) for s in strings_list])\n",
        "test_code": "assert concatenate_no_whitespaces(['hello world', 'goodbye space']) == 'helloworld-goodbyespace'\nassert concatenate_no_whitespaces(['  leading spaces', 'trailing spaces  ']) == 'leadingspaces-trailingspaces'\nassert concatenate_no_whitespaces(['no', 'spaces', 'here']) == 'no-spaces-here'"
    },
    {
        "id": 209,
        "raw_problem": "# Write a python function to find the sum of even factors of a number.\nimport math \ndef sumofFactors(n):\n",
        "raw_solution": "    if (n % 2 != 0): \n        return 0\n    return sum([i for i in range(2, n + 1) if n % i == 0 and i % 2 == 0])\n",
        "new_problem": "# Given a list of numbers, write a Python function to find the sum of even factors of each number in the list and return the total sum of these even factors.\ndef totalSumOfEvenFactors(numbers):\n",
        "new_solution": "    return sum(sumofFactors(num) for num in numbers)\n",
        "test_code": "assert totalSumOfEvenFactors([10, 15, 20]) == 48\nassert totalSumOfEvenFactors([2, 4, 6]) == 16\nassert totalSumOfEvenFactors([1, 3, 5]) == 0\nassert totalSumOfEvenFactors([12, 14, 16]) == 70"
    },
    {
        "id": 210,
        "raw_problem": "# Write a function that matches a word containing 'z'.\nimport re\ndef text_match_wordz(text):\n",
        "raw_solution": "        return 'z' in text\n",
        "new_problem": "# Write a function that takes a list of sentences and returns a list of sentences that contain at least one word with the letter 'z'. Each sentence should be checked using the function from the raw question.\nimport re\n\ndef text_match_wordz(text):\n",
        "new_solution": "    return 'z' in text\n\ndef filter_sentences_with_z(sentences):\n    return [sentence for sentence in sentences if any(text_match_wordz(word) for word in sentence.split())]\n",
        "test_code": "assert filter_sentences_with_z(['lazy dog', 'quick brown fox', 'zebra crossing']) == ['lazy dog', 'zebra crossing']\nassert filter_sentences_with_z(['python programming', 'zen of python']) == ['zen of python']\nassert filter_sentences_with_z(['hello world', 'goodbye']) == []"
    },
    {
        "id": 211,
        "raw_problem": "# Write a function to check whether the given month number contains 31 days or not.\ndef check_monthnumb_number(monthnum2):\n",
        "raw_solution": "  return monthnum2 in [1, 3, 5, 7, 8, 10, 12]\n",
        "new_problem": "# Write a function to determine the total number of days in a given range of months. The function should take two parameters: the start month and the end month, both inclusive. Use the provided function to check if a month contains 31 days.\ndef total_days_in_range(start_month, end_month):\n",
        "new_solution": "    total_days = 0\n    for month in range(start_month, end_month + 1):\n        if check_monthnumb_number(month):\n            total_days += 31\n        elif month != 2:\n            total_days += 30\n        else:\n            total_days += 28\n    return total_days\n",
        "test_code": "assert total_days_in_range(1, 1) == 31\nassert total_days_in_range(1, 2) == 59\nassert total_days_in_range(1, 12) == 365\nassert total_days_in_range(4, 6) == 91\nassert total_days_in_range(7, 9) == 92"
    },
    {
        "id": 212,
        "raw_problem": "# Write a function to reverse each string in a given list of string values.\ndef reverse_string_list(stringlist):\n",
        "raw_solution": "    return [x[::-1] for x in stringlist]\n",
        "new_problem": "# Given a list of lists of string values, write a function to reverse each string in each sublist and then concatenate all the reversed strings into a single string.\ndef reverse_and_concatenate(list_of_lists):\n",
        "new_solution": "    reversed_strings = [reverse_string_list(sublist) for sublist in list_of_lists]\n    return ''.join([''.join(sublist) for sublist in reversed_strings])\n",
        "test_code": "assert reverse_and_concatenate([['hello', 'world'], ['python', 'programming']]) == 'ollehdlrownohtypgnimmargorp'\nassert reverse_and_concatenate([['abc', 'def'], ['ghi', 'jkl']]) == 'cbafedihglkj'\nassert reverse_and_concatenate([['123', '456'], ['789', '0']]) == '3216549870'\nassert reverse_and_concatenate([['', ''], ['', '']]) == ''\nassert reverse_and_concatenate([['a', 'b'], ['c', 'd']]) == 'abcd'"
    },
    {
        "id": 213,
        "raw_problem": "# Write a python function to find the sublist having minimum length.\ndef Find_Min(lst):\n",
        "raw_solution": "    return min(lst, key=len) \n",
        "new_problem": "# Given a list of lists, where each sublist contains integers, write a function to find the sublist with the minimum length and then find the maximum value within that sublist. If there are multiple sublists with the same minimum length, choose the one that appears first in the list.\ndef Find_Min_Max(lst):\n",
        "new_solution": "    min_sublist = Find_Min(lst)\n    return max(min_sublist)\n",
        "test_code": "assert Find_Min_Max([[1, 2, 3], [4, 5], [6]]) == 6\nassert Find_Min_Max([[1], [2, 3], [4, 5, 6]]) == 1\nassert Find_Min_Max([[1, 2], [3, 4, 5], [6, 7]]) == 2\nassert Find_Min_Max([[1, 2, 3, 4], [5, 6], [7, 8, 9]]) == 6\nassert Find_Min_Max([[10], [20, 30], [40, 50, 60]]) == 10"
    },
    {
        "id": 214,
        "raw_problem": "# Write a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n",
        "raw_solution": "  return l * b\n",
        "new_problem": "# Given a list of rectangles represented by their lengths and breadths, write a function to calculate the total area of all rectangles.\ndef total_rectangle_areas(rectangles):\n",
        "new_solution": "  total_area = 0\n  for rectangle in rectangles:\n    total_area += rectangle_area(rectangle[0], rectangle[1])\n  return total_area\n",
        "test_code": "assert total_rectangle_areas([[2, 3], [4, 5], [6, 7]]) == 68\nassert total_rectangle_areas([[1, 1], [2, 2], [3, 3]]) == 14\nassert total_rectangle_areas([[0, 0], [1, 1], [2, 2]]) == 5"
    },
    {
        "id": 215,
        "raw_problem": "# Write a function to remove uppercase substrings from a given string.\ndef remove_uppercase(str1):\n",
        "raw_solution": "  return ''.join(c for c in str1 if c.islower())\n",
        "new_problem": "# Write a function to remove all substrings from a given string that start with an uppercase letter and end with a lowercase letter. The function should handle multiple such substrings within the string.\ndef remove_uppercase_substrings(str1):\n",
        "new_solution": "    while True:\n        start = -1\n        for i, c in enumerate(str1):\n            if c.isupper():\n                start = i\n            elif c.islower() and start != -1:\n                str1 = str1[:start] + str1[i+1:]\n                break\n        if start == -1:\n            break\n    return str1\n",
        "test_code": "assert remove_uppercase_substrings('HelloWorld') == 'llorld'\nassert remove_uppercase_substrings('RemoveThisSubstring') == 'moveisbstring'\nassert remove_uppercase_substrings('NoUpperCase') == 'perse'\nassert remove_uppercase_substrings('MultipleREMOVEremoveSubstrings') == 'ltiplebstrings'\nassert remove_uppercase_substrings('') == ''"
    },
    {
        "id": 216,
        "raw_problem": "# Write a python function to get the first element of each sublist.\ndef Extract(lst):\n",
        "raw_solution": "    return [item[0] for item in lst] \n",
        "new_problem": "# Given a list of lists, where each sublist contains multiple elements, write a function to extract the first element of each sublist and then find the sum of these extracted elements. If a sublist is empty, it should be ignored in the sum calculation.\ndef SumOfFirstElements(lst):\n",
        "new_solution": "    lst = [sublist for sublist in lst if sublist]\n    # Extract the first elements\n    extracted_elements = Extract(lst)\n    # Sum the elements\n    total = 0\n    for element in extracted_elements:\n        if element is not None:\n            total += element\n    return total\n",
        "test_code": "assert SumOfFirstElements([[1, 2], [3, 4], [5, 6]]) == 9\nassert SumOfFirstElements([[10], [20, 30], [], [40, 50, 60]]) == 70\nassert SumOfFirstElements([[], [1], [2, 3], [4, 5, 6]]) == 7\nassert SumOfFirstElements([[0], [0], [0]]) == 0\nassert SumOfFirstElements([[1, 2, 3], [], [4, 5], [6]]) == 11"
    },
    {
        "id": 217,
        "raw_problem": "# Write a function to find all possible combinations of the elements of a given list.\ndef combinations_list(list1):\n",
        "raw_solution": "    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result\n",
        "new_problem": "# Given a list of lists, find all possible combinations of elements where each combination includes exactly one element from each sublist. For example, given [[1, 2], [3, 4]], the output should be [[1, 3], [1, 4], [2, 3], [2, 4]].\ndef combinations_of_lists(list_of_lists):\n",
        "new_solution": "    if not list_of_lists:\n        return [[]]\n    result = []\n    for combination in combinations_of_lists(list_of_lists[1:]):\n        for element in list_of_lists[0]:\n            result.append([element] + combination)\n    return result\n",
        "test_code": "assert combinations_of_lists([[1, 2], [3, 4]]) == [[1, 3], [2, 3], [1, 4], [2, 4]]\nassert combinations_of_lists([[1], [2], [3]]) == [[1, 2, 3]]\nassert combinations_of_lists([[1, 2, 3], [4, 5], [6]]) == [[1, 4, 6], [2, 4, 6], [3, 4, 6], [1, 5, 6], [2, 5, 6], [3, 5, 6]]\nassert combinations_of_lists([]) == [[]]\nassert combinations_of_lists([[1, 2], [3, 4], [5, 6]]) == [[1, 3, 5], [2, 3, 5], [1, 4, 5], [2, 4, 5], [1, 3, 6], [2, 3, 6], [1, 4, 6], [2, 4, 6]]"
    },
    {
        "id": 218,
        "raw_problem": "# Write a function to find the maximum product subarray of the given array.\ndef max_subarray_product(arr):\n",
        "raw_solution": "    max_so_far = min_ending = max_ending = arr[0]\n    for n in arr[1:]:\n        min_ending, max_ending = min(n, min_ending * n, max_ending * n), max(n, min_ending * n, max_ending * n)\n        max_so_far = max(max_so_far, max_ending)\n    return max_so_far\n",
        "new_problem": "# Given a 2D array where each element is an array of integers, find the maximum product subarray for each row and then return the sum of these maximum products.\ndef max_subarray_product_sum(arr):\n",
        "new_solution": "    def max_subarray_product(sub_arr):\n        max_so_far = min_ending = max_ending = sub_arr[0]\n        for n in sub_arr[1:]:\n            min_ending, max_ending = min(n, min_ending * n, max_ending * n), max(n, min_ending * n, max_ending * n)\n            max_so_far = max(max_so_far, max_ending)\n        return max_so_far\n\n    total_sum = 0\n    for row in arr:\n        total_sum += max_subarray_product(row)\n    return total_sum\n",
        "test_code": "assert max_subarray_product_sum([[2,3,-2,4],[1,2,3,4],[-1,-2,-3,-4]]) == 54\nassert max_subarray_product_sum([[0,2],[3,4],[5,6]]) == 44\nassert max_subarray_product_sum([[-2,0,-1],[3,0,3],[-4,4,-1]]) == 19"
    },
    {
        "id": 219,
        "raw_problem": "# Write a function to drop empty items from a given dictionary.\ndef drop_empty(dict1):\n",
        "raw_solution": "  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1\n",
        "new_problem": "# Given a list of dictionaries, write a function to drop empty items from each dictionary in the list and return a new list of dictionaries with the empty items removed.\ndef drop_empty_from_list(list_of_dicts):\n",
        "new_solution": "  return [drop_empty(d) for d in list_of_dicts]\n",
        "test_code": "assert drop_empty_from_list([{'a': 1, 'b': None}, {'c': None, 'd': 4}]) == [{'a': 1}, {'d': 4}]\nassert drop_empty_from_list([{}, {'e': None}, {'f': 5, 'g': None}]) == [{}, {}, {'f': 5}]\nassert drop_empty_from_list([{'h': 6, 'i': 7}, {'j': None, 'k': None}]) == [{'h': 6, 'i': 7}, {}]"
    },
    {
        "id": 220,
        "raw_problem": "# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr):   \n  # record the correspond ending element to maintain the increasing subsequence\n  ret = max_ending = min_ending = (arr[0], arr[0])\n  for n in arr[1:]:\n",
        "raw_solution": "    if n > max_ending[1]:\n      max_ending = max((max_ending[0] * n, n), max_ending, key=lambda x: x[0])\n    else:\n      max_ending = (n, n)\n    if n > min_ending[1]:\n      min_ending = min((min_ending[0] * n, n), min_ending, key=lambda x: x[0])\n    else:\n      min_ending = (n, n)\n    ret = max(ret, max_ending, min_ending, key=lambda x: x[0])\n  return ret[0]\n",
        "new_problem": "# Given a 2D array where each subarray contains integers, find the maximum product formed by multiplying numbers of an increasing subsequence for each subarray. Then, sum all the maximum products obtained from each subarray to get the final result.\ndef max_product_sum(arr):\n",
        "new_solution": "    def max_product(subarr):\n        ret = max_ending = min_ending = (subarr[0], subarr[0])\n        for n in subarr[1:]:\n            if n > max_ending[1]:\n                max_ending = max((max_ending[0] * n, n), max_ending, key=lambda x: x[0])\n            else:\n                max_ending = (n, n)\n            if n > min_ending[1]:\n                min_ending = min((min_ending[0] * n, n), min_ending, key=lambda x: x[0])\n            else:\n                min_ending = (n, n)\n            ret = max(ret, max_ending, min_ending, key=lambda x: x[0])\n        return ret[0]\n\n    total_sum = 0\n    for subarr in arr:\n        total_sum += max_product(subarr)\n    return total_sum\n",
        "test_code": "assert max_product_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 630\nassert max_product_sum([[10, 20], [30, 40], [50, 60]]) == 4400\nassert max_product_sum([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == 6"
    },
    {
        "id": 221,
        "raw_problem": "# Write a function to find the pairwise addition of the neighboring elements of the given tuple.\ndef add_pairwise(test_tup):\n",
        "raw_solution": "  return tuple(a + b for a, b in zip(test_tup, test_tup[1:]))\n",
        "new_problem": "# Given a list of tuples, each containing a sequence of numbers, write a function to find the pairwise addition of the neighboring elements for each tuple and then sum the results of all tuples.\ndef sum_of_pairwise_additions(tuples_list):\n",
        "new_solution": "    def add_pairwise(test_tup):\n        return tuple(a + b for a, b in zip(test_tup, test_tup[1:]))\n    return sum(sum(add_pairwise(tup)) for tup in tuples_list)\n",
        "test_code": "assert sum_of_pairwise_additions([(1, 2, 3), (4, 5, 6)]) == 28\nassert sum_of_pairwise_additions([(1, 1, 1), (2, 2, 2)]) == 12\nassert sum_of_pairwise_additions([(10, 20, 30, 40), (5, 15, 25, 35)]) == 270"
    },
    {
        "id": 222,
        "raw_problem": "# Write a python function to find the product of the array multiplication modulo n.\ndef find_remainder(arr, n):\n",
        "raw_solution": "    from functools import reduce\n    return reduce(lambda x, y: x * y, arr) % n\n",
        "new_problem": "# Given a list of arrays and a number n, find the sum of the products of each array modulo n. Each array should be processed using the function from the raw question.\ndef sum_of_products_modulo(arrays, n):\n",
        "new_solution": "    return sum(find_remainder(arr, n) for arr in arrays)\n",
        "test_code": "assert sum_of_products_modulo([[1, 2], [3, 4], [5, 6]], 7) == 9\nassert sum_of_products_modulo([[10, 20], [30, 40], [50, 60]], 100) == 0\nassert sum_of_products_modulo([[1, 1], [2, 2], [3, 3]], 10) == 14"
    },
    {
        "id": 223,
        "raw_problem": "# Write a python function to check whether the given list contains consecutive numbers or not.\ndef check_Consecutive(l):\n",
        "raw_solution": "    return sorted(l) == list(range(min(l),max(l)+1)) \n",
        "new_problem": "# Given a list of lists, each containing integers, write a function to determine if each sublist contains consecutive numbers. Return a list of boolean values where each value corresponds to whether the respective sublist contains consecutive numbers or not.\ndef check_Consecutive_Sublists(list_of_lists):\n",
        "new_solution": "    return [check_Consecutive(sublist) for sublist in list_of_lists]\n",
        "test_code": "assert check_Consecutive_Sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [True, True, True]\nassert check_Consecutive_Sublists([[1, 2, 4], [5, 7, 6], [8, 10, 9]]) == [False, True, True]\nassert check_Consecutive_Sublists([[10, 11, 12], [13, 14, 15], [16, 17, 18]]) == [True, True, True]\nassert check_Consecutive_Sublists([[1, 3, 2], [6, 5, 4], [9, 8, 7]]) == [True, True, True]\nassert check_Consecutive_Sublists([[1, 2, 3], [5, 6, 7], [9, 10, 12]]) == [True, True, False]"
    },
    {
        "id": 224,
        "raw_problem": "# Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef tuple_intersection(test_list1, test_list2):\n",
        "raw_solution": "  return set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n",
        "new_problem": "# Given a list of tuple lists, find the tuple intersection of all the tuple lists irrespective of their order. If there is no intersection, return an empty set.\ndef tuple_intersection_of_lists(tuple_lists):\n",
        "new_solution": "    if not tuple_lists:\n        return set()\n    intersection = tuple_intersection(tuple_lists[0], tuple_lists[1])\n    for i in range(2, len(tuple_lists)):\n        intersection = tuple_intersection(list(intersection), tuple_lists[i])\n    return intersection\n",
        "test_code": "assert tuple_intersection_of_lists([[(1, 2), (3, 4)], [(2, 1), (5, 6)], [(1, 2), (6, 7)]]) == {(1, 2)}\nassert tuple_intersection_of_lists([[(1, 2), (3, 4)], [(5, 6), (7, 8)], [(9, 10), (11, 12)]]) == set()\nassert tuple_intersection_of_lists([[(1, 2), (3, 4)], [(2, 1), (3, 4)], [(1, 2), (4, 3)]]) == {(1, 2), (3, 4)}"
    },
    {
        "id": 225,
        "raw_problem": "# Write a function to replace characters in a string.\ndef replace_char(str1, ch, newch):\n",
        "raw_solution": "    return str1.replace(ch, newch)\n",
        "new_problem": "# Write a function to replace multiple characters in a string with their corresponding new characters. The function should take a string and a dictionary where keys are characters to be replaced and values are the new characters.\ndef replace_multiple_chars(str1, char_map):\n",
        "new_solution": "    for ch, newch in char_map.items():\n        str1 = replace_char(str1, ch, newch)\n    return str1\n",
        "test_code": "assert replace_multiple_chars('hello world', {'h': 'j', 'o': 'a'}) == 'jella warld'\nassert replace_multiple_chars('programming', {'g': 'd', 'm': 'n'}) == 'prodrannind'\nassert replace_multiple_chars('python', {'p': 'b', 'y': 'i'}) == 'bithon'"
    },
    {
        "id": 226,
        "raw_problem": "# Write a function to sort a dictionary by value.\ndef sort_counter(dict1):\n",
        "raw_solution": " return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n",
        "new_problem": "# Given a list of dictionaries, each containing 'name' and 'scores' keys, where 'scores' is a dictionary of subjects and their corresponding scores. Write a function to return a list of dictionaries sorted by the average score of each dictionary's 'scores'.\ndef sort_by_average_score(list_of_dicts):\n",
        "new_solution": "    def average_score(scores):\n        return sum(scores.values()) / len(scores)\n    return sorted(list_of_dicts, key=lambda x: average_score(x['scores']), reverse=True)\n",
        "test_code": "assert sort_by_average_score([{'name': 'Alice', 'scores': {'math': 85, 'science': 90}}, {'name': 'Bob', 'scores': {'math': 70, 'science': 80}}]) == [{'name': 'Alice', 'scores': {'math': 85, 'science': 90}}, {'name': 'Bob', 'scores': {'math': 70, 'science': 80}}]\nassert sort_by_average_score([{'name': 'Charlie', 'scores': {'math': 60, 'science': 70}}, {'name': 'David', 'scores': {'math': 90, 'science': 85}}]) == [{'name': 'David', 'scores': {'math': 90, 'science': 85}}, {'name': 'Charlie', 'scores': {'math': 60, 'science': 70}}]"
    },
    {
        "id": 227,
        "raw_problem": "# Write a python function to find the sum of the largest and smallest value in a given array.\ndef big_sum(nums):\n",
        "raw_solution": "      return max(nums) + min(nums)\n",
        "new_problem": "# Given a list of arrays, write a Python function to find the sum of the largest and smallest values for each array, and then return the sum of these sums.\ndef total_big_sum(arrays):\n",
        "new_solution": "    return sum(big_sum(array) for array in arrays)\n",
        "test_code": "assert total_big_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 30\nassert total_big_sum([[10, 20, 30], [40, 50, 60], [70, 80, 90]]) == 300\nassert total_big_sum([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == 12\nassert total_big_sum([[100], [200], [300]]) == 1200"
    },
    {
        "id": 228,
        "raw_problem": "# Write a python function to convert the given string to lower case.\ndef is_lower(string):\n",
        "raw_solution": "    return string.lower()\n",
        "new_problem": "# Write a Python function that takes a list of strings and returns a new list where each string is converted to lowercase and then reversed. The function should handle an empty list gracefully by returning an empty list.\ndef process_strings(string_list):\n",
        "new_solution": "    if not string_list:\n        return []\n    return [is_lower(s)[::-1] for s in string_list]\n",
        "test_code": "assert process_strings(['Hello', 'WORLD']) == ['olleh', 'dlrow']\nassert process_strings(['Python', 'Programming']) == ['nohtyp', 'gnimmargorp']\nassert process_strings([]) == []\nassert process_strings(['123', '456']) == ['321', '654']"
    },
    {
        "id": 229,
        "raw_problem": "# Write a function to remove lowercase substrings from a given string.\nimport re\ndef remove_lowercase(str1):\n",
        "raw_solution": "    return re.sub('[a-z]', '', str1)\n",
        "new_problem": "# Given a list of strings, remove all lowercase substrings from each string and then concatenate the results into a single string. If the resulting string is empty, return 'EMPTY'.\ndef process_strings(strings):\n",
        "new_solution": "    result = ''.join([remove_lowercase(s) for s in strings])\n    return result if result else 'EMPTY'\n",
        "test_code": "assert process_strings(['Hello', 'World']) == 'HW'\nassert process_strings(['123', '456']) == '123456'\nassert process_strings(['aBc', 'DeF']) == 'BDF'\nassert process_strings(['', 'test']) == 'EMPTY'\nassert process_strings(['UPPER', 'CASE']) == 'UPPERCASE'"
    },
    {
        "id": 230,
        "raw_problem": "# Write a python function to find the first digit of a given number.\ndef first_Digit(n):\n",
        "raw_solution": "    return int(str(n)[0])\n",
        "new_problem": "# Write a Python function to find the sum of the first digits of a list of numbers.\ndef sum_first_digits(numbers):\n",
        "new_solution": "    return sum(first_Digit(number) for number in numbers)\n\n",
        "test_code": "assert sum_first_digits([123, 456, 789]) == 12\nassert sum_first_digits([10, 20, 30]) == 6\nassert sum_first_digits([999, 888, 777]) == 24\nassert sum_first_digits([1, 2, 3]) == 6\nassert sum_first_digits([100, 200, 300]) == 6"
    },
    {
        "id": 231,
        "raw_problem": "# Write a python function which takes a list of integers and only returns the odd ones.\ndef Split(l):\n",
        "raw_solution": "    return list(filter(lambda x: x % 2 == 1, l))\n",
        "new_problem": "# Write a Python function that takes a list of lists of integers and returns a list of lists where each sublist contains only the odd integers from the corresponding sublist in the input list. If a sublist in the input list is empty, the output should include an empty sublist at the same position.\ndef SplitLists(ll):\n",
        "new_solution": "    return [Split(l) for l in ll]\n",
        "test_code": "assert SplitLists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 3], [5], [7, 9]]\nassert SplitLists([[2, 4, 6], [1, 3, 5], [8, 10, 12]]) == [[], [1, 3, 5], []]\nassert SplitLists([[], [11, 13, 15], [17, 19, 21]]) == [[], [11, 13, 15], [17, 19, 21]]\nassert SplitLists([[1, 3, 5], [], [7, 9, 11]]) == [[1, 3, 5], [], [7, 9, 11]]"
    },
    {
        "id": 232,
        "raw_problem": "# Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\ndef difference(n):\n",
        "raw_solution": "    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \n",
        "new_problem": "# Write a Python function to find the sum of the differences between the sum of cubes and the sum of the first n natural numbers for a list of integers. Each integer in the list represents a value of n for which the difference should be calculated.\ndef sum_of_differences(lst):\n",
        "new_solution": "    total_difference = 0\n    for n in lst:\n        total_difference += difference(n)\n    return total_difference\n",
        "test_code": "assert sum_of_differences([1, 2, 3]) == 36\nassert sum_of_differences([5, 10]) == 3180\nassert sum_of_differences([0, 1]) == 0\nassert sum_of_differences([100]) == 25497450"
    },
    {
        "id": 233,
        "raw_problem": "# Write a python function to count the number of pairs whose xor value is odd.\ndef find_Odd_Pair(A,N):\n",
        "raw_solution": "    oddPair = 0\n    for i in range(0,N):\n        for j in range(i+1,N):\n            if ((A[i] ^ A[j]) % 2 != 0):  \n                oddPair+=1  \n    return oddPair  \n",
        "new_problem": "# Given a list of integers, find the total number of pairs whose xor value is odd and the total number of pairs whose xor value is even. Return a tuple where the first element is the count of odd xor pairs and the second element is the count of even xor pairs.\ndef count_xor_pairs(A, N):\n",
        "new_solution": "    odd_pairs = find_Odd_Pair(A, N)\n    total_pairs = (N * (N - 1)) // 2\n    even_pairs = total_pairs - odd_pairs\n    return (odd_pairs, even_pairs)\n",
        "test_code": "assert count_xor_pairs([1, 2, 3, 4], 4) == (4, 2)\nassert count_xor_pairs([10, 20, 30, 40], 4) == (0, 6)\nassert count_xor_pairs([1, 3, 5, 7], 4) == (0, 6)\nassert count_xor_pairs([2, 4, 6, 8], 4) == (0, 6)\nassert count_xor_pairs([1, 2, 3, 4, 5], 5) == (6, 4)"
    },
    {
        "id": 234,
        "raw_problem": "# Write a function to toggle the case of all characters in a string.\ndef toggle_string(string):\n",
        "raw_solution": " return string.swapcase()\n",
        "new_problem": "# Given a list of strings, write a function to toggle the case of all characters in each string and then concatenate the results into a single string, with each toggled string separated by a space.\ndef toggle_and_concatenate(strings):\n",
        "new_solution": "    return ' '.join([toggle_string(s) for s in strings])\n",
        "test_code": "assert toggle_and_concatenate(['Hello', 'World']) == 'hELLO wORLD'\nassert toggle_and_concatenate(['Python', 'Programming']) == 'pYTHON pROGRAMMING'\nassert toggle_and_concatenate(['aBcDeF']) == 'AbCdEf'\nassert toggle_and_concatenate(['123', '456']) == '123 456'\nassert toggle_and_concatenate([]) == ''"
    },
    {
        "id": 235,
        "raw_problem": "# Write a python function to find the sum of the per-digit difference between two integers.\ndef digit_distance_nums(n1, n2):\n",
        "raw_solution": "    return sum([abs(int(c1) - int(c2)) for c1, c2 in zip(str(n1), str(n2))])\n",
        "new_problem": "# Given a list of tuples, where each tuple contains two integers, write a Python function to find the total sum of the per-digit differences for all pairs of integers in the list.\ndef total_digit_distance(pairs):\n",
        "new_solution": "    return sum(digit_distance_nums(n1, n2) for n1, n2 in pairs)\n",
        "test_code": "assert total_digit_distance([(123, 456), (789, 321)]) == 27\nassert total_digit_distance([(1234, 5678), (9012, 3456)]) == 34\nassert total_digit_distance([(111, 222), (333, 444)]) == 6\nassert total_digit_distance([(555, 666), (777, 888)]) == 6\nassert total_digit_distance([(101, 202), (303, 404)]) == 4"
    },
    {
        "id": 236,
        "raw_problem": "# Write a function to find the sum of the largest contiguous sublist in the given list.\ndef max_sub_array_sum(a, size):\n",
        "raw_solution": "  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far\n",
        "new_problem": "# Given a 2D list (matrix) of integers, find the sum of the largest contiguous submatrix. A submatrix is defined as any rectangular subarray of the given matrix.\ndef max_submatrix_sum(matrix):\n",
        "new_solution": "    if not matrix or not matrix[0]:\n        return 0  # Return 0 for empty matrix\n    \n    n = len(matrix)\n    m = len(matrix[0])\n    max_sum = 0\n    \n    # Iterate over all pairs of rows\n    for top in range(n):\n        temp = [0] * m\n        for bottom in range(top, n):\n            # Collapse rows between 'top' and 'bottom' into a single array 'temp'\n            for i in range(m):\n                temp[i] += matrix[bottom][i]\n            \n            # Find the maximum sum of subarray in 'temp' using the given 1D max subarray sum function\n            current_max = max_sub_array_sum(temp, m)\n            max_sum = max(max_sum, current_max)\n    \n    return max_sum\n",
        "test_code": "assert max_submatrix_sum([[1, 2, -1], [-3, 4, 5], [6, -7, 8]]) == 15\nassert max_submatrix_sum([[-1, -2, -3], [-4, -5, -6], [-7, -8, -9]]) == 0\nassert max_submatrix_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 45\nassert max_submatrix_sum([[1, -2, 3], [4, 5, -6], [-7, 8, 9]]) == 17"
    },
    {
        "id": 237,
        "raw_problem": "# Write a function to find the union of the elements of two given tuples and output them in sorted order.\ndef union_elements(test_tup1, test_tup2):\n",
        "raw_solution": "  return tuple(sorted(set(test_tup1 + test_tup2)))\n",
        "new_problem": "# Given a list of tuples, write a function to find the union of all elements from these tuples and output them in sorted order. The function should handle any number of tuples in the list.\ndef union_of_tuples(list_of_tuples):\n",
        "new_solution": "    union_set = set()\n    for tup in list_of_tuples:\n        union_set.update(tup)\n    return tuple(sorted(union_set))\n",
        "test_code": "assert union_of_tuples([(1, 3, 5), (3, 4, 5), (5, 6, 7)]) == (1, 3, 4, 5, 6, 7)\nassert union_of_tuples([(10, 20), (20, 30), (30, 40)]) == (10, 20, 30, 40)\nassert union_of_tuples([(1, 1, 1), (2, 2, 2), (3, 3, 3)]) == (1, 2, 3)\nassert union_of_tuples([(1,), (2,), (3,)]) == (1, 2, 3)\nassert union_of_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == (1, 2, 3, 4, 5, 6, 7, 8, 9)"
    },
    {
        "id": 238,
        "raw_problem": "# Write a python function to find the length of the longest sublists.\ndef Find_Max_Length(lst):\n",
        "raw_solution": "    return len(max(lst, key = len))\n",
        "new_problem": "# Given a list of lists, where each sublist contains integers, find the sum of the lengths of the longest sublists in each sublist of the main list. For example, if the main list is [[1, 2, 3], [4, 5], [6, 7, 8, 9]], the longest sublist in each sublist of the main list is [1, 2, 3], [4, 5], and [6, 7, 8, 9], respectively. The sum of their lengths is 3 + 2 + 4 = 9.\ndef Sum_Max_Lengths(lst_of_lsts):\n",
        "new_solution": "    total_length = 0\n    for sublist in lst_of_lsts:\n        max_length = Find_Max_Length(sublist)\n        total_length += max_length\n\n    return total_length",
        "test_code": "assert Sum_Max_Lengths([[[1, 2, 3]], [[4, 5]], [[6, 7, 8, 9]]]) == 9\nassert Sum_Max_Lengths([[[1], [2, 3]], [[4, 5, 6]]]) == 5\nassert Sum_Max_Lengths([[[]], [[1, 2], [3, 4, 5, 6]]]) == 4\nassert Sum_Max_Lengths([[[1, 2, 3, 4]], [[5, 6], [7]]]) == 6"
    },
    {
        "id": 239,
        "raw_problem": "# Write a function to extract values between quotation marks from a string.\nimport re\ndef extract_values(text):\n",
        "raw_solution": " return (re.findall(r'\"(.*?)\"', text))\n",
        "new_problem": "# Given a list of strings, each containing multiple sentences with values enclosed in quotation marks, write a function to extract all values between quotation marks from each string and return them as a list of lists. Each sublist should correspond to the extracted values from one of the input strings.\nimport re\n\ndef extract_all_values(texts):\n",
        "new_solution": "    return [extract_values(text) for text in texts]\n\ndef extract_values(text):\n    return re.findall(r'\"(.*?)\"', text)\n",
        "test_code": "assert extract_all_values(['This is \"a test\" string.', 'Another \"example\" with \"multiple\" quotes.']) == [['a test'], ['example', 'multiple']]"
    },
    {
        "id": 240,
        "raw_problem": "# Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\ndef count_Pairs(arr,n):\n",
        "raw_solution": "    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] != arr[j]): \n                cnt += 1; \n    return cnt; \n",
        "new_problem": "# Given a list of lists of integers, count the total number of possible unordered pairs where both elements are unequal for each sublist, and then return the sum of these counts.\ndef total_count_Pairs(arr_of_arrs):\n",
        "new_solution": "    total_cnt = 0\n    for arr in arr_of_arrs:\n        total_cnt += count_Pairs(arr, len(arr))\n    return total_cnt\n",
        "test_code": "assert total_count_Pairs([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 10\nassert total_count_Pairs([[1, 1, 1], [2, 2], [3, 3, 3, 3]]) == 0\nassert total_count_Pairs([[1, 2], [3, 4, 5], [6, 7, 8, 9, 10]]) == 14"
    },
    {
        "id": 241,
        "raw_problem": "# Write a python function to split a string into characters.\ndef split(word):\n",
        "raw_solution": "    return list(word)\n",
        "new_problem": "# Write a Python function to split multiple strings into characters and return a list of lists where each sublist contains the characters of the corresponding string.\ndef split_multiple_strings(words):\n",
        "new_solution": "    return [split(word) for word in words]\n",
        "test_code": "assert split_multiple_strings(['hello', 'world']) == [['h', 'e', 'l', 'l', 'o'], ['w', 'o', 'r', 'l', 'd']]\nassert split_multiple_strings(['python', 'programming']) == [['p', 'y', 't', 'h', 'o', 'n'], ['p', 'r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']]\nassert split_multiple_strings(['']) == [[]]\nassert split_multiple_strings([]) == []"
    },
    {
        "id": 242,
        "raw_problem": "# Write a function to get the sum of the digits of a non-negative integer.\ndef sum_digits(n):\n",
        "raw_solution": "  return sum(map(int, str(n)))\n",
        "new_problem": "# Write a function to calculate the sum of the digits of each number in a list of non-negative integers, and then return the total sum of these sums.\ndef total_sum_of_digits(numbers):\n",
        "new_solution": "    return sum(sum_digits(n) for n in numbers)\n",
        "test_code": "assert total_sum_of_digits([123, 456, 789]) == 45\nassert total_sum_of_digits([0, 1, 10, 100]) == 3\nassert total_sum_of_digits([999, 111, 222]) == 36"
    },
    {
        "id": 243,
        "raw_problem": "# Write a function to check whether a specified list is sorted or not.\ndef issort_list(list1):\n",
        "raw_solution": "    return all(a <= b for a, b in zip(list1, list1[1:]))\n",
        "new_problem": "# Given a list of lists, determine if each sublist is sorted and if the entire list of lists is sorted by the first element of each sublist.\ndef is_sorted_list_of_lists(list_of_lists):\n",
        "new_solution": "    return all(issort_list(sublist) for sublist in list_of_lists) and issort_list([sublist[0] for sublist in list_of_lists])\n",
        "test_code": "assert is_sorted_list_of_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == True\nassert is_sorted_list_of_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]) == True\nassert is_sorted_list_of_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9], [6]]) == False\nassert is_sorted_list_of_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 9, 8]]) == False"
    },
    {
        "id": 244,
        "raw_problem": "# Write a function to create a list of N empty dictionaries.\ndef empty_list(length):\n",
        "raw_solution": " return [{} for _ in range(length)]\n",
        "new_problem": "# Write a function to create a list of M lists, each containing N empty dictionaries.\ndef nested_empty_lists(M, N):\n",
        "new_solution": "    return [empty_list(N) for _ in range(M)]\n",
        "test_code": "assert nested_empty_lists(2, 3) == [[{}, {}, {}], [{}, {}, {}]]\nassert nested_empty_lists(0, 5) == []\nassert nested_empty_lists(3, 0) == [[], [], []]\nassert nested_empty_lists(1, 1) == [[{}]]"
    },
    {
        "id": 245,
        "raw_problem": "# Write a function to sort each sublist of strings in a given list of lists.\ndef sort_sublists(list1):\n",
        "raw_solution": "    return list(map(sorted,list1)) \n",
        "new_problem": "# Given a list of lists of strings, sort each sublist and then sort the entire list of lists based on the first element of each sublist. If the first elements are the same, sort by the second element, and so on.\ndef sort_sublists_and_lists(list1):\n",
        "new_solution": "    sorted_sublists = sort_sublists(list1)\n    return sorted(sorted_sublists, key=lambda x: tuple(x))\n\n# Helper function from raw solution\ndef sort_sublists(list1):\n    return list(map(sorted, list1))\n",
        "test_code": "assert sort_sublists_and_lists([['b', 'a'], ['d', 'c'], ['f', 'e']]) == [['a', 'b'], ['c', 'd'], ['e', 'f']]\nassert sort_sublists_and_lists([['b', 'a'], ['a', 'b'], ['a', 'a']]) == [['a', 'a'], ['a', 'b'], ['a', 'b']]\nassert sort_sublists_and_lists([['z', 'y'], ['x', 'w'], ['v', 'u']]) == [['u', 'v'], ['w', 'x'], ['y', 'z']]\nassert sort_sublists_and_lists([['b', 'a'], ['d', 'c'], ['a', 'b']]) == [['a', 'b'], ['a', 'b'], ['c', 'd']]"
    },
    {
        "id": 246,
        "raw_problem": "# Write a python function to remove duplicate numbers from a given number of lists.\ndef two_unique_nums(nums):\n",
        "raw_solution": "  return [n for n in nums if nums.count(n)==1]\n",
        "new_problem": "# Given a list of lists, each containing numbers, write a Python function to remove duplicate numbers from each list and then return a single list containing all unique numbers from all the lists. If a number appears in multiple lists, it should only appear once in the final list.\ndef unique_nums_from_lists(lists):\n",
        "new_solution": "    unique_nums = set()\n    for lst in lists:\n        unique_nums.update(two_unique_nums(lst))\n    return list(unique_nums)\n",
        "test_code": "assert unique_nums_from_lists([[1, 2, 2, 3], [2, 3, 4], [4, 5, 5]]) == [1, 2, 3, 4]\nassert unique_nums_from_lists([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == []\nassert unique_nums_from_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]"
    },
    {
        "id": 247,
        "raw_problem": "# Write a python function to calculate the product of the unique numbers in a given list.\ndef unique_product(list_data):\n",
        "raw_solution": "    from functools import reduce\n    return reduce(lambda x, y: x*y, set(list_data))\n",
        "new_problem": "# Given a list of lists, each containing integers, write a Python function to calculate the product of the unique numbers in each sublist and then return the sum of these products.\ndef sum_of_unique_products(list_of_lists):\n",
        "new_solution": "    from functools import reduce\n    def unique_product(list_data):\n        return reduce(lambda x, y: x*y, set(list_data))\n    return sum(unique_product(sublist) for sublist in list_of_lists)\n",
        "test_code": "assert sum_of_unique_products([[1, 2, 2], [3, 4, 4], [5, 5, 6]]) == 44\nassert sum_of_unique_products([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == 6"
    },
    {
        "id": 248,
        "raw_problem": "# Write a python function to check whether a list is sublist of another or not.\ndef is_Sub_Array(A,B):\n",
        "raw_solution": "    a = 0\n    b = 0\n    while a < len(A) and b < len(B):\n        if A[a] == B[b]:\n            a += 1\n            b += 1\n        else:\n            a += 1\n    return b == len(B)\n",
        "new_problem": "# Given a list of lists, determine if each list is a sublist of the next list in the sequence. Return a list of boolean values indicating whether each list is a sublist of the next one.\ndef check_sublists(lists):\n",
        "new_solution": "    result = []\n    for i in range(len(lists) - 1):\n        result.append(is_Sub_Array(lists[i], lists[i + 1]))\n    return result\n",
        "test_code": "assert check_sublists([[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == [False, False]\nassert check_sublists([[1, 2], [1, 3], [1, 3, 4]]) == [False, False]\nassert check_sublists([[1, 2], [1, 2], [1, 2]]) == [True, True]\nassert check_sublists([[1, 2], [1, 3], [1, 2, 3]]) == [False, False]"
    },
    {
        "id": 249,
        "raw_problem": "# Write a python function to find the last digit in factorial of a given number.\ndef last_Digit_Factorial(n):\n",
        "raw_solution": "    if (n == 0): \n      return 1\n    elif (n <= 2): \n      return n  \n    elif (n == 3): \n      return 6\n    elif (n == 4): \n      return 4 \n    else: \n      return 0\n",
        "new_problem": "# Given a list of numbers, write a Python function to find the last digit of the product of the factorials of each number in the list.\ndef last_Digit_Factorial_Product(numbers):\n",
        "new_solution": "    product_last_digit = 1\n    for num in numbers:\n        product_last_digit *= last_Digit_Factorial(num)\n    return product_last_digit % 10\n",
        "test_code": "assert last_Digit_Factorial_Product([0, 1, 2, 3, 4]) == 8\nassert last_Digit_Factorial_Product([5, 6, 7, 8, 9]) == 0\nassert last_Digit_Factorial_Product([10, 11, 12, 13, 14]) == 0\nassert last_Digit_Factorial_Product([15, 16, 17, 18, 19]) == 0\nassert last_Digit_Factorial_Product([20, 21, 22, 23, 24]) == 0"
    },
    {
        "id": 250,
        "raw_problem": "# Write a function to interleave 3 lists of the same length into a single flat list.\ndef interleave_lists(list1, list2, list3):\n",
        "raw_solution": "    return [el for pair in zip(list1, list2, list3) for el in pair]\n",
        "new_problem": "# Given a list of lists where each sublist contains exactly 3 elements, write a function to interleave all the sublists into a single flat list.\ndef interleave_sublists(list_of_lists):\n",
        "new_solution": "    interleaved_list = []\n    for sublist in list_of_lists:\n        interleaved_list.extend(interleave_lists(sublist[:1], sublist[1:2], sublist[2:3]))\n    return interleaved_list\n",
        "test_code": "assert interleave_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert interleave_sublists([['a', 'b', 'c'], ['d', 'e', 'f']]) == ['a', 'b', 'c', 'd', 'e', 'f']\nassert interleave_sublists([[True, False, True], [False, True, False]]) == [True, False, True, False, True, False]"
    },
    {
        "id": 251,
        "raw_problem": "# Write a function to find the dissimilar elements in the given two tuples.\ndef find_dissimilar(test_tup1, test_tup2):\n",
        "raw_solution": "  return tuple(set(test_tup1) ^ set(test_tup2))\n",
        "new_problem": "# Given a list of tuples, write a function to find the dissimilar elements across all tuples. The function should return a set containing all unique dissimilar elements across the list of tuples.\ndef find_dissimilar_across_tuples(list_of_tuples):\n",
        "new_solution": "    dissimilar_elements = set()\n    for i in range(len(list_of_tuples)):\n        for j in range(i + 1, len(list_of_tuples)):\n            dissimilar_elements.update(find_dissimilar(list_of_tuples[i], list_of_tuples[j]))\n    return dissimilar_elements\n",
        "test_code": "assert find_dissimilar_across_tuples([(1, 2, 3), (2, 3, 4), (3, 4, 5)]) == set((1, 2, 4, 5))\nassert find_dissimilar_across_tuples([('a', 'b', 'c'), ('b', 'c', 'd'), ('c', 'd', 'e')]) == set(('e', 'b', 'd', 'a'))\nassert find_dissimilar_across_tuples([(10, 20), (20, 30), (30, 40)]) == set((10, 20, 30, 40))"
    },
    {
        "id": 252,
        "raw_problem": "# Write a function to remove uneven elements in the nested mixed tuple.\ndef even_ele(test_tuple, ): \n    res = tuple() \n    for ele in test_tuple: \n        if isinstance(ele, tuple): \n            res += (even_ele(ele), ) \n        elif ele % 2 == 0: \n            res += (ele, ) \n    return res \ndef extract_even(test_tuple):\n",
        "raw_solution": "    return even_ele(test_tuple)\n",
        "new_problem": "# Given a list of nested mixed tuples, write a function to remove uneven elements from each tuple and then sum all the remaining even elements from all tuples.\ndef sum_of_even_elements(test_list):\n",
        "new_solution": "    total_sum = 0\n    for tup in test_list:\n        even_tup = extract_even(tup)\n        total_sum += sum(filter(lambda x: isinstance(x, int), even_tup))\n    return total_sum\n",
        "test_code": "assert sum_of_even_elements([(1, 2, (3, 4)), (5, (6, 7), 8)]) == 10\nassert sum_of_even_elements([(1, (2, 3), (4, (5, 6))), (7, (8, 9), 10)]) == 10\nassert sum_of_even_elements([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == 20\nassert sum_of_even_elements([(1, (2, (3, 4))), (5, (6, (7, 8)))]) == 0"
    },
    {
        "id": 253,
        "raw_problem": "# Write a python function to find the surface area of a square pyramid with a given base edge and height.\ndef surface_Area(b,s):\n",
        "raw_solution": "    return 2 * b * s + pow(b,2) \n",
        "new_problem": "# Given a list of square pyramids, each represented by a tuple containing its base edge and height, write a Python function to calculate the total surface area of all the pyramids.\ndef total_Surface_Area(pyramids):\n",
        "new_solution": "    total_area = 0\n    for pyramid in pyramids:\n        b, s = pyramid\n        total_area += surface_Area(b, s)\n    return total_area\n",
        "test_code": "assert total_Surface_Area([(2, 3), (4, 5)]) == 72\nassert total_Surface_Area([(1, 1), (2, 2), (3, 3)]) == 42\nassert total_Surface_Area([]) == 0"
    },
    {
        "id": 254,
        "raw_problem": "# Write a function which returns nth catalan number.\ndef catalan_number(num):\n",
        "raw_solution": "    if num <= 1:\n         return 1   \n    res_num = 0\n    for i in range(num):\n        res_num += catalan_number(i) * catalan_number(num - i - 1)\n    return res_num\n",
        "new_problem": "# Write a function which returns the sum of the first n Catalan numbers.\ndef sum_of_catalan_numbers(n):\n",
        "new_solution": "    total_sum = 0\n    for i in range(n):\n        total_sum += catalan_number(i)\n    return total_sum\n",
        "test_code": "assert sum_of_catalan_numbers(1) == 1\nassert sum_of_catalan_numbers(2) == 2\nassert sum_of_catalan_numbers(3) == 4\nassert sum_of_catalan_numbers(4) == 9"
    },
    {
        "id": 255,
        "raw_problem": "# Write a function to find the n most expensive items in a given dataset.\nimport heapq\ndef expensive_items(items,n):\n",
        "raw_solution": "  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items\n",
        "new_problem": "# Given a list of datasets, each containing items with a 'price' attribute, write a function to find the n most expensive items across all datasets.\n\ndef most_expensive_items_across_datasets(datasets, n):\n",
        "new_solution": "    all_items = []\n    for dataset in datasets:\n        all_items.extend(dataset)\n    return expensive_items(all_items, n)\n",
        "test_code": "assert most_expensive_items_across_datasets([[{\"name\": \"item1\", \"price\": 100}, {\"name\": \"item2\", \"price\": 200}], [{\"name\": \"item3\", \"price\": 150}, {\"name\": \"item4\", \"price\": 300}]], 2) == [{\"name\": \"item4\", \"price\": 300}, {\"name\": \"item2\", \"price\": 200}]\nassert most_expensive_items_across_datasets([[{\"name\": \"item1\", \"price\": 50}, {\"name\": \"item2\", \"price\": 75}], [{\"name\": \"item3\", \"price\": 100}]], 1) == [{\"name\": \"item3\", \"price\": 100}]"
    },
    {
        "id": 256,
        "raw_problem": "# Write a python function to split a list at the nth eelment and add the first part to the end.\ndef split_Arr(l, n):\n",
        "raw_solution": "  return l[n:] + l[:n]\n",
        "new_problem": "# Given a list of lists, where each sublist represents a circular shift operation on the original list, write a function to apply all the shifts in sequence to the original list.\ndef apply_shifts(original_list, shift_operations):\n",
        "new_solution": "    for shift in shift_operations:\n        original_list = split_Arr(original_list, shift)\n    return original_list\n",
        "test_code": "assert apply_shifts([1, 2, 3, 4, 5], [2, 1]) == [4, 5, 1, 2, 3]\nassert apply_shifts(['a', 'b', 'c', 'd'], [3, 1, 2]) == ['c', 'd', 'a', 'b']\nassert apply_shifts([10, 20, 30], [0, 1, 2]) == [10, 20, 30]"
    },
    {
        "id": 257,
        "raw_problem": "# Write a function to convert a list to a tuple.\ndef list_tuple(listx):\n",
        "raw_solution": "  return tuple(listx)\n",
        "new_problem": "# Given a list of lists, convert each sublist to a tuple and then return a list of these tuples. Additionally, if a sublist contains another list, recursively convert that nested list to a tuple as well.\ndef nested_list_to_tuple(list_of_lists):\n",
        "new_solution": "    def convert_to_tuple(item):\n        if isinstance(item, list):\n            return tuple(convert_to_tuple(sub_item) for sub_item in item)\n        return item\n    return [convert_to_tuple(sublist) for sublist in list_of_lists]\n",
        "test_code": "assert nested_list_to_tuple([[1, 2], [3, 4]]) == [(1, 2), (3, 4)]\nassert nested_list_to_tuple([[1, [2, 3]], [4, [5, 6]]]) == [(1, (2, 3)), (4, (5, 6))]\nassert nested_list_to_tuple([[1, [2, [3, 4]]], [5, [6, [7, 8]]]]) == [(1, (2, (3, 4))), (5, (6, (7, 8)))]"
    },
    {
        "id": 258,
        "raw_problem": "# Write a python function to find the difference between largest and smallest value in a given list.\ndef big_diff(nums):\n",
        "raw_solution": "     return max(nums) - min(nums)\n",
        "new_problem": "# Given a list of lists, write a Python function to find the difference between the largest and smallest values across all the sublists. The function should return a list of these differences for each sublist.\ndef big_diff_list(nums_list):\n",
        "new_solution": "    return [big_diff(sublist) for sublist in nums_list]\n",
        "test_code": "assert big_diff_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [2, 2, 2]\nassert big_diff_list([[10, 20, 30], [40, 50, 60], [70, 80, 90]]) == [20, 20, 20]\nassert big_diff_list([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == [0, 0, 0]\nassert big_diff_list([[1, 10], [2, 20], [3, 30]]) == [9, 18, 27]"
    },
    {
        "id": 259,
        "raw_problem": "# Write a function to find perfect squares between two given numbers.\nimport math\ndef perfect_squares(a, b):\n",
        "raw_solution": "    if a > b:\n        a, b = b, a\n    if b < 0:\n        return []\n    if a < 0:\n        a = 0\n    return list(filter(lambda x: math.sqrt(x).is_integer(), range(a, b+1)))\n",
        "new_problem": "# Given a list of intervals, each representing a range of numbers, write a function to find all perfect squares that fall within any of the given intervals. Return a list of all such perfect squares.\n\ndef find_all_perfect_squares(intervals):\n",
        "new_solution": "    all_squares = []\n    for interval in intervals:\n        squares = perfect_squares(interval[0], interval[1])\n        all_squares.extend(squares)\n    return list(set(all_squares))\n",
        "test_code": "assert find_all_perfect_squares([[1, 10], [15, 25]]) == [1, 4, 9, 16, 25]\nassert find_all_perfect_squares([[10, 20], [30, 40]]) == [16, 36]\nassert find_all_perfect_squares([[-5, 5], [10, 15]]) == [0, 1, 4]\nassert find_all_perfect_squares([[0, 0], [1, 1]]) == [0, 1]"
    },
    {
        "id": 260,
        "raw_problem": "# Write a function to convert polar coordinates to rectangular coordinates.\nimport cmath\ndef polar_rect(x,y):\n",
        "raw_solution": "    return cmath.rect(x, y)\n",
        "new_problem": "# Given a list of polar coordinates, convert each coordinate to rectangular coordinates and then find the average of all the rectangular coordinates.\ndef average_rect_coords(polar_coords):\n",
        "new_solution": "    rect_coords = [polar_rect(r, theta) for r, theta in polar_coords]\n    sum_real = sum(coord.real for coord in rect_coords)\n    sum_imag = sum(coord.imag for coord in rect_coords)\n    count = len(rect_coords)\n    return complex(sum_real / count, sum_imag / count)\n",
        "test_code": "assert average_rect_coords([(1, cmath.pi/4), (2, cmath.pi/3), (3, cmath.pi/2)]) == (0.5690355937288494+1.8130525295851416j)"
    },
    {
        "id": 261,
        "raw_problem": "# Write a python function to interchange the first and last elements in a list.\ndef swap_List(newList):\n",
        "raw_solution": "    return newList[-1:] + newList[1:-1] + newList[:1]\n",
        "new_problem": "# Given a list of lists, where each sublist contains exactly three elements, write a function to swap the first and last elements of each sublist and then return a new list containing the modified sublists. If the sublist has fewer than three elements, it should be ignored.\ndef swap_sublists(list_of_lists):\n",
        "new_solution": "    return [swap_List(sublist) if len(sublist) == 3 else None for sublist in list_of_lists if sublist is not None]\n",
        "test_code": "assert swap_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\nassert swap_sublists([[1, 2, 3], [4, 5], [7, 8, 9]]) == [[3, 2, 1], None, [9, 8, 7]]\nassert swap_sublists([[1, 2, 3], None, [7, 8, 9]]) == [[3, 2, 1], [9, 8, 7]]\nassert swap_sublists([[1, 2], [4, 5], [7, 8]]) == [None, None, None]"
    },
    {
        "id": 262,
        "raw_problem": "# Write a python function to find the sum of the product of consecutive binomial co-efficients.\ndef sum_Of_product(n):\n",
        "raw_solution": "    return binomial_Coeff(2 * n, n - 1); \ndef binomial_Coeff(n, k):\n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \n",
        "new_problem": "# Write a Python function to find the sum of the products of consecutive binomial coefficients for a given range of values. Specifically, for each integer k from 1 to n, compute the sum of the product of the binomial coefficients C(2k, k) and C(2k+1, k+1).\ndef sum_Of_product_range(n):\n",
        "new_solution": "    total_sum = 0 \n    for k in range(1, n + 1): \n        total_sum += binomial_Coeff(2 * k, k) * binomial_Coeff(2 * k + 1, k + 1) \n    return total_sum\n",
        "test_code": "assert sum_Of_product_range(1) == 6\nassert sum_Of_product_range(2) == 66\nassert sum_Of_product_range(3) == 766"
    },
    {
        "id": 263,
        "raw_problem": "# Write a function to remove leading zeroes from an ip address.\nimport re\ndef removezero_ip(ip):\n",
        "raw_solution": " return re.sub('\\.[0]*', '.', ip)\n",
        "new_problem": "# Given a list of IP addresses, write a function to remove leading zeroes from each IP address and then sort the list of IP addresses in ascending order.\nimport re\n\ndef removezero_ip(ip):\n",
        "new_solution": "    return re.sub('\\\\.[0]*', '.', ip)\n\ndef sort_ips(ip_list):\n    cleaned_ips = [removezero_ip(ip) for ip in ip_list]\n    return sorted(cleaned_ips)\n",
        "test_code": "assert sort_ips(['192.0168.001.001', '10.001.002.003', '172.016.001.001']) == ['10.1.2.3', '172.16.1.1', '192.168.1.1']\nassert sort_ips(['001.001.001.001', '002.002.002.002', '003.003.003.003']) == ['001.1.1.1', '002.2.2.2', '003.3.3.3']\nassert sort_ips(['010.001.001.001', '001.001.001.001', '002.002.002.002']) == ['001.1.1.1', '002.2.2.2', '010.1.1.1']"
    },
    {
        "id": 264,
        "raw_problem": "# Write a function to find the difference of the first even and first odd number of a given list.\ndef diff_even_odd(list1):\n",
        "raw_solution": "    first_even = next((el for el in list1 if el%2==0), -1)\n    first_odd = next((el for el in list1 if el%2!=0), -1)\n    return (first_even - first_odd)\n",
        "new_problem": "# Given a list of lists, find the sum of the differences of the first even and first odd number for each sublist. If a sublist does not contain both an even and an odd number, it should be ignored in the sum.\ndef sum_diff_even_odd(list_of_lists):\n",
        "new_solution": "    total_sum = 0\n    for sublist in list_of_lists:\n        diff = diff_even_odd(sublist)\n        if diff != 0:\n            total_sum += diff\n    return total_sum\n",
        "test_code": "assert sum_diff_even_odd([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 1\nassert sum_diff_even_odd([[1, 3, 5], [2, 4, 6], [7, 9, 11]]) == -7\nassert sum_diff_even_odd([[2, 4, 6], [1, 3, 5], [8, 10, 12]]) == 10\nassert sum_diff_even_odd([[1, 2], [3, 4], [5, 6]]) == 3\nassert sum_diff_even_odd([[1, 3, 5], [2, 4, 6], [7, 8, 9]]) == 2"
    },
    {
        "id": 265,
        "raw_problem": "# Write a function to find the size in bytes of the given tuple.\nimport sys \ndef tuple_size(tuple_list):\n",
        "raw_solution": "  return sys.getsizeof(tuple_list)\n",
        "new_problem": "# Given a list of tuples, write a function to calculate the total size in bytes of all tuples combined. Additionally, find the tuple with the maximum size and return its index in the list.\nimport sys\n\ndef total_tuple_size(tuple_list):\n",
        "new_solution": "    total_size = 0\n    max_size = 0\n    max_index = -1\n    for i, t in enumerate(tuple_list):\n        size = sys.getsizeof(t)\n        total_size += size\n        if size > max_size:\n            max_size = size\n            max_index = i\n    return total_size, max_index\n",
        "test_code": "assert total_tuple_size([(1, 2), (3, 4, 5), (6,)]) == (168, 1)\nassert total_tuple_size([(), (), ()]) == (120, 0)\nassert total_tuple_size([(1,), (2,), (3,)]) == (144, 0)\nassert total_tuple_size([(1, 2, 3, 4, 5), (6, 7, 8, 9, 10)]) == (160, 0)"
    },
    {
        "id": 266,
        "raw_problem": "# Write a function to find kth element from the given two sorted arrays.\ndef find_kth(arr1, arr2, k):\n",
        "raw_solution": "    return sorted(arr1 + arr2)[k - 1]\n",
        "new_problem": "# Given a list of sorted arrays, write a function to find the kth smallest element across all arrays.\ndef find_kth_smallest(arrays, k):\n",
        "new_solution": "    combined = []\n    for arr in arrays:\n        combined.extend(arr)\n    return sorted(combined)[k - 1]\n",
        "test_code": "assert find_kth_smallest([[1, 3, 5], [2, 4, 6]], 3) == 3\nassert find_kth_smallest([[10, 20], [15, 30], [5, 25]], 4) == 20\nassert find_kth_smallest([[1], [2], [3], [4]], 2) == 2\nassert find_kth_smallest([[1, 1, 1], [1, 1, 1]], 3) == 1"
    },
    {
        "id": 267,
        "raw_problem": "# Write a function to check whether the given number is armstrong or not.\ndef armstrong_number(number):\n",
        "raw_solution": "    order = len(str(number))\n    return sum([int(i) ** order for i in str(number)]) == number\n",
        "new_problem": "# Given a list of numbers, write a function to return a list of all Armstrong numbers from the given list.\ndef find_armstrong_numbers(numbers):\n",
        "new_solution": "    return [number for number in numbers if armstrong_number(number)]\n",
        "test_code": "assert find_armstrong_numbers([153, 370, 371, 407, 120, 125]) == [153, 370, 371, 407]\nassert find_armstrong_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert find_armstrong_numbers([10, 20, 30, 40, 50]) == []"
    },
    {
        "id": 268,
        "raw_problem": "# Write a function to find sum and average of first n natural numbers.\ndef sum_average(number):\n",
        "raw_solution": "   sum_ = sum(range(1, number+1))\n   average = sum_/number\n   return sum_, average\n",
        "new_problem": "# Given a list of integers, write a function to calculate the sum and average of the first n natural numbers for each integer in the list. Return a list of tuples where each tuple contains the sum and average for the corresponding integer in the list.\ndef sum_average_list(numbers):\n",
        "new_solution": "    result = []\n    for number in numbers:\n        if number == 0:\n            result.append((0, 0.0))\n        else:\n            sum_, average = sum_average(number)\n            result.append((sum_, average))\n    return result\n",
        "test_code": "assert sum_average_list([1, 2, 3]) == [(1, 1.0), (3, 1.5), (6, 2.0)]\nassert sum_average_list([5, 10]) == [(15, 3.0), (55, 5.5)]\nassert sum_average_list([0]) == [(0, 0.0)]"
    },
    {
        "id": 269,
        "raw_problem": "# Write a python function to check whether the given number is even or not.\ndef is_Even(n):\n",
        "raw_solution": "    return n % 2 == 0\n",
        "new_problem": "# Given a list of numbers, write a Python function to count how many numbers in the list are even. If the list contains sublists, count the even numbers in the sublists as well.\ndef count_even_numbers(numbers):\n",
        "new_solution": "    count = 0\n    for num in numbers:\n        if isinstance(num, list):\n            count += count_even_numbers(num)\n        else:\n            if is_Even(num):\n                count += 1\n    return count\n\n",
        "test_code": "assert count_even_numbers([1, 2, 3, 4, 5]) == 2\nassert count_even_numbers([1, [2, 3], [4, [5, 6]]]) == 3\nassert count_even_numbers([[1, 3, 5], [2, 4, 6]]) == 3\nassert count_even_numbers([[], [2, 4], [6, 8, 10]]) == 5\nassert count_even_numbers([1, 3, 5, 7, 9]) == 0"
    },
    {
        "id": 270,
        "raw_problem": "# Write a python function to find the first repeated character in a given string.\ndef first_repeated_char(str1):\n",
        "raw_solution": "  for index, c in enumerate(str1):\n    if str1[:index + 1].count(c) > 1:\n      return c\n  return None\n",
        "new_problem": "# Given a list of strings, write a Python function to find the first repeated character in each string and return a list of these characters. If a string does not have any repeated characters, append 'None' to the list.\ndef first_repeated_chars(str_list):\n",
        "new_solution": "    result = []\n    for s in str_list:\n        result.append(first_repeated_char(s))\n    return result\n\n# Helper function from raw solution\ndef first_repeated_char(str1):\n    for index, c in enumerate(str1):\n        if str1[:index + 1].count(c) > 1:\n            return c\n    return None\n",
        "test_code": "assert first_repeated_chars(['hello', 'world', 'python']) == ['l', None, None]\nassert first_repeated_chars(['apple', 'banana', 'cherry']) == ['p', 'a', 'r']\nassert first_repeated_chars(['mississippi', 'alabama', 'arkansas']) == ['s', 'a', 'a']"
    },
    {
        "id": 271,
        "raw_problem": "# Write a function to get all lucid numbers smaller than or equal to a given integer.\ndef get_ludic(n):\n",
        "raw_solution": "    ludics = []\n    for i in range(1, n + 1):\n        ludics.append(i)\n    index = 1\n    while(index != len(ludics)):\n        first_ludic = ludics[index]\n        remove_index = index + first_ludic\n        while(remove_index < len(ludics)):\n            ludics.remove(ludics[remove_index])\n            remove_index = remove_index + first_ludic - 1\n        index += 1\n    return ludics\n",
        "new_problem": "# Write a function to find the k-th smallest lucid number among all lucid numbers smaller than or equal to a given integer n. If k is larger than the number of lucid numbers up to n, return the largest lucid number found.\ndef kth_smallest_ludic(n, k):\n",
        "new_solution": "    ludics = get_ludic(n)\n    if k > len(ludics):\n        return ludics[-1]\n    return ludics[k-1]\n",
        "test_code": "assert kth_smallest_ludic(25, 1) == 1\nassert kth_smallest_ludic(25, 2) == 2\nassert kth_smallest_ludic(25, 3) == 3\nassert kth_smallest_ludic(25, 4) == 5\nassert kth_smallest_ludic(25, 5) == 7\nassert kth_smallest_ludic(25, 6) == 11\nassert kth_smallest_ludic(25, 7) == 13\nassert kth_smallest_ludic(25, 8) == 17\nassert kth_smallest_ludic(25, 9) == 23\nassert kth_smallest_ludic(25, 10) == 25"
    },
    {
        "id": 272,
        "raw_problem": "# Write a function to reverse words seperated by spaces in a given string.\ndef reverse_words(s):\n",
        "raw_solution": "    return ' '.join(reversed(s.split()))\n",
        "new_problem": "# Given a list of strings, reverse the words in each string and then reverse the order of the strings in the list. Return the modified list.\ndef reverse_list_of_strings(lst):\n",
        "new_solution": "    return [reverse_words(s) for s in reversed(lst)]\n",
        "test_code": "assert reverse_list_of_strings(['hello world', 'python is fun']) == ['fun is python', 'world hello']\nassert reverse_list_of_strings(['quick brown fox', 'jumps over', 'the lazy dog']) == ['dog lazy the', 'over jumps', 'fox brown quick']\nassert reverse_list_of_strings(['']) == ['']\nassert reverse_list_of_strings(['single']) == ['single']\nassert reverse_list_of_strings(['multiple words', 'in one string']) == ['string one in', 'words multiple']"
    },
    {
        "id": 273,
        "raw_problem": "# Write a function to check if the given integer is a prime number.\nimport math\ndef prime_num(num):\n",
        "raw_solution": "  if num <= 1:\n    return False\n  for i in range(2, int(math.sqrt(num)) + 1):\n    if num % i == 0:\n      return False\n  return True\n",
        "new_problem": "# Write a function to find the sum of all prime numbers in a given range [start, end].\nimport math\n\ndef prime_num(num):\n",
        "new_solution": "  if num <= 1:\n    return False\n  for i in range(2, int(math.sqrt(num)) + 1):\n    if num % i == 0:\n      return False\n  return True\n\ndef sum_of_primes(start, end):\n  total = 0\n  for num in range(start, end + 1):\n    if prime_num(num):\n      total += num\n  return total\n",
        "test_code": "assert sum_of_primes(1, 10) == 17\nassert sum_of_primes(10, 20) == 60\nassert sum_of_primes(20, 30) == 52\nassert sum_of_primes(30, 40) == 68"
    },
    {
        "id": 274,
        "raw_problem": "# Write a function to convert degrees to radians.\nimport math\ndef radian_degree(degree):\n",
        "raw_solution": "    return degree * math.pi / 180\n",
        "new_problem": "# Given a list of angles in degrees, write a function to calculate the sum of their radian equivalents and return the result rounded to two decimal places.\nimport math\n\ndef radian_degree(degree):\n",
        "new_solution": "    return degree * math.pi / 180\n\ndef sum_radians(degrees):\n    total_radians = sum(radian_degree(degree) for degree in degrees)\n    return round(total_radians, 2)\n",
        "test_code": "assert sum_radians([0, 90, 180, 270]) == 9.42\nassert sum_radians([30, 60, 90]) == 3.14\nassert sum_radians([45, 45, 45, 45]) == 3.14\nassert sum_radians([15, 30, 45, 60, 75]) == 3.93"
    },
    {
        "id": 275,
        "raw_problem": "# Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nimport re\ndef find_literals(text, pattern):\n",
        "raw_solution": "  match = re.search(pattern, text)\n  if match is None:\n    return None\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\n",
        "new_problem": "# Given a list of strings and a list of regex patterns, write a function that returns a dictionary where each key is a pattern and the value is a list of tuples. Each tuple should contain the matching substring, the start index, and the end index for each string in the list that matches the pattern. If a pattern does not match any string, it should not be included in the dictionary.\nimport re\n\ndef find_all_literals(texts, patterns):\n",
        "new_solution": "  result = {}\n  for pattern in patterns:\n    matches = []\n    for text in texts:\n      match = re.search(pattern, text)\n      if match:\n        s = match.start()\n        e = match.end()\n        matches.append((text[s:e], s, e))\n    if matches:\n      result[pattern] = matches\n  return result\n",
        "test_code": "assert find_all_literals(['hello world', 'world hello'], [r'hello', r'world']) == {r'hello': [('hello', 0, 5), ('hello', 6, 11)], r'world': [('world', 6, 11), ('world', 0, 5)]}\nassert find_all_literals(['no match here'], [r'pattern']) == {}\nassert find_all_literals(['partial', 'match'], [r'art']) == {'art': [('art', 1, 4)]}"
    },
    {
        "id": 276,
        "raw_problem": "# Write a python function to find nth bell number.\ndef bell_Number(n):\n",
        "raw_solution": "    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n",
        "new_problem": "# Write a Python function to find the sum of the first 'k' Bell numbers.\ndef sum_of_first_k_bell_numbers(k):\n",
        "new_solution": "    total_sum = 0\n    for i in range(k):\n        total_sum += bell_Number(i)\n    return total_sum\n",
        "test_code": "assert sum_of_first_k_bell_numbers(1) == 1\nassert sum_of_first_k_bell_numbers(2) == 2\nassert sum_of_first_k_bell_numbers(3) == 4\nassert sum_of_first_k_bell_numbers(4) == 9"
    },
    {
        "id": 277,
        "raw_problem": "# Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\ndef remove_kth_element(list1, k):\n",
        "raw_solution": "    return list1[:k-1] + list1[k:]\n",
        "new_problem": "# Write a Python function that takes a list and a list of indices, and returns a new list with the elements at the specified indices removed. The function should handle multiple indices and ensure that the order of elements is preserved.\ndef remove_elements_at_indices(list1, indices):\n",
        "new_solution": "    indices = sorted(indices, reverse=True)\n    for index in indices:\n        list1 = remove_kth_element(list1, index)\n    return list1\n",
        "test_code": "assert remove_elements_at_indices([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]\nassert remove_elements_at_indices(['a', 'b', 'c', 'd'], [1, 3]) == ['b', 'd']\nassert remove_elements_at_indices([10, 20, 30, 40, 50], [5]) == [10, 20, 30, 40]\nassert remove_elements_at_indices(['x', 'y', 'z'], [1, 2, 3]) == []"
    },
    {
        "id": 278,
        "raw_problem": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, N):\n",
        "raw_solution": "  return max([sub[N] for sub in test_list])\n",
        "new_problem": "# Given a list of matrices represented as lists of lists, return a list of the maximum values of the n'th column for each matrix. If a matrix does not have an n'th column, return None for that matrix.\ndef max_of_nth_columns(matrices, N):\n",
        "new_solution": "    return [max_of_nth(matrix, N) if len(matrix) > N else None for matrix in matrices]\n",
        "test_code": "assert max_of_nth_columns([[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[10, 11], [12, 13]]], 1) == [8, 13]\nassert max_of_nth_columns([[[1, 2], [3, 4]], [[5, 6, 7], [8, 9, 10]]], 2) == [None, None]\nassert max_of_nth_columns([[[1]], [[2, 3, 4], [5, 6, 7]]], 0) == [1, 5]\nassert max_of_nth_columns([[[1, 2, 3], [4, 5, 6]], [[7, 8], [9, 10]]], 2) == [None, None]"
    },
    {
        "id": 279,
        "raw_problem": "# Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\ndef merge(lst):\n",
        "raw_solution": "    return [list(ele) for ele in list(zip(*lst))] \n",
        "new_problem": "# Given a list of lists, where each sublist has three elements, write a function that returns a list of three lists where the first list contains the first element of each sublist, the second list contains the second element of each sublist, and the third list contains the third element of each sublist. Additionally, the function should also return a list of two lists where the first list contains the first and second elements of each sublist combined, and the second list contains the second and third elements of each sublist combined.\ndef complex_merge(lst):\n",
        "new_solution": "    first_second_combined = merge([[sublist[0], sublist[1]] for sublist in lst])\n    second_third_combined = merge([[sublist[1], sublist[2]] for sublist in lst])\n    return merge(lst), first_second_combined, second_third_combined\n",
        "test_code": "assert complex_merge([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == ([[1, 4, 7], [2, 5, 8], [3, 6, 9]], [[1, 4, 7], [2, 5, 8]], [[2, 5, 8], [3, 6, 9]])\nassert complex_merge([[10, 20, 30], [40, 50, 60]]) == ([[10, 40], [20, 50], [30, 60]], [[10, 40], [20, 50]], [[20, 50], [30, 60]])"
    },
    {
        "id": 280,
        "raw_problem": "# Write a function to find the cumulative sum of all the values that are present in the given tuple list.\ndef cummulative_sum(test_list):\n",
        "raw_solution": "  return sum(map(sum, test_list))\n",
        "new_problem": "# Given a list of tuple lists, write a function to find the cumulative sum of all the values that are present in each tuple list. Then, return the sum of all these cumulative sums.\ndef total_cumulative_sum(tuple_lists):\n",
        "new_solution": "    return sum(cummulative_sum(tup_list) for tup_list in tuple_lists)\n",
        "test_code": "assert total_cumulative_sum([[(1, 2), (3, 4)], [(5, 6), (7, 8)]]) == 36\nassert total_cumulative_sum([[(1, 1), (1, 1)], [(2, 2), (2, 2)]]) == 12\nassert total_cumulative_sum([[(0, 0), (0, 0)], [(0, 0), (0, 0)]]) == 0"
    },
    {
        "id": 281,
        "raw_problem": "# Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\ndef average_tuple(nums):\n",
        "raw_solution": "    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result\n",
        "new_problem": "# Given a list of tuples of tuples, write a function that returns a list of averages for each tuple in each tuple of tuples.\ndef average_tuples_of_tuples(tuples_of_tuples):\n",
        "new_solution": "    return [average_tuple(tup) for tup in tuples_of_tuples]\n",
        "test_code": "assert average_tuples_of_tuples([((1, 2), (3, 4)), ((5, 6), (7, 8))]) == [[2.0, 3.0], [6.0, 7.0]]\nassert average_tuples_of_tuples([((1, 1), (1, 1)), ((2, 2), (2, 2))]) == [[1.0, 1.0], [2.0, 2.0]]"
    },
    {
        "id": 282,
        "raw_problem": "# Write a function which takes two tuples of the same length and performs the element wise modulo.\ndef tuple_modulo(test_tup1, test_tup2):\n",
        "raw_solution": "  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) \n",
        "new_problem": "# Write a function which takes a list of tuples of the same length and performs the element wise modulo for each tuple pair in the list. The function should return a list of tuples where each tuple contains the results of the element wise modulo operation for the corresponding tuple pair in the input list.\ndef list_of_tuples_modulo(list_of_tuples):\n",
        "new_solution": "  return [tuple_modulo(tup1, tup2) for tup1, tup2 in list_of_tuples]\n",
        "test_code": "assert list_of_tuples_modulo([((10, 4, 6), (5, 2, 3)), ((15, 7, 9), (6, 3, 4))]) == [(0, 0, 0), (3, 1, 1)]"
    },
    {
        "id": 283,
        "raw_problem": "# Write a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n",
        "raw_solution": "  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n",
        "new_problem": "# Given a list of lists, where each sublist contains two lists of numbers, write a function to divide the corresponding elements of the two lists in each sublist and return a list of the results.\ndef div_lists_of_lists(list_of_lists):\n",
        "new_solution": "    return [div_list(sublist[0], sublist[1]) for sublist in list_of_lists]\n",
        "test_code": "assert div_lists_of_lists([[[1, 2, 3], [1, 2, 3]], [[4, 5, 6], [2, 2, 2]]]) == [[1.0, 1.0, 1.0], [2.0, 2.5, 3.0]]\nassert div_lists_of_lists([[[10, 20, 30], [5, 4, 3]], [[100, 200, 300], [10, 20, 30]]]) == [[2.0, 5.0, 10.0], [10.0, 10.0, 10.0]]\nassert div_lists_of_lists([[[1, 1, 1], [1, 1, 1]], [[2, 2, 2], [2, 2, 2]]]) == [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]"
    },
    {
        "id": 284,
        "raw_problem": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str):\n",
        "raw_solution": "  num_str = ''.join(i for i in test_str if i.isdigit())\n  else_str = ''.join(i for i in test_str if not i.isdigit())\n  return else_str + num_str\n",
        "new_problem": "# Given a list of strings, write a function to move all the numbers to the end of each string in the list and then concatenate all the modified strings into a single string.\ndef move_num_list(str_list):\n",
        "new_solution": "  def move_num(test_str):\n    num_str = ''.join(i for i in test_str if i.isdigit())\n    else_str = ''.join(i for i in test_str if not i.isdigit())\n    return else_str + num_str\n  return ''.join(move_num(s) for s in str_list)\n",
        "test_code": "assert move_num_list(['abc123', 'def456']) == 'abc123def456'\nassert move_num_list(['hello', 'world987']) == 'helloworld987'\nassert move_num_list(['123', '456']) == '123456'\nassert move_num_list(['a1b2c3', 'd4e5f6']) == 'abc123def456'"
    },
    {
        "id": 285,
        "raw_problem": "# Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\ndef largest_subset(a):\n",
        "raw_solution": "    n = len(a)\n    dp = [0 for _ in range(n)]\n    dp[n - 1] = 1; \n    for i in range(n - 2, -1, -1):\n        mxm = 0\n        for j in range(i + 1, n):\n            if a[j] % a[i] == 0 or a[i] % a[j] == 0:\n                mxm = max(mxm, dp[j])\n        dp[i] = 1 + mxm\n    return max(dp)\n",
        "new_problem": "# Given a list of lists of numbers, find the size of the largest subset of each sublist such that every pair in the subset is divisible. Then, return the sum of the sizes of these largest subsets.\ndef sum_of_largest_subsets(lists):\n",
        "new_solution": "    total_sum = 0\n    for sublist in lists:\n        total_sum += largest_subset(sublist)\n    return total_sum\n",
        "test_code": "assert sum_of_largest_subsets([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 4\nassert sum_of_largest_subsets([[10, 20, 30], [40, 50, 60], [70, 80, 90]]) == 4\nassert sum_of_largest_subsets([[1, 3, 5], [2, 4, 6], [7, 8, 9]]) == 5\nassert sum_of_largest_subsets([[1, 2, 4], [3, 6, 9], [5, 10, 20]]) == 8"
    },
    {
        "id": 286,
        "raw_problem": "# Write a function to find the median of two sorted lists of same size.\ndef get_median(arr1, arr2, n):\n",
        "raw_solution": "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\n",
        "new_problem": "# Given a list of sorted lists of the same size, find the median of the combined list formed by merging all the lists.\n\ndef find_combined_median(lists):\n",
        "new_solution": "    while len(lists) > 1:\n        merged_lists = []\n        \n        # Pairwise merge lists\n        for i in range(0, len(lists), 2):\n            if i + 1 < len(lists):\n                # Get median for two lists of the same size using get_median\n                n = len(lists[i])  # Assuming all lists are of the same size\n                median = get_median(lists[i], lists[i+1], n)\n                merged_lists.append([median])  # Median represents the combined \"merged\" list\n            else:\n                # Odd list out, add it directly to merged list\n                merged_lists.append(lists[i])\n        \n        lists = merged_lists  # Update lists to merged results\n    \n    # The final element in lists contains the median\n    return lists[0][0]\n",
        "test_code": "assert find_combined_median([[1, 3, 5], [2, 4, 6], [7, 8, 9]]) == 5.25\nassert find_combined_median([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == 6.5\nassert find_combined_median([[1, 1, 1], [2, 2, 2], [3, 3, 3], [4, 4, 4]]) == 2.5\nassert find_combined_median([[10, 20, 30], [15, 25, 35], [20, 30, 40]]) == 21.25"
    },
    {
        "id": 287,
        "raw_problem": "# Write a function to compute the n-th power of each number in a list.\ndef nth_nums(nums, n):\n",
        "raw_solution": " nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\n",
        "new_problem": "# Given a list of lists, where each sublist contains a list of numbers and an integer representing the power, write a function to compute the n-th power of each number in each sublist and return a list of lists where each sublist contains the results of the power operations.\ndef compute_powers(list_of_lists):\n",
        "new_solution": "    return [nth_nums(sublist[0], sublist[1]) for sublist in list_of_lists]\n",
        "test_code": "assert compute_powers([[[1, 2, 3], 2], [[4, 5, 6], 3]]) == [[1, 4, 9], [64, 125, 216]]\nassert compute_powers([[[7, 8, 9], 1], [[10, 11, 12], 0]]) == [[7, 8, 9], [1, 1, 1]]"
    },
    {
        "id": 288,
        "raw_problem": "# Write a python function to convert a given string to uppercase.\ndef is_upper(string):\n",
        "raw_solution": "  return string.upper()\n",
        "new_problem": "# Write a Python function that takes a list of strings and converts each string to uppercase, then returns a new list containing these uppercase strings. Additionally, the function should count and return the number of strings that were originally in lowercase.\ndef process_strings(string_list):\n",
        "new_solution": "    uppercase_list = [is_upper(s) for s in string_list]\n    lowercase_count = sum(1 for s in string_list if s.islower())\n    return uppercase_list, lowercase_count\n",
        "test_code": "assert process_strings(['hello', 'WORLD', 'python']) == (['HELLO', 'WORLD', 'PYTHON'], 2)\nassert process_strings(['a', 'B', 'c', 'D']) == (['A', 'B', 'C', 'D'], 2)\nassert process_strings(['123', '!@#']) == (['123', '!@#'], 0)"
    },
    {
        "id": 289,
        "raw_problem": "# Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\ndef triangle_area(r):\n",
        "raw_solution": "    if r < 0 : \n        return 0\n    return r * r \n",
        "new_problem": "# Given a list of semicircles with different radii, write a Python function to find the total area of the largest triangle that can be inscribed in each semicircle. If the radius is negative, the area should be considered as zero.\ndef total_triangle_areas(radii):\n",
        "new_solution": "    return sum(triangle_area(r) for r in radii)\n",
        "test_code": "assert total_triangle_areas([2, 3, 4]) == 29\nassert total_triangle_areas([-1, 5, 6]) == 61\nassert total_triangle_areas([0, 1, 2]) == 5\nassert total_triangle_areas([-2, -3, -4]) == 0"
    },
    {
        "id": 290,
        "raw_problem": "# Write a function to replace all spaces in the given string with '%20'.\ndef replace_spaces(string):\n",
        "raw_solution": "  return string.replace(\" \", \"%20\")\n",
        "new_problem": "# Given a list of strings, replace all spaces in each string with '%20' and then concatenate all the modified strings into a single string. Finally, split the concatenated string by '%20' and return the resulting list of substrings.\ndef process_strings(string_list):\n",
        "new_solution": "  modified_strings = [replace_spaces(s) for s in string_list]\n  concatenated_string = ''.join(modified_strings)\n  return concatenated_string.split('%20')\n",
        "test_code": "assert process_strings(['hello world', 'goodbye space']) == ['hello', 'worldgoodbye', 'space']\nassert process_strings(['no_spaces', 'here']) == ['no_spaceshere']\nassert process_strings(['multiple spaces   here']) == ['multiple', 'spaces', '', '', 'here']"
    },
    {
        "id": 291,
        "raw_problem": "# Write a python function to find even numbers from a list of numbers.\ndef Split(l):\n",
        "raw_solution": "    return [num for num in l if num % 2 == 0]\n",
        "new_problem": "# Write a Python function to find the sum of even numbers in multiple lists of numbers.\ndef SumOfEvens(lists):\n",
        "new_solution": "   return sum(num for l in lists for num in Split(l))",
        "test_code": "assert SumOfEvens([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10]]) == 30"
    },
    {
        "id": 292,
        "raw_problem": "# Write a function to extract all the adjacent coordinates of the given coordinate tuple.\ndef adjac(ele, sub = []): \n  if not ele: \n     yield sub \n  else: \n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \n                for idx in adjac(ele[1:], sub + [j])] \ndef get_coordinates(test_tup):\n",
        "raw_solution": "  return list(adjac(test_tup))\n",
        "new_problem": "# Given a list of coordinate tuples, write a function to extract all the adjacent coordinates for each tuple and return a list of all unique adjacent coordinates.\ndef get_all_adjacent_coordinates(coordinates):\n",
        "new_solution": "    # Set to collect unique adjacent coordinates\n    all_adjacent_coords = set()\n    \n    # Iterate over each coordinate in the input list\n    for coord in coordinates:\n        # Get adjacent coordinates for the current coordinate\n        adjacent_coords = get_coordinates(coord)\n        # Convert each list in adjacent_coords to a tuple and add it to the set\n        all_adjacent_coords.update(tuple(adj) for adj in adjacent_coords)\n    \n    # Convert the set back to a sorted list for consistent ordering\n    return sorted(all_adjacent_coords)\n",
        "test_code": "assert get_all_adjacent_coordinates([(1, 1), (2, 2)]) == [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (1, 3), (2, 0), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)]\nassert get_all_adjacent_coordinates([(0, 0)]) == [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 0), (0, 1), (1, -1), (1, 0), (1, 1)]"
    },
    {
        "id": 293,
        "raw_problem": "# Write a function to replace whitespaces with an underscore and vice versa in a given string.\ndef replace_spaces(text):\n",
        "raw_solution": "  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)\n",
        "new_problem": "# Given a list of strings, replace all whitespaces with underscores and vice versa in each string. Then, concatenate all the modified strings with a delimiter '|' between them.\ndef replace_and_concatenate(strings_list):\n",
        "new_solution": "    modified_strings = [replace_spaces(s) for s in strings_list]\n    return '|'.join(modified_strings)\n",
        "test_code": "assert replace_and_concatenate(['hello world', 'good_morning']) == 'hello_world|good morning'\nassert replace_and_concatenate(['', 'test']) == '|test'\nassert replace_and_concatenate(['_ _', 'test_case']) == ' _ |test case'\nassert replace_and_concatenate(['multiple strings', 'with_different_cases']) == 'multiple_strings|with different cases'"
    },
    {
        "id": 294,
        "raw_problem": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list):\n",
        "raw_solution": "    zeros = [0] * num_list.count(0)\n    front = [i for i in num_list if i != 0]\n    return front + zeros\n",
        "new_problem": "# Given a list of lists, where each sublist contains integers, write a function to move all zeroes to the end of each sublist and then return a new list of lists with the modified sublists.\ndef move_zeroes_in_lists(list_of_lists):\n",
        "new_solution": "    return [move_zero(sublist) for sublist in list_of_lists]\n",
        "test_code": "assert move_zeroes_in_lists([[0, 1, 0, 3, 12], [0, 0, 1]]) == [[1, 3, 12, 0, 0], [1, 0, 0]]\nassert move_zeroes_in_lists([[0, 0, 0], [1, 2, 3]]) == [[0, 0, 0], [1, 2, 3]]\nassert move_zeroes_in_lists([[4, 0, 2, 0], [0, 5, 0, 6]]) == [[4, 2, 0, 0], [5, 6, 0, 0]]"
    },
    {
        "id": 295,
        "raw_problem": "# Write a python function to find the sum of xor of all pairs of numbers in the given list.\ndef pair_xor_Sum(arr,n):\n",
        "raw_solution": "    ans = 0 \n    for i in range(0,n):\n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \n",
        "new_problem": "# Given a list of lists, where each sublist contains integers, write a Python function to find the sum of XOR of all pairs of numbers across all sublists. The function should return the total sum.\ndef total_pair_xor_Sum(arr_of_arrs):\n",
        "new_solution": "    total_sum = 0\n    for arr in arr_of_arrs:\n        total_sum += pair_xor_Sum(arr, len(arr))\n    return total_sum\n",
        "test_code": "assert total_pair_xor_Sum([[1, 2], [3, 4]]) == 10\nassert total_pair_xor_Sum([[1, 2, 3], [4, 5, 6]]) == 12\nassert total_pair_xor_Sum([[10, 20], [30, 40], [50, 60]]) == 98"
    },
    {
        "id": 296,
        "raw_problem": "# Write a function to sort the given list.\nimport heapq as hq\ndef heap_sort(iterable):\n",
        "raw_solution": "    hq.heapify(iterable)\n    return [hq.heappop(iterable) for _ in range(len(iterable))]\n",
        "new_problem": "# Given a list of lists, write a function to sort each sublist and then sort the main list based on the sum of the elements in each sublist.\nimport heapq as hq\n\ndef heap_sort(iterable):\n",
        "new_solution": "    hq.heapify(iterable)\n    return [hq.heappop(iterable) for _ in range(len(iterable))]\n\ndef sort_sublists_and_main(list_of_lists):\n    sorted_sublists = [heap_sort(sublist) for sublist in list_of_lists]\n    sorted_sublists.sort(key=lambda x: sum(x))\n    return sorted_sublists\n",
        "test_code": "assert sort_sublists_and_main([[3, 2, 1], [6, 5, 4], [9, 8, 7]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert sort_sublists_and_main([[10, 20], [1], [5, 5, 5]]) == [[1], [5, 5, 5], [10, 20]]\nassert sort_sublists_and_main([[1], [2], [3]]) == [[1], [2], [3]]"
    },
    {
        "id": 297,
        "raw_problem": "# Write a function to check whether the given amount has no profit and no loss\ndef noprofit_noloss(actual_cost, sale_amount):\n",
        "raw_solution": "  return actual_cost == sale_amount\n",
        "new_problem": "# Given a list of transactions where each transaction is represented by a tuple (actual_cost, sale_amount), write a function to determine the overall profit or loss status of all transactions combined. If the total actual cost equals the total sale amount, return 'No Profit No Loss'. If the total sale amount is greater than the total actual cost, return 'Profit'. Otherwise, return 'Loss'.\ndef overall_profit_loss(transactions):\n",
        "new_solution": "    total_actual_cost = sum(actual_cost for actual_cost, sale_amount in transactions)\n    total_sale_amount = sum(sale_amount for actual_cost, sale_amount in transactions)\n    if total_actual_cost == total_sale_amount:\n        return 'No Profit No Loss'\n    elif total_sale_amount > total_actual_cost:\n        return 'Profit'\n    else:\n        return 'Loss'\n",
        "test_code": "assert overall_profit_loss([(100, 100), (200, 200)]) == 'No Profit No Loss'\nassert overall_profit_loss([(100, 150), (200, 250)]) == 'Profit'\nassert overall_profit_loss([(100, 50), (200, 150)]) == 'Loss'\nassert overall_profit_loss([(100, 100), (200, 150)]) == 'Loss'\nassert overall_profit_loss([(100, 100), (200, 150), (300, 100)]) == 'Loss'"
    },
    {
        "id": 298,
        "raw_problem": "# Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nimport math\ndef wind_chill(v,t):\n",
        "raw_solution": " windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))\n",
        "new_problem": "# Given a list of weather data where each entry is a tuple containing wind velocity in km/h and temperature in Celsius, calculate the average wind chill index for the entire list rounded to the nearest integer.\n\ndef average_wind_chill(weather_data):\n",
        "new_solution": "    total_wind_chill = 0\n    for v, t in weather_data:\n        total_wind_chill += wind_chill(v, t)\n    average_chill = total_wind_chill / len(weather_data)\n    return int(round(average_chill, 0))\n",
        "test_code": "assert average_wind_chill([(10, 5), (20, 10), (30, 15)]) == 8\nassert average_wind_chill([(5, 0), (15, 5), (25, 10)]) == 2\nassert average_wind_chill([(0, 20), (0, 25), (0, 30)]) == 29"
    },
    {
        "id": 299,
        "raw_problem": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names):\n",
        "raw_solution": "  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))\n",
        "new_problem": "# Given a list of lists of names, write a function to sum the total length of the names across all lists after removing the names that start with a lowercase letter from each list.\ndef complex_nam(complex_names):\n",
        "new_solution": "  return sum(sample_nam(names) for names in complex_names)\n",
        "test_code": "assert complex_nam([['Alice', 'bob', 'Charlie'], ['David', 'eve', 'Frank']]) == 22\nassert complex_nam([['George', 'hannah'], ['Ivy', 'jack']]) == 9\nassert complex_nam([['Kyle', 'lisa', 'Mike'], []]) == 8\nassert complex_nam([[], ['Nancy', 'oliver']]) == 5\nassert complex_nam([[], []]) == 0"
    },
    {
        "id": 300,
        "raw_problem": "# Write a function to find the nth nonagonal number.\ndef is_nonagonal(n):\n",
        "raw_solution": "    return int(n * (7 * n - 5) / 2) \n",
        "new_problem": "# Given a list of integers, find the sum of the first 10 nonagonal numbers for each integer in the list. If an integer is less than 1, return 0 for that integer.\ndef sum_of_first_10_nonagonal_numbers(lst):\n",
        "new_solution": "    result = []\n    for num in lst:\n        if num < 1:\n            result.append(0)\n        else:\n            sum_nonagonal = sum(is_nonagonal(i) for i in range(1, 11))\n            result.append(sum_nonagonal)\n    return result\n",
        "test_code": "assert sum_of_first_10_nonagonal_numbers([1, 2, 0, -1]) == [1210, 1210, 0, 0]\nassert sum_of_first_10_nonagonal_numbers([5, 10, 15]) == [1210, 1210, 1210]"
    },
    {
        "id": 301,
        "raw_problem": "# Write a function that checks if a strings contains 'z', except at the start and end of the word.\nimport re\ndef text_match_wordz_middle(text):\n",
        "raw_solution": "    return re.search(r'\\Bz\\B',  text) is not None\n",
        "new_problem": "# Write a function that checks if a string contains the word 'lazy' in any of its words, except at the start and end of the word. The function should also return the number of such occurrences.\nimport re\n\ndef text_match_lazy_middle(text):\n",
        "new_solution": "    matches = re.findall(r'\\Blazy\\B', text)\n    return len(matches), matches\n",
        "test_code": "assert text_match_lazy_middle('The quick brown fox jumps over the lazy dog.') == (0, [])\nassert text_match_lazy_middle('lazy days are here again, but not the lazy.') == (0, [])\nassert text_match_lazy_middle('No lazy words here.') == (0, [])\nassert text_match_lazy_middle('The lazy dog is not really lazy.') == (0, [])"
    },
    {
        "id": 302,
        "raw_problem": "# Write a python function to reverse an array upto a given position.\ndef reverse_Array_Upto_K(input, k):\n",
        "raw_solution": "  return input[k-1::-1] + input[k:]\n",
        "new_problem": "# Write a Python function to reverse multiple segments of an array. The function should take an array and a list of positions. Each position in the list indicates the end of a segment that needs to be reversed. The segments are processed in the order they appear in the list. If a position is out of bounds, it should be ignored.\ndef reverse_Multiple_Segments(input, positions):\n",
        "new_solution": "  for pos in positions: \n    if pos > 0 and pos <= len(input): \n      input = reverse_Array_Upto_K(input, pos) \n  return input\n",
        "test_code": "assert reverse_Multiple_Segments([1, 2, 3, 4, 5], [2, 4]) == [4, 3, 1, 2, 5]\nassert reverse_Multiple_Segments([1, 2, 3, 4, 5], [3, 5]) == [5, 4, 1, 2, 3]\nassert reverse_Multiple_Segments([1, 2, 3, 4, 5], [6, 7]) == [1, 2, 3, 4, 5]\nassert reverse_Multiple_Segments([1, 2, 3, 4, 5], [1, 3, 5]) == [5, 4, 1, 2, 3]"
    },
    {
        "id": 303,
        "raw_problem": "# Write a function to add a dictionary to the tuple. The output should be a tuple.\ndef add_dict_to_tuple(test_tup, test_dict):\n",
        "raw_solution": "  return test_tup + (test_dict, )\n",
        "new_problem": "# Given a list of tuples and a list of dictionaries, write a function to add each dictionary to the corresponding tuple in the list. If the number of tuples and dictionaries do not match, return an empty list. The output should be a list of tuples where each tuple includes the original elements plus the corresponding dictionary.\ndef add_dicts_to_tuples(tuples_list, dicts_list):\n",
        "new_solution": "  if len(tuples_list) != len(dicts_list):\n    return []\n  return [add_dict_to_tuple(tup, dic) for tup, dic in zip(tuples_list, dicts_list)]\n",
        "test_code": "assert add_dicts_to_tuples([(1, 2), (3, 4)], [{'a': 1}, {'b': 2}]) == [(1, 2, {'a': 1}), (3, 4, {'b': 2})]\nassert add_dicts_to_tuples([(1, 2)], [{'a': 1}, {'b': 2}]) == []\nassert add_dicts_to_tuples([], []) == []\nassert add_dicts_to_tuples([(1, 2), (3, 4)], [{'a': 1}]) == []"
    },
    {
        "id": 304,
        "raw_problem": "# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\ndef maxAverageOfPath(cost):\n",
        "raw_solution": "  N = len(cost)\n  dp = [[0 for _ in range(N + 1)] for _ in range(N + 1)]\n  dp[0][0] = cost[0][0]\n  for i in range(1, N):\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  for j in range(1, N):\n    dp[0][j] = dp[0][j - 1] + cost[0][j]\n  for i in range(1, N):\n    for j in range(1, N):\n      dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n  # all paths are of length 2 * N - 1, so just divide by that\n  return dp[N - 1][N - 1] / (2 * N - 1)\n",
        "new_problem": "# Given a 3D matrix of size N*N*N where each cell is associated with a specific cost, find the path with the maximum average cost from the top-left cell of the front face to the bottom-right cell of the back face. A path can move right, down, or into the next depth layer. The average cost is computed as the total cost divided by the number of cells visited in the path.\ndef maxAverageOf3DPath(cost):\n",
        "new_solution": "  N = len(cost)\n  max_averages = [[0 for _ in range(N)] for _ in range(N)]\n  for i in range(N):\n    for j in range(N):\n      max_averages[i][j] = maxAverageOfPath([[cost[k][i][j] for k in range(N)] for _ in range(N)])\n  return maxAverageOfPath(max_averages)\n",
        "test_code": "assert maxAverageOf3DPath([[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[9, 8, 7], [6, 5, 4], [3, 2, 1]], [[1, 2, 3], [4, 5, 6], [7, 8, 9]]]) == 6.279999999999999"
    },
    {
        "id": 305,
        "raw_problem": "# The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\ndef filter_data(students,h,w):\n",
        "raw_solution": "    return {k: s for k, s in students.items() if s[0] >= h and s[1] >= w}\n",
        "new_problem": "# Given a list of dictionaries, each representing a class with a class name as the key and a dictionary of students as the value. Each student dictionary has a student name as the key and a tuple of float (student_height, student_weight) as the value. Additionally, there are two dictionaries: one for minimal height requirements and one for minimal weight requirements, where the keys are class names and the values are the respective minimum height and weight. Write a function to filter out students in each class that do not meet the minimum height and weight requirements for their class.\ndef filter_students_by_class(classes, min_heights, min_weights):\n",
        "new_solution": "    filtered_classes = {}\n    for class_name, students in classes.items():\n        min_height = min_heights.get(class_name, 0)\n        min_weight = min_weights.get(class_name, 0)\n        filtered_students = filter_data(students, min_height, min_weight)\n        if filtered_students:\n            filtered_classes[class_name] = filtered_students\n    return filtered_classes\n",
        "test_code": "assert filter_students_by_class({'ClassA': {'Alice': (160, 55), 'Bob': (150, 60)},'ClassB': {'Charlie': (170, 70), 'David': (165, 65)}}, {'ClassA': 155, 'ClassB': 168}, {'ClassA': 58, 'ClassB': 68}) == {'ClassB': {'Charlie': (170, 70)}}\nassert filter_students_by_class({'ClassA': {'Alice': (160, 55), 'Bob': (150, 60)},'ClassB': {'Charlie': (170, 70), 'David': (165, 65)}}, {'ClassA': 140, 'ClassB': 160}, {'ClassA': 50, 'ClassB': 60}) == {'ClassA': {'Alice': (160, 55), 'Bob': (150, 60)},'ClassB': {'Charlie': (170, 70), 'David': (165, 65)}}"
    },
    {
        "id": 306,
        "raw_problem": "# The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\nfrom operator import eq\ndef count_same_pair(nums1, nums2):\n",
        "raw_solution": "    result = sum(map(eq, nums1, nums2))\n    return result\n",
        "new_problem": "# Given a list of pairs of lists, each pair containing two lists of the same length, write a function to count the total number of indices where the corresponding elements in the lists of each pair are the same. The function should return the total count for all pairs.\n\ndef total_count_same_pairs(list_of_pairs):\n",
        "new_solution": "    total_count = 0\n    for pair in list_of_pairs:\n        total_count += count_same_pair(pair[0], pair[1])\n    return total_count\n",
        "test_code": "assert total_count_same_pairs([[[1, 2, 3], [1, 2, 4]], [[5, 5, 5], [5, 5, 5]]]) == 5\nassert total_count_same_pairs([[[1, 2], [2, 1]], [[3, 4], [3, 4]]]) == 2\nassert total_count_same_pairs([[[1, 1, 1], [2, 2, 2]], [[3, 3, 3], [3, 3, 3]]]) == 3\nassert total_count_same_pairs([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [7, 8, 9]]]) == 3\nassert total_count_same_pairs([[[1], [1]], [[2], [3]]]) == 1"
    },
    {
        "id": 307,
        "raw_problem": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power):\n",
        "raw_solution": "    return sum([int(i) for i in str(pow(base, power))])\n",
        "new_problem": "# Write a function that takes a list of tuples, where each tuple contains a base and a power, and calculates the sum of all digits of the base raised to the specified power for each tuple in the list. Finally, return the total sum of all these sums.\ndef total_power_base_sum(tuples_list):\n",
        "new_solution": "    total_sum = 0\n    for base, power in tuples_list:\n        total_sum += power_base_sum(base, power)\n    return total_sum\n",
        "test_code": "assert total_power_base_sum([(2, 3), (3, 2), (4, 4)]) == 30"
    },
    {
        "id": 308,
        "raw_problem": "# Write a function to extract values between quotation marks \" \" of the given string.\nimport re\ndef extract_quotation(text1):\n",
        "raw_solution": "  return re.findall(r'\"(.*?)\"', text1)\n",
        "new_problem": "# Given a list of strings, extract all values between quotation marks from each string and return a list of lists where each sublist contains the extracted values for the corresponding string.\ndef extract_all_quotations(texts):\n",
        "new_solution": "    return [extract_quotation(text) for text in texts]\n",
        "test_code": "assert extract_all_quotations(['\"hello\" world', 'this is a \"test\"', '\"multiple\" \"quotes\" here']) == [['hello'], ['test'], ['multiple', 'quotes']]"
    },
    {
        "id": 309,
        "raw_problem": "# Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\ndef multiply_elements(test_tup):\n",
        "raw_solution": "  return tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n",
        "new_problem": "# Write a function that takes as input a list of tuples, where each tuple contains a sequence of numbers. The function should return a list of tuples where each tuple is the result of applying the 'multiply_elements' function to the corresponding tuple in the input list. Additionally, the function should also return the sum of all elements in the resulting tuples.\ndef process_tuples(list_of_tuples):\n",
        "new_solution": "    def multiply_elements(test_tup):\n        return tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n    \n    result_tuples = [multiply_elements(tup) for tup in list_of_tuples]\n    total_sum = sum(sum(tup) for tup in result_tuples)\n    return result_tuples, total_sum\n",
        "test_code": "assert process_tuples([(1, 2, 3), (4, 5, 6)]) == ([(2, 6), (20, 30)], 58)\nassert process_tuples([(1, 1, 1), (2, 2, 2)]) == ([(1, 1), (4, 4)], 10)\nassert process_tuples([(0, 1, 2), (3, 4, 5)]) == ([(0, 2), (12, 20)], 34)"
    },
    {
        "id": 310,
        "raw_problem": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1,lst2):\n",
        "raw_solution": "  return [a + b for a, b in zip(lst1, lst2)] \n",
        "new_problem": "# Given a list of lists, where each sublist contains two lists of equal length, write a function that returns a new list of lists where each sublist contains the element-wise sums of the corresponding lists in the input. For example, given [[[1, 2], [3, 4]], [[5, 6], [7, 8]]], the function should return [[4, 6], [12, 14]].\ndef sum_lists_of_lists(list_of_lists):\n",
        "new_solution": "    return [sum_list(lst1, lst2) for lst1, lst2 in list_of_lists]\n",
        "test_code": "assert sum_lists_of_lists([[[1, 2], [3, 4]], [[5, 6], [7, 8]]]) == [[4, 6], [12, 14]]\nassert sum_lists_of_lists([[[0, 0], [0, 0]], [[1, 1], [1, 1]]]) == [[0, 0], [2, 2]]\nassert sum_lists_of_lists([[[10, 20], [30, 40]], [[50, 60], [70, 80]]]) == [[40, 60], [120, 140]]"
    },
    {
        "id": 311,
        "raw_problem": "# Write a function to remove consecutive duplicates of a given list.\nfrom itertools import groupby\ndef consecutive_duplicates(nums):\n",
        "raw_solution": "    return [key for key, _ in groupby(nums)] \n",
        "new_problem": "# Given a list of lists, remove consecutive duplicates from each sublist and then return a new list that contains the sum of the elements of each sublist.\nfrom itertools import groupby\n\ndef consecutive_duplicates(nums):\n",
        "new_solution": "    return [key for key, _ in groupby(nums)]\n\ndef sum_of_sublists_without_duplicates(list_of_lists):\n    return [sum(consecutive_duplicates(sublist)) for sublist in list_of_lists]\n",
        "test_code": "assert sum_of_sublists_without_duplicates([[1, 1, 2, 2, 3], [4, 4, 5, 5, 5], [6, 7, 7, 8]]) == [6, 9, 21]"
    },
    {
        "id": 312,
        "raw_problem": "# Write a function to find the lateral surface area of a cone given radius r and the height h.\nimport math\ndef lateralsurface_cone(r,h):\n",
        "raw_solution": "  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
        "new_problem": "# Given a list of cones, each represented by a tuple containing its radius and height, write a function to calculate the total lateral surface area of all the cones.\ndef total_lateral_surface_area(cones):\n",
        "new_solution": "  total_area = 0\n  for cone in cones:\n    r, h = cone\n    total_area += lateralsurface_cone(r, h)\n  return total_area\n",
        "test_code": "assert total_lateral_surface_area([(3, 4), (5, 12)]) == 251.32741228718345\nassert total_lateral_surface_area([(1, 1)]) == 4.442882938158366\nassert total_lateral_surface_area([]) == 0"
    },
    {
        "id": 313,
        "raw_problem": "# Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nimport re\ndef replace_specialchar(text):\n",
        "raw_solution": " return re.sub(\"[ ,.]\", \":\", text)\n",
        "new_problem": "# Given a list of strings, replace all occurrences of spaces, commas, or dots with a colon in each string, then concatenate all the modified strings into a single string with each original string separated by a newline character. Finally, replace all occurrences of the colon with a dash in the resulting concatenated string.\n\ndef process_strings(string_list):\n",
        "new_solution": "    modified_strings = [replace_specialchar(s) for s in string_list]\n    concatenated_string = '\\n'.join(modified_strings)\n    final_string = re.sub(\":\", \"-\", concatenated_string)\n    return final_string\n",
        "test_code": "assert process_strings(['hello world', 'goodbye, world.', 'hi.']) == 'hello-world\\ngoodbye--world-\\nhi-'"
    },
    {
        "id": 314,
        "raw_problem": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(A, x):\n",
        "raw_solution": "    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\n",
        "new_problem": "# Given a sorted array of integers and a target sum, find two distinct indices in the array such that the elements at these indices add up to the target sum. If such indices exist, return them in a list; otherwise, return an empty list.\ndef find_two_indices_for_sum(A, target_sum):\n",
        "new_solution": "    for i in range(len(A)):\n        complement = target_sum - A[i]\n        complement_index = find_first_occurrence(A, complement)\n        if complement_index != -1 and complement_index != i:\n            return [i, complement_index]\n    return []\n",
        "test_code": "assert find_two_indices_for_sum([1, 2, 3, 4, 5], 9) == [3, 4]\nassert find_two_indices_for_sum([1, 2, 3, 4, 5], 7) == [1, 4]\nassert find_two_indices_for_sum([1, 2, 3, 4, 5], 10) == []\nassert find_two_indices_for_sum([1, 3, 3, 4, 5], 6) == [0, 4]"
    },
    {
        "id": 315,
        "raw_problem": "# Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\ndef sum_Of_Subarray_Prod(arr):\n",
        "raw_solution": "    result = 0  # final result\n    partial = 0 # partial sum\n    # stimulate the recursion\n    while arr != []:\n        partial = arr[-1] * (1 + partial)\n        result += partial\n        arr.pop()\n    return result\n",
        "new_problem": "# Given a list of lists, where each sublist contains integers, write a Python function to find the sum of the products of all possible sublists for each sublist in the main list. Then, return the sum of these sums.\ndef sum_Of_Subarray_Prod_For_List(list_of_lists):\n",
        "new_solution": "    total_sum = 0\n    for sublist in list_of_lists:\n        total_sum += sum_Of_Subarray_Prod(sublist)\n    return total_sum\n",
        "test_code": "assert sum_Of_Subarray_Prod_For_List([[1, 2], [3, 4]]) == 24\nassert sum_Of_Subarray_Prod_For_List([[1], [2, 3], [4, 5, 6]]) == 197\nassert sum_Of_Subarray_Prod_For_List([[], [1, 1, 1], [2, 2, 2, 2]]) == 58"
    },
    {
        "id": 316,
        "raw_problem": "# Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\ndef toggle_middle_bits(n):\n",
        "raw_solution": "    binary = bin(n)[2:]\n    toggled = ''.join(['0' if i == '1' else '1' for i in binary[1:-1]])\n    return int(binary[0] + toggled + binary[-1], 2)\n",
        "new_problem": "# Given a list of numbers, write a Python function to toggle the bits of each number except the first and the last bit, and then sum the results. Return the final sum.\ndef sum_toggled_middle_bits(numbers):\n",
        "new_solution": "    return sum(toggle_middle_bits(num) for num in numbers)\n",
        "test_code": "assert sum_toggled_middle_bits([5, 7, 10]) == 24\nassert sum_toggled_middle_bits([15, 31, 63]) == 59\nassert sum_toggled_middle_bits([1, 2, 4]) == 11"
    },
    {
        "id": 317,
        "raw_problem": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nimport bisect\ndef left_insertion(a, x):\n",
        "raw_solution": "    return bisect.bisect_left(a, x)\n",
        "new_problem": "# Given a list of sorted lists, write a function to merge them into a single sorted list. The function should efficiently insert elements from each list into the merged list using the left insertion point to maintain the sorted order.\nimport bisect\n\ndef merge_sorted_lists(lists):\n",
        "new_solution": "    merged_list = []\n    for lst in lists:\n        for item in lst:\n            bisect.insort_left(merged_list, item)\n    return merged_list\n",
        "test_code": "assert merge_sorted_lists([[1, 3, 5], [2, 4, 6], [0, 7, 8]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8]\nassert merge_sorted_lists([[10], [5], [20]]) == [5, 10, 20]\nassert merge_sorted_lists([[], [1], [0]]) == [0, 1]"
    },
    {
        "id": 318,
        "raw_problem": "# Write a function to check whether the given string is starting with a vowel or not using regex.\nimport re \ndef check_str(string):\n",
        "raw_solution": "    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return re.search(regex, string)\n",
        "new_problem": "# Given a list of strings, write a function to count how many strings in the list start with a vowel and how many start with a consonant. Use the provided function to check if a string starts with a vowel.\ndef count_vowels_and_consonants(strings):\n",
        "new_solution": "    vowel_count = 0\n    consonant_count = 0\n    for string in strings:\n        if check_str(string):\n            vowel_count += 1\n        else:\n            consonant_count += 1\n    return vowel_count, consonant_count\n",
        "test_code": "assert count_vowels_and_consonants(['apple', 'banana', 'cherry', 'date', 'elephant']) == (2, 3)\nassert count_vowels_and_consonants(['Python', 'Java', 'Ruby', 'C++', 'Swift']) == (0, 5)\nassert count_vowels_and_consonants(['umbrella', 'igloo', 'octopus', 'unicorn', 'owl']) == (5, 0)\nassert count_vowels_and_consonants(['sky', 'tree', 'mountain', 'river', 'desert']) == (0, 5)"
    },
    {
        "id": 319,
        "raw_problem": "# Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nimport math \ndef find_Index(n):\n",
        "raw_solution": "    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)\n",
        "new_problem": "# Write a Python function to find the sum of the indices of the smallest triangular numbers with n digits for a list of n values. For example, if the list is [2, 3], the function should return the sum of the indices of the smallest triangular numbers with 2 and 3 digits respectively.\ndef sum_of_indices(n_list):\n",
        "new_solution": "    return sum(find_Index(n) for n in n_list)\n",
        "test_code": "assert sum_of_indices([2, 3]) == 18\nassert sum_of_indices([1, 4]) == 46\nassert sum_of_indices([5, 6]) == 588\nassert sum_of_indices([7, 8]) == 5886"
    },
    {
        "id": 320,
        "raw_problem": "# Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\ndef tuple_to_dict(test_tup):\n",
        "raw_solution": "  return dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n",
        "new_problem": "# Given a list of tuples, where each tuple contains an even number of elements, write a function to convert each tuple to a key-value dictionary using adjacent elements. Then, merge all the dictionaries into a single dictionary, ensuring that if there are duplicate keys, the value from the last tuple should overwrite the previous ones.\ndef merge_tuples_to_dict(list_of_tuples):\n",
        "new_solution": "    merged_dict = {}\n    for tup in list_of_tuples:\n        temp_dict = tuple_to_dict(tup)\n        merged_dict.update(temp_dict)\n    return merged_dict\n",
        "test_code": "assert merge_tuples_to_dict([(1, 'a', 2, 'b'), (3, 'c', 4, 'd'), (5, 'e', 1, 'f')]) == {1: 'f', 2: 'b', 3: 'c', 4: 'd', 5: 'e'}\nassert merge_tuples_to_dict([('x', 1, 'y', 2), ('z', 3, 'x', 4)]) == {'x': 4, 'y': 2, 'z': 3}\nassert merge_tuples_to_dict([(10, 20, 30, 40), (50, 60, 70, 80)]) == {10: 20, 30: 40, 50: 60, 70: 80}"
    },
    {
        "id": 321,
        "raw_problem": "# Write a python function to check whether all the characters are same or not.\ndef all_Characters_Same(s) :\n",
        "raw_solution": "    return all(ch == s[0] for ch in s[1:])\n",
        "new_problem": "# Given a list of strings, write a function to determine if all strings in the list have the same characters throughout each string. Additionally, the function should return a list of boolean values indicating whether each string in the list meets this criterion.\ndef check_all_strings(strings):\n",
        "new_solution": "    return [all_Characters_Same(s) for s in strings]\n",
        "test_code": "assert check_all_strings(['aaaa', 'bbbb', 'cccc']) == [True, True, True]\nassert check_all_strings(['abcd', 'efgh', 'ijkl']) == [False, False, False]\nassert check_all_strings(['aaaa', 'bbbb', 'abcd']) == [True, True, False]\nassert check_all_strings(['', 'bbbb', 'cccc']) == [True, True, True]"
    },
    {
        "id": 322,
        "raw_problem": "# Write a function to caluclate the area of a tetrahedron.\nimport math\ndef area_tetrahedron(side):\n",
        "raw_solution": "  return math.sqrt(3)*(side*side)\n",
        "new_problem": "# Given a list of side lengths of tetrahedrons, write a function to calculate the total area of all the tetrahedrons.\nimport math\n\ndef area_tetrahedron(side):\n",
        "new_solution": "  return math.sqrt(3)*(side*side)\n\ndef total_area_tetrahedrons(side_lengths):\n  total_area = 0\n  for side in side_lengths:\n    total_area += area_tetrahedron(side)\n  return total_area\n",
        "test_code": "assert total_area_tetrahedrons([1, 2, 3]) == 24.248711305964278\nassert total_area_tetrahedrons([0, 0, 0]) == 0\nassert total_area_tetrahedrons([5]) == 43.30127018922193"
    },
    {
        "id": 323,
        "raw_problem": "# Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\ndef rotate_right(l, m):\n",
        "raw_solution": "  return l[-m:] + l[:-m]\n",
        "new_problem": "# Given a list of lists, rotate each sublist by a specified number of items to the right direction. The number of rotations for each sublist is given in another list, where the index of the number of rotations corresponds to the index of the sublist in the list of lists.\ndef rotate_sublists(list_of_lists, rotations):\n",
        "new_solution": "    return [rotate_right(sublist, rotations[i]) for i, sublist in enumerate(list_of_lists)]\n",
        "test_code": "assert rotate_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9]], [1, 2, 3]) == [[3, 1, 2], [5, 6, 4], [7, 8, 9]]\nassert rotate_sublists([[10, 20], [30, 40, 50]], [0, 1]) == [[10, 20], [50, 30, 40]]\nassert rotate_sublists([[1, 2, 3, 4], [5, 6, 7, 8]], [2, 0]) == [[3, 4, 1, 2], [5, 6, 7, 8]]"
    },
    {
        "id": 324,
        "raw_problem": "# Write a function to check if the given tuple has any none value or not.\ndef check_none(test_tup):\n",
        "raw_solution": "  return any(ele is None for ele in test_tup)\n",
        "new_problem": "# Given a list of tuples, write a function to count how many tuples contain at least one None value.\ndef count_tuples_with_none(tuples_list):\n",
        "new_solution": "    return sum(check_none(tup) for tup in tuples_list)\n",
        "test_code": "assert count_tuples_with_none([(1, 2, 3), (None, 2), (3, None, 5)]) == 2\nassert count_tuples_with_none([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == 0\nassert count_tuples_with_none([(None,), (None, None), (1, None)]) == 3\nassert count_tuples_with_none([]) == 0\nassert count_tuples_with_none([(1, 2, 3, None), (4, 5, 6), (7, 8, None, 9)]) == 2"
    },
    {
        "id": 325,
        "raw_problem": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum):\n",
        "raw_solution": "    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\n",
        "new_problem": "# Write a function to find the smallest range of numbers from startnum to endnum where every number in the range is divisible by every digit it contains. If no such range exists, return an empty list. The function should take two additional parameters: step and max_attempts. The step parameter defines the increment between startnum and endnum, and max_attempts defines the maximum number of attempts to find such a range. If a valid range is not found within max_attempts, the function should return an empty list.\ndef find_smallest_divisible_range(startnum, endnum, step, max_attempts):\n",
        "new_solution": "    for attempt in range(max_attempts): \n        range_start = startnum + attempt * step \n        range_end = range_start + step \n        if range_end > endnum: \n            break \n        result = divisible_by_digits(range_start, range_end) \n        if result: \n            return [range_start, range_end] \n    return []\n",
        "test_code": "assert find_smallest_divisible_range(10, 100, 10, 5) == [10, 20]\nassert find_smallest_divisible_range(100, 200, 20, 3) == [100, 120]\nassert find_smallest_divisible_range(200, 300, 30, 2) == [200, 230]\nassert find_smallest_divisible_range(300, 400, 15, 10) == [300, 315]"
    },
    {
        "id": 326,
        "raw_problem": "# Write a function to put spaces between words starting with capital letters in a given string.\nimport re\ndef capital_words_spaces(str1):\n",
        "raw_solution": "  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)\n",
        "new_problem": "# Given a list of strings, write a function to process each string such that spaces are put between words starting with capital letters, and then concatenate all processed strings into a single string with each original string separated by a newline character.\n\ndef process_and_concatenate_strings(string_list):\n",
        "new_solution": "  processed_strings = [capital_words_spaces(s) for s in string_list]\n  return '\\n'.join(processed_strings)\n",
        "test_code": "assert process_and_concatenate_strings(['HelloWorld', 'ThisIsATest', 'PythonProgramming']) == 'Hello World\\nThis Is ATest\\nPython Programming'"
    },
    {
        "id": 327,
        "raw_problem": "# Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\ndef sort_numeric_strings(nums_str):\n",
        "raw_solution": "    return sorted([int(x) for x in nums_str])\n",
        "new_problem": "# Given a list of lists of strings of numbers, write a function to sort each sublist numerically and then return a list of the sums of the sorted sublists.\ndef sort_and_sum_sublists(nums_str_lists):\n",
        "new_solution": "    return [sum(sort_numeric_strings(sublist)) for sublist in nums_str_lists]\n",
        "test_code": "assert sort_and_sum_sublists([['3', '1', '2'], ['5', '4'], ['6']]) == [6, 9, 6]\nassert sort_and_sum_sublists([['10', '20', '30'], ['100', '200'], ['1000']]) == [60, 300, 1000]\nassert sort_and_sum_sublists([['9', '8', '7'], ['6', '5'], ['4']]) == [24, 11, 4]\nassert sort_and_sum_sublists([['1', '1', '1'], ['2', '2'], ['3']]) == [3, 4, 3]"
    },
    {
        "id": 328,
        "raw_problem": "# Write a function to add the given tuple to the given list.\ndef add_tuple(test_list, test_tup):\n",
        "raw_solution": "  return test_list + list(test_tup)\n",
        "new_problem": "# Given a list of tuples, write a function to merge all tuples into a single list.\ndef merge_tuples(tuple_list):\n",
        "new_solution": "    result = []\n    for tup in tuple_list:\n        result = add_tuple(result, tup)\n    return result\n",
        "test_code": "assert merge_tuples([(1, 2), (3, 4), (5, 6)]) == [1, 2, 3, 4, 5, 6]\nassert merge_tuples([('a', 'b'), ('c', 'd')]) == ['a', 'b', 'c', 'd']\nassert merge_tuples([(1,), (2,), (3,)]) == [1, 2, 3]\nassert merge_tuples([]) == []"
    },
    {
        "id": 329,
        "raw_problem": "# Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\ndef check_min_heap_helper(arr, i):\n",
        "raw_solution": "    if 2 * i + 2 > len(arr):\n      return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or  \\\n                (arr[i] <= arr[2 * i + 2] and \\\n                 check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)\n",
        "new_problem": "# Given a list of arrays, determine if each array represents a min heap. Return a list of boolean values where each value indicates whether the corresponding array is a min heap or not.\ndef check_min_heaps(arrays):\n",
        "new_solution": "    return [check_min_heap(arr) for arr in arrays]\n",
        "test_code": "assert check_min_heaps([[1, 2, 3, 4, 5], [5, 4, 3, 2, 1], [1, 3, 2, 4, 5]]) == [True, False, True]"
    },
    {
        "id": 330,
        "raw_problem": "# Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\ndef jacobsthal_num(n):\n",
        "raw_solution": "    dp = [0] * (n + 1) \n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n+1): \n        dp[i] = dp[i - 1] + 2 * dp[i - 2] \n    return dp[n]\n",
        "new_problem": "# Write a function to find the sum of the first 'm' Jacobsthal numbers and the sum of the next 'm' Jacobsthal numbers. For example, if 'm' is 3, you need to find the sum of the first 3 Jacobsthal numbers (0, 1, 1) and the sum of the next 3 Jacobsthal numbers (3, 5, 11).\ndef sum_of_jacobsthal_segments(m):\n",
        "new_solution": "    # Calculate the sum of the first m Jacobsthal numbers, the first Jacobsthal number is 0\u3002\n    first_m_sum = 0 \n    first_m_sum = sum(jacobsthal_num(i) for i in range(1, m))\n    # Calculate the sum of the next m Jacobsthal numbers\n    next_m_sum = sum(jacobsthal_num(i) for i in range(m, 2 * m))\n    return first_m_sum, next_m_sum\n\n",
        "test_code": "assert sum_of_jacobsthal_segments(3) == (2, 19)\nassert sum_of_jacobsthal_segments(5) == (10, 331)\nassert sum_of_jacobsthal_segments(1) == (0, 1)"
    },
    {
        "id": 331,
        "raw_problem": "# Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\ndef min_k(test_list, K):\n",
        "raw_solution": "  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) \n",
        "new_problem": "# Given a list of tuple lists, each containing tuples with two elements (name, score), write a function to find the top 3 students with the lowest scores from each tuple list and return a list of these students sorted by their scores in ascending order.\ndef top_3_students(tuple_lists):\n",
        "new_solution": "  all_students = []\n  for test_list in tuple_lists:\n    all_students.extend(min_k(test_list, 3))\n  return sorted(all_students, key=lambda x: x[1])\n",
        "test_code": "assert top_3_students([[('Alice', 80), ('Bob', 90), ('Charlie', 70), ('David', 60), ('Eve', 50)], [('Frank', 40), ('Grace', 30), ('Heidi', 20), ('Ivan', 10), ('Judy', 5)]]) == [('Judy', 5), ('Ivan', 10), ('Heidi', 20), ('Eve', 50), ('David', 60), ('Charlie', 70)]"
    },
    {
        "id": 332,
        "raw_problem": "# We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\ndef extract_index_list(l1, l2, l3):\n",
        "raw_solution": "    return [a for a, b, c in zip(l1, l2, l3) if a == b == c]\n",
        "new_problem": "# Given a list of lists, where each sublist contains integers, find all common elements that appear in all sublists under the same index. The function should return a list of these common elements. If the sublists are not of equal length, the function should handle it by ignoring the extra elements in the longer sublists.\ndef find_common_elements_in_lists(list_of_lists):\n",
        "new_solution": "    if not list_of_lists:\n        return []\n    min_length = min(len(lst) for lst in list_of_lists)\n    common_elements = []\n    for i in range(min_length):\n        elements = [lst[i] for lst in list_of_lists]\n        if all(element == elements[0] for element in elements):\n            common_elements.append(elements[0])\n    return common_elements\n",
        "test_code": "assert find_common_elements_in_lists([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [1, 2, 3]\nassert find_common_elements_in_lists([[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == [1, 2]\nassert find_common_elements_in_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == []\nassert find_common_elements_in_lists([[1, 2, 3], [1, 2, 3], [1, 2, 4]]) == [1, 2]"
    },
    {
        "id": 333,
        "raw_problem": "# Write a function to find the second smallest number in a list.\ndef second_smallest(numbers):\n",
        "raw_solution": "  sorted_set = sorted(set(numbers))\n  if len(sorted_set) < 2:\n    return None\n  return sorted_set[1]\n",
        "new_problem": "# Given a list of lists, write a function to find the second smallest number in each sublist and return the sum of these second smallest numbers.\ndef sum_of_second_smallest(list_of_lists):\n",
        "new_solution": "    def second_smallest(numbers):\n        sorted_set = sorted(set(numbers))\n        if len(sorted_set) < 2:\n            return 0\n        return sorted_set[1]\n\n    return sum(second_smallest(sublist) for sublist in list_of_lists)\n",
        "test_code": "assert sum_of_second_smallest([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 15\nassert sum_of_second_smallest([[10], [20, 30], [40, 50, 60]]) == 80\nassert sum_of_second_smallest([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == 0\nassert sum_of_second_smallest([[], [1], [1, 2]]) == 2\nassert sum_of_second_smallest([[5, 3, 8], [9, 2, 7], [6, 4, 1]]) == 16"
    },
    {
        "id": 334,
        "raw_problem": "# Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\ndef count_reverse_pairs(test_list):\n",
        "raw_solution": "  return sum(test_list[i+1:].count(s[::-1]) for i, s in enumerate(test_list))\n",
        "new_problem": "# Given a list of strings, write a function to find the maximum number of pairs of reverse strings that can be formed by removing any number of strings from the list. Each string can only be used once in a pair.\ndef max_reverse_pairs(test_list):\n",
        "new_solution": "    count = 0\n    while True:\n        pairs = count_reverse_pairs(test_list)\n        if pairs == 0:\n            break\n        count += 1\n        test_list.remove(test_list[0])\n    return count\n",
        "test_code": "assert max_reverse_pairs(['abc', 'cba', 'xyz', 'zyx']) == 3\nassert max_reverse_pairs(['ab', 'ba', 'cd', 'dc', 'ef', 'fe']) == 5\nassert max_reverse_pairs(['pqr', 'stu', 'vwx', 'yz']) == 0\nassert max_reverse_pairs(['123', '321', '456', '654', '789', '987']) == 5\nassert max_reverse_pairs(['a', 'a', 'b', 'b']) == 3"
    },
    {
        "id": 335,
        "raw_problem": "# Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\ndef unique_sublists(list1):\n",
        "raw_solution": "    return {tuple(x): list1.count(x) for x in list1}\n",
        "new_problem": "# Given a list of lists, where each sublist contains a list of lists, write a function to count the occurrences of each unique sublist across all sublists. The function should return a dictionary where every unique sublist (converted to a tuple) is a key, and the value is the total number of its occurrences across all sublists.\ndef count_unique_sublists(list_of_lists):\n",
        "new_solution": "    result = {}\n    for sublist in list_of_lists:\n        for sub_sublist in sublist:\n            tuple_sublist = tuple(sub_sublist)\n            if tuple_sublist in result:\n                result[tuple_sublist] += 1\n            else:\n                result[tuple_sublist] = 1\n    return result\n",
        "test_code": "assert count_unique_sublists([[[1, 2], [3, 4]], [[1, 2], [5, 6]], [[3, 4], [1, 2]]]) == {(1, 2): 3, (3, 4): 2, (5, 6): 1}\nassert count_unique_sublists([[[1], [2]], [[2], [1]], [[1], [1]]]) == {(1,): 4, (2,): 2}\nassert count_unique_sublists([[[], []], [[], []]]) == {(): 4}"
    },
    {
        "id": 336,
        "raw_problem": "# Write a function to check whether a given string is a decimal number with a precision of 2.\ndef is_decimal(num):\n",
        "raw_solution": "    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    return dnumre.search(num) is not None\n",
        "new_problem": "# Write a function to validate a list of strings, ensuring that each string is either a decimal number with a precision of 2 or a valid email address. The function should return a list of boolean values indicating whether each string in the input list meets the criteria.\ndef validate_list(lst):\n",
        "new_solution": "    def is_email(email):\n        import re\n        emailre = re.compile(r\"\"\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\"\")\n        return emailre.search(email) is not None\n\n    results = []\n    for item in lst:\n        if is_decimal(item) or is_email(item):\n            results.append(True)\n        else:\n            results.append(False)\n    return results\n",
        "test_code": "assert validate_list(['123.45', 'user@example.com', 'abc']) == [True, True, False]\nassert validate_list(['123', 'user@domain', '123.456']) == [True, False, False]\nassert validate_list(['123.4', 'user.name@example.co.uk', '123.']) == [True, True, False]"
    },
    {
        "id": 337,
        "raw_problem": "# Write a python function to check whether a list of numbers contains only one distinct element or not.\ndef unique_Element(arr):\n",
        "raw_solution": "    return arr.count(arr[0]) == len(arr)\n",
        "new_problem": "# Given a list of lists, write a Python function to determine if each sublist contains only one distinct element. Return a list of boolean values where each value corresponds to whether the respective sublist contains only one distinct element or not.\ndef unique_Elements(arr_of_arrs):\n",
        "new_solution": "    return [unique_Element(sublist) for sublist in arr_of_arrs]\n",
        "test_code": "assert unique_Elements([[1, 1, 1], [2, 2], [3, 3, 3, 3]]) == [True, True, True]\nassert unique_Elements([[1, 2, 1], [2, 2], [3, 3, 3, 3]]) == [False, True, True]\nassert unique_Elements([[1, 1, 1], [2, 2, 3], [3, 3, 3, 3]]) == [True, False, True]\nassert unique_Elements([[1, 1, 1], [2, 2], [3, 4, 3, 3]]) == [True, True, False]"
    },
    {
        "id": 338,
        "raw_problem": "# Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\ndef check_monthnumber_number(monthnum3):\n",
        "raw_solution": "  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11\n",
        "new_problem": "# Write a function to determine if a given year is a 'special year'. A 'special year' is defined as a year where at least three of the following conditions are met: 1) February has 29 days (leap year), 2) April has 30 days, 3) June has 30 days, 4) September has 30 days, 5) November has 30 days. The function should take a year as input and return True if the year is 'special', otherwise False.\ndef is_leap_year(year): return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)\n\ndef is_special_year(year):\n",
        "new_solution": "  conditions_met = 0\n  if is_leap_year(year): conditions_met += 1\n  if check_monthnumber_number(4): conditions_met += 1\n  if check_monthnumber_number(6): conditions_met += 1\n  if check_monthnumber_number(9): conditions_met += 1\n  if check_monthnumber_number(11): conditions_met += 1\n  return conditions_met >= 3\n",
        "test_code": "assert is_special_year(2000) == True"
    },
    {
        "id": 339,
        "raw_problem": "# Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\ndef find_min_diff(arr,n):\n",
        "raw_solution": "    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff \n",
        "new_problem": "# Given a list of arrays, write a Python function to find the minimum difference between any two elements across all arrays. If the list is empty, return -1.\ndef find_min_diff_across_arrays(arrays):\n",
        "new_solution": "    if not arrays:\n        return -1\n    min_diffs = [find_min_diff(arr, len(arr)) for arr in arrays]\n    return min(min_diffs)\n",
        "test_code": "assert find_min_diff_across_arrays([[1, 5, 3, 19, 18, 25], [30, 5, 20, 9], [1, 19, -4, 31, 38, 25, 100]]) == 1 \nassert find_min_diff_across_arrays([]) == -1\nassert find_min_diff_across_arrays([[1, 3, 10], [4, 12, 19, 23, 127, 235]]) == 2"
    },
    {
        "id": 340,
        "raw_problem": "# Write a python function to count number of digits in a given string.\ndef number_ctr(s):\n",
        "raw_solution": "    return sum(c.isdigit() for c in s)\n",
        "new_problem": "# Given a list of strings, write a Python function to count the total number of digits in all strings combined.\ndef total_digit_count(strings):\n",
        "new_solution": "    return sum(number_ctr(s) for s in strings)\n",
        "test_code": "assert total_digit_count(['abc123', 'def456']) == 6\nassert total_digit_count(['hello', 'world']) == 0\nassert total_digit_count(['123', '456', '789']) == 9\nassert total_digit_count(['a1b2c3', 'd4e5f6']) == 6\nassert total_digit_count(['', '1', '22', '333']) == 6"
    },
    {
        "id": 341,
        "raw_problem": "# Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nimport math\ndef is_polite(n):\n",
        "raw_solution": "    n = n + 1\n    return (int)(n+(math.log((n + math.log(n, 2)), 2))) \n",
        "new_problem": "# Write a function to find the sum of the first n polite numbers. A polite number is a positive integer that can be written as the sum of two or more consecutive positive integers. For example, the first few polite numbers are 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, etc.\ndef sum_of_first_n_polite_numbers(n):\n",
        "new_solution": "    sum_polite = 0\n    for i in range(1, n + 1):\n        sum_polite += is_polite(i)\n    return sum_polite\n",
        "test_code": "assert sum_of_first_n_polite_numbers(1) == 3\nassert sum_of_first_n_polite_numbers(2) == 8\nassert sum_of_first_n_polite_numbers(3) == 14\nassert sum_of_first_n_polite_numbers(4) == 21\nassert sum_of_first_n_polite_numbers(5) == 30"
    },
    {
        "id": 342,
        "raw_problem": "# Write a function to return a list of all pairs of consecutive items in a given list.\ndef pair_wise(l1):\n",
        "raw_solution": "    return list(zip(l1, l1[1:]))\n",
        "new_problem": "# Write a function to return a list of all pairs of consecutive items in a given list, and then use this function to find all pairs of consecutive items in two different lists and return the intersection of these pairs.\ndef pair_wise(l1): return list(zip(l1, l1[1:]))\n\ndef find_intersection_of_pairs(l1, l2):\n",
        "new_solution": "    pairs_l1 = pair_wise(l1)\n    pairs_l2 = pair_wise(l2)\n    return list(set(pairs_l1) & set(pairs_l2))\n",
        "test_code": "assert find_intersection_of_pairs([1, 2, 3, 4], [2, 3, 4, 5]) == [(2, 3), (3, 4)]\nassert find_intersection_of_pairs([1, 2, 3], [4, 5, 6]) == []\nassert find_intersection_of_pairs([1, 2, 3, 4], [3, 4, 5, 6]) == [(3, 4)]"
    },
    {
        "id": 343,
        "raw_problem": "# Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\ndef get_pairs_count(arr, sum_):\n",
        "raw_solution": "    cnt = 0\n    for n in arr:\n        cnt += arr.count(sum_ - n)\n        if sum_ - n == n:\n            cnt -= 1\n    return cnt / 2\n",
        "new_problem": "# Given a list of lists of numbers, find the total number of pairs across all sublists whose sum is equal to a given number 'sum'. Each sublist should be processed independently, and the result should be the sum of all pairs found in each sublist.\ndef get_total_pairs_count(arr_of_arrs, sum_):\n",
        "new_solution": "    total_pairs = 0\n    for arr in arr_of_arrs:\n        total_pairs += get_pairs_count(arr, sum_)\n    return total_pairs\n",
        "test_code": "assert get_total_pairs_count([[1, 5, 7, -1], [1, 5, 7, -1]], 6) == 4\nassert get_total_pairs_count([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 12.0\nassert get_total_pairs_count([[10, 12, 10, 15, -1], [2, 3, 4, 5, 6, 7]], 11) == 3"
    },
    {
        "id": 344,
        "raw_problem": "# Write a python function to get the difference between two lists.\ndef Diff(li1,li2):\n",
        "raw_solution": "    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \n",
        "new_problem": "# Given a list of lists, write a Python function to find the symmetric difference between each pair of lists and return a list of these differences. If there are an odd number of lists, the last list should be compared with the first list.\ndef SymmetricDifferences(list_of_lists):\n",
        "new_solution": "    differences = []\n    length = len(list_of_lists)\n    for i in range(length):\n        diff = Diff(list_of_lists[i], list_of_lists[(i + 1) % length])\n        differences.append(diff)\n    return differences\n",
        "test_code": "assert SymmetricDifferences([[1, 2, 3], [3, 4, 5], [5, 6, 7]]) == [[1, 2, 4, 5], [3, 4, 6, 7], [5, 6, 7, 1, 2, 3]]\nassert SymmetricDifferences([[1, 2], [2, 3], [3, 4], [4, 1]]) == [[1, 3], [2, 4], [3, 1], [4, 2]]\nassert SymmetricDifferences([[1, 2, 3, 4], [4, 5, 6], [6, 7, 8, 9], [9, 10]]) == [[1, 2, 3, 5, 6], [4, 5, 8, 9, 7], [8, 6, 7, 10], [9, 10, 1, 2, 3, 4]]"
    },
    {
        "id": 345,
        "raw_problem": "# Write a python function to find the sum of fourth power of first n odd natural numbers.\ndef odd_num_sum(n):\n",
        "raw_solution": "    j = 0\n    sm = 0\n    for i in range(1,n + 1):\n        j = (2*i-1) \n        sm = sm + (j*j*j*j)\n    return sm \n",
        "new_problem": "# Write a python function to find the sum of fourth power of first n odd natural numbers for multiple ranges of n. The function should take a list of tuples where each tuple contains two integers representing the start and end of a range (inclusive). The function should return a list of sums corresponding to each range.\ndef odd_num_sum_ranges(ranges):\n",
        "new_solution": "    results = [] \n    for start, end in ranges: \n        total_sum = 0 \n        for n in range(start, end + 1): \n            total_sum += odd_num_sum(n) \n        results.append(total_sum) \n    return results\n",
        "test_code": "assert odd_num_sum_ranges([(1, 2), (3, 4)]) == [83, 3815]\nassert odd_num_sum_ranges([(1, 1), (2, 2)]) == [1, 82]\nassert odd_num_sum_ranges([(1, 3), (4, 5)]) == [790, 12777]"
    },
    {
        "id": 346,
        "raw_problem": "# Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfrom collections import deque\ndef check_expression(exp):\n",
        "raw_solution": "    if len(exp) == 0 or len(exp) % 2 == 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\n",
        "new_problem": "# Given a list of expressions, write a function to check if all expressions are balanced. An expression is considered balanced if it contains properly matched parentheses, curly braces, and square brackets. The function should return a list of boolean values indicating whether each expression is balanced or not.\nfrom collections import deque\n\ndef check_expression(exp):\n",
        "new_solution": "    if len(exp) == 0 or len(exp) % 2 == 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\n\ndef check_all_expressions(expressions):\n    return [check_expression(exp) for exp in expressions]\n",
        "test_code": "assert check_all_expressions(['()', '{}', '[]']) == [True, True, True]\nassert check_all_expressions(['({[]})', '({[}])', '({[]})']) == [True, False, True]\nassert check_all_expressions(['((()))', '(()', '())']) == [True, False, False]\nassert check_all_expressions(['', '()', '{}', '[]']) == [False, True, True, True]"
    },
    {
        "id": 347,
        "raw_problem": "# Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n",
        "raw_solution": "  return ' '.join([i for i in test_str.split() if len(i) != K])\n",
        "new_problem": "# Given a list of strings, remove all words of length K from each string in the list. Return a new list of strings where each string has had words of length K removed.\ndef remove_length_from_list(str_list, K):\n",
        "new_solution": "  return [remove_length(s, K) for s in str_list]\n",
        "test_code": "assert remove_length_from_list(['hello world', 'python is fun'], 5) == ['', 'python is fun']\nassert remove_length_from_list(['quick brown fox', 'jumps over the lazy dog'], 3) == ['quick brown', 'jumps over lazy']\nassert remove_length_from_list(['a', 'an', 'the'], 1) == ['', 'an', 'the']"
    },
    {
        "id": 348,
        "raw_problem": "# Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nimport re\ndef occurance_substring(text,pattern):\n",
        "raw_solution": " for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\n return None\n",
        "new_problem": "# Write a function to find all occurrences and positions of multiple substrings within a string. The function should accept a list of substrings and return a dictionary where the keys are the substrings and the values are lists of tuples, each tuple containing the substring, its start position, and its end position. If a substring does not occur in the string, its value should be an empty list.\nimport re\n\ndef occurance_substrings(text, patterns):\n",
        "new_solution": "    result = {}\n    for pattern in patterns:\n        matches = []\n        for match in re.finditer(pattern, text):\n            s = match.start()\n            e = match.end()\n            matches.append((text[s:e], s, e))\n        result[pattern] = matches\n    return result\n",
        "test_code": "assert occurance_substrings('hello world', ['o', 'l']) == {'o': [('o', 4, 5), ('o', 7, 8)], 'l': [('l', 2, 3), ('l', 3, 4), ('l', 9, 10)]}\nassert occurance_substrings('testing 123', ['t', '4']) == {'t': [('t', 0, 1), ('t', 3, 4)], '4': []}\nassert occurance_substrings('abcabcabc', ['a', 'b', 'c']) == {'a': [('a', 0, 1), ('a', 3, 4), ('a', 6, 7)], 'b': [('b', 1, 2), ('b', 4, 5), ('b', 7, 8)], 'c': [('c', 2, 3), ('c', 5, 6), ('c', 8, 9)]}"
    },
    {
        "id": 349,
        "raw_problem": "# Write a python function to check whether every odd index contains odd numbers of a given list.\ndef odd_position(nums):\n",
        "raw_solution": "    return all(n % 2 == 1 for n in nums[1::2])\n",
        "new_problem": "# Given a list of lists, write a Python function to check whether every sublist has its odd indices containing only odd numbers. Additionally, the function should return the sum of all elements in the sublists that meet this condition.\ndef complex_odd_position(list_of_lists):\n",
        "new_solution": "    total_sum = 0\n    for sublist in list_of_lists:\n        if odd_position(sublist):\n            total_sum += sum(sublist)\n    return total_sum\n",
        "test_code": "assert complex_odd_position([[1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]]) == 60\nassert complex_odd_position([[2, 4, 6], [1, 3, 5, 7], [10, 12, 14, 16]]) == 16\nassert complex_odd_position([[1, 3, 5], [2, 4, 6, 8], [7, 9, 11, 13]]) == 49\nassert complex_odd_position([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == 0"
    },
    {
        "id": 350,
        "raw_problem": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr):\n",
        "raw_solution": "    return sum(set(arr))\n",
        "new_problem": "# Given a list of lists, write a python function to find the sum of non-repeated elements across all sublists.\ndef find_sum_of_non_repeated_elements(list_of_lists):\n",
        "new_solution": "    total_sum = 0\n    for sublist in list_of_lists:\n        total_sum += find_sum(sublist)\n    return total_sum\n",
        "test_code": "assert find_sum_of_non_repeated_elements([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == 27\nassert find_sum_of_non_repeated_elements([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == 6\nassert find_sum_of_non_repeated_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 45\nassert find_sum_of_non_repeated_elements([[1, 2, 2], [3, 3, 4], [5, 6, 6]]) == 21"
    },
    {
        "id": 351,
        "raw_problem": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\nfrom itertools import groupby\ndef pack_consecutive_duplicates(list1):\n",
        "raw_solution": "    return [list(group) for _, group in groupby(list1)]\n",
        "new_problem": "# Given a list of lists where each sublist contains consecutive duplicates, write a function to merge these sublists into a single list while preserving the order of elements. If an element appears in multiple sublists, it should appear in the merged list as many times as it appears in the sum of its occurrences in all sublists.\ndef merge_packed_lists(packed_lists):\n",
        "new_solution": "    merged_list = []\n    for sublist in packed_lists:\n        merged_list.extend(sublist)\n    return merged_list\n",
        "test_code": "assert merge_packed_lists([[1, 1], [2], [3, 3, 3], [2]]) == [1, 1, 2, 3, 3, 3, 2]\nassert merge_packed_lists([['a', 'a'], ['b'], ['a'], ['c', 'c']]) == ['a', 'a', 'b', 'a', 'c', 'c']\nassert merge_packed_lists([[1], [2], [3], [4]]) == [1, 2, 3, 4]\nassert merge_packed_lists([[1], [1], [1]]) == [1, 1, 1]\nassert merge_packed_lists([[]]) == []"
    },
    {
        "id": 352,
        "raw_problem": "# Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfrom itertools import combinations \ndef find_combinations(test_list):\n",
        "raw_solution": "  return [tuple(map(sum, zip(*t))) for t in combinations(test_list, 2)]\n",
        "new_problem": "# Given a list of tuples, find all possible combinations of sums of tuples such that each combination includes at least one tuple from each half of the list. If the list has an odd number of tuples, the middle tuple should be included in both halves. Return a list of all such combinations.\ndef find_half_combinations(test_list):\n",
        "new_solution": "    # Determine the split point for the list\n    mid = (len(test_list) + 1) // 2  # include the middle tuple in both halves if odd\n    first_half = test_list[:mid]\n    second_half = test_list[mid - 1:]  # include middle in the second half if odd\n    \n    # Generate all combinations of sums with at least one tuple from each half\n    result = []\n    for a in first_half:\n        for b in second_half:\n            if a != b:  # Ensure we're not combining the same element if it's in the overlap\n                result.extend(find_combinations([a, b]))\n    return result\n\n",
        "test_code": "assert find_half_combinations([(1, 2), (3, 4), (5, 6), (7, 8)]) == [(4, 6), (6, 8), (8, 10), (8, 10), (10, 12)]\nassert find_half_combinations([(1, 1), (2, 2), (3, 3)]) == [(3, 3), (4, 4), (5, 5)]\nassert find_half_combinations([(0, 0), (1, 1), (2, 2), (3, 3), (4, 4)]) == [(2, 2), (3, 3), (4, 4), (3, 3), (4, 4), (5, 5), (5, 5), (6, 6)]"
    },
    {
        "id": 353,
        "raw_problem": "# Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\nimport math \ndef count_divisors(n):\n",
        "raw_solution": "    cnt = 0\n    for i in range(1, (int)(math.sqrt(n)) + 1):\n        if (n % i == 0) : \n            if (n / i == i) : \n                cnt = cnt + 1\n            else : \n                cnt = cnt + 2\n    return cnt % 2 == 0\n",
        "new_problem": "# Given a list of integers, write a Python function to check how many integers in a list have an even number of divisors.\ndef count_even_divisors_in_list(numbers):\n",
        "new_solution": "    count = 0\n    for number in numbers:\n        if count_divisors(number):\n            count += 1\n    return count\n",
        "test_code": "assert count_even_divisors_in_list([10, 12, 14, 15, 16, 18, 20]) == 6\nassert count_even_divisors_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 7\nassert count_even_divisors_in_list([]) == 0"
    },
    {
        "id": 354,
        "raw_problem": "# Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\ndef odd_length_sum(arr):\n",
        "raw_solution": "    sum_ = 0\n    n = len(arr)\n    for i in range(n):\n        # arr[i] occurs (i + 1) * (n - i) times in all subarrays\n        times = ((i + 1) * (n - i) + 1) // 2\n        sum_ += arr[i] * times\n    return sum_\n",
        "new_problem": "# Given a list of integers, find the sum of the sums of all odd length subarrays for each possible starting index of the list. In other words, for each index i in the list, compute the sum of all odd length subarrays that start at index i, and then sum all these sums together.\ndef total_odd_length_sum(arr):\n",
        "new_solution": "    total_sum = 0\n    for i in range(len(arr)):\n        total_sum += odd_length_sum(arr[i:])\n    return total_sum\n",
        "test_code": "assert total_odd_length_sum([1, 4, 2, 5, 3]) == 124\nassert total_odd_length_sum([1, 2]) == 5\nassert total_odd_length_sum([10, 11, 12]) == 101"
    },
    {
        "id": 355,
        "raw_problem": "# Write a function to find the product of first even and odd number of a given list.\ndef mul_even_odd(list1):\n",
        "raw_solution": "    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)\n",
        "new_problem": "# Given a list of lists, write a function to find the product of the first even and odd number for each sublist, and then return the sum of these products.\ndef sum_of_products(list_of_lists):\n",
        "new_solution": "    total_sum = 0\n    for sublist in list_of_lists:\n        total_sum += mul_even_odd(sublist)\n    return total_sum\n",
        "test_code": "assert sum_of_products([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 78\nassert sum_of_products([[1, 3, 5], [2, 4, 6], [7, 9, 11]]) == -10\nassert sum_of_products([[2, 3, 4], [5, 6, 7], [8, 9, 10]]) == 108\nassert sum_of_products([[1, 2], [3, 4], [5, 6]]) == 44\nassert sum_of_products([[11, 12, 13], [14, 15, 16], [17, 18, 19]]) == 648"
    },
    {
        "id": 356,
        "raw_problem": "# Write a function to convert tuple string to integer tuple.\ndef tuple_str_int(test_str):\n",
        "raw_solution": "  return tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n",
        "new_problem": "# Given a list of tuple strings, write a function to convert each tuple string in the list to an integer tuple and then calculate the sum of all elements in the resulting list of tuples.\ndef sum_of_tuple_str_int(tuple_str_list):\n",
        "new_solution": "    def tuple_str_int(test_str):\n        return tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n    \n    total_sum = 0\n    for tuple_str in tuple_str_list:\n        total_sum += sum(tuple_str_int(tuple_str))\n    return total_sum\n",
        "test_code": "assert sum_of_tuple_str_int(['(1, 2, 3)', '(4, 5, 6)']) == 21\nassert sum_of_tuple_str_int(['(10, 20)', '(30, 40)']) == 100\nassert sum_of_tuple_str_int(['(1, 1, 1, 1)', '(2, 2, 2, 2)']) == 12"
    },
    {
        "id": 357,
        "raw_problem": "# Write a function to locate the right insertion point for a specified value in sorted order.\nimport bisect\ndef right_insertion(a, x):\n",
        "raw_solution": "    return bisect.bisect_right(a, x)\n",
        "new_problem": "# Given a list of sorted lists, write a function to merge them into a single sorted list. The function should efficiently handle the insertion of elements from each list into the final sorted list.\nimport bisect\n\ndef merge_sorted_lists(sorted_lists):\n",
        "new_solution": "    merged_list = []\n    for lst in sorted_lists:\n        for item in lst:\n            bisect.insort_right(merged_list, item)\n    return merged_list\n",
        "test_code": "assert merge_sorted_lists([[1, 3, 5], [2, 4, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert merge_sorted_lists([[10], [5], [20]]) == [5, 10, 20]\nassert merge_sorted_lists([[], [1], [2, 3]]) == [1, 2, 3]"
    },
    {
        "id": 358,
        "raw_problem": "# Write a function that matches a string that has an a followed by three 'b'.\nimport re\ndef text_match_three(text):\n",
        "raw_solution": "        patterns = 'ab{3}?'\n        return re.search(patterns,  text)\n",
        "new_problem": "# Write a function that takes a list of strings and returns a list of strings that match the pattern of having an 'a' followed by three 'b's, but only if the string also contains at least one 'c' before the pattern. The function should process each string in the list and return a new list with the matching strings.\nimport re\n\ndef text_match_three_with_c(texts):\n",
        "new_solution": "    def text_match_three(text):\n        patterns = 'ab{3}?'\n        return re.search(patterns, text)\n    \n    def contains_c(text):\n        return 'c' in text\n    \n    return [text for text in texts if text_match_three(text) and contains_c(text)]\n",
        "test_code": "assert text_match_three_with_c(['abbb', 'acbbb', 'abbbc', 'cbbaa']) == ['abbbc']\nassert text_match_three_with_c(['ab', 'abb', 'abbb', 'abbbc']) == ['abbbc']\nassert text_match_three_with_c(['abc', 'abbb', 'acb', 'abbbc']) == ['abbbc']\nassert text_match_three_with_c(['a', 'b', 'c', 'd']) == []"
    },
    {
        "id": 359,
        "raw_problem": "# Write a function to create a new tuple from the given string and list.\ndef new_tuple(test_list, test_str):\n",
        "raw_solution": "  return tuple(test_list + [test_str])\n",
        "new_problem": "# Given a list of strings and a list of lists, create a new list where each element is a tuple formed by combining each string from the first list with the corresponding list from the second list using the function `new_tuple`. If the lengths of the two lists do not match, raise a ValueError.\ndef new_list_of_tuples(strings_list, lists_list):\n",
        "new_solution": "    if len(strings_list) != len(lists_list):\n        raise ValueError(\"Lists must be of the same length\")\n    return [new_tuple(lst, s) for s, lst in zip(strings_list, lists_list)]\n",
        "test_code": "assert new_list_of_tuples(['a', 'b'], [[1], [2]]) == [(1, 'a'), (2, 'b')]\nassert new_list_of_tuples(['x'], [[1, 2, 3]]) == [(1, 2, 3, 'x')]\ntry:\n    new_list_of_tuples(['a', 'b'], [[1]])\n    assert False, 'Expected ValueError'\nexcept ValueError:\n    pass"
    },
    {
        "id": 360,
        "raw_problem": "# Write a python function to check whether every even index contains even numbers of a given list.\ndef even_position(nums):\n",
        "raw_solution": "    return all(nums[i]%2==i%2 for i in range(len(nums)))\n",
        "new_problem": "# Given a list of lists, write a Python function to check whether every even index of each sublist contains even numbers. If all sublists meet this condition, return True; otherwise, return False.\ndef check_even_indices(list_of_lists):\n",
        "new_solution": "    return all(even_position(sublist) for sublist in list_of_lists)\n",
        "test_code": "assert check_even_indices([[2, 3, 4, 5], [6, 7, 8, 9], [10, 11, 12, 13]]) == True\nassert check_even_indices([[1, 3, 5, 7], [2, 4, 6, 8], [9, 11, 13, 15]]) == False\nassert check_even_indices([[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]]) == True\nassert check_even_indices([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == False"
    },
    {
        "id": 361,
        "raw_problem": "# Write a function to remove tuples from the given tuple.\ndef remove_nested(test_tup):\n",
        "raw_solution": "  return tuple(e for e in test_tup if not isinstance(e, tuple))\n",
        "new_problem": "# Given a list of tuples, where each tuple may contain nested tuples, write a function to remove all nested tuples from each tuple in the list. The function should return a list of tuples where each tuple is flattened by removing all nested tuples within it.\ndef remove_nested_from_list(tup_list):\n",
        "new_solution": "    return [remove_nested(tup) for tup in tup_list]\n",
        "test_code": "assert remove_nested_from_list([(1, (2, 3)), ((4, 5), 6)]) == [(1,), (6,)]\nassert remove_nested_from_list([((1, 2), (3, 4)), (5, (6, 7))]) == [(), (5,)]\nassert remove_nested_from_list([(1, 2, 3), (4, (5, 6))]) == [(1, 2, 3), (4,)]\nassert remove_nested_from_list([((1,), (2,)), (3, (4,))]) == [(), (3,)]\nassert remove_nested_from_list([(1, (2, (3, 4))), ((5,), 6)]) == [(1,), (6,)]"
    },
    {
        "id": 362,
        "raw_problem": "# Write a python function to count the number of lists in a given number of lists.\ndef count_list(input_list):\n",
        "raw_solution": "    return sum(isinstance(e, list) for e in input_list)\n",
        "new_problem": "# Write a Python function to count the number of lists in a given list of lists of lists. The function should recursively count all the lists at any depth.\ndef count_lists_recursive(input_list):\n",
        "new_solution": "    count = count_list(input_list) \n    for element in input_list: \n        if isinstance(element, list): \n            count += count_lists_recursive(element) \n    return count\n",
        "test_code": "assert count_lists_recursive([[1, 2], [3, [4, 5]], 6]) == 3\nassert count_lists_recursive([1, 2, 3]) == 0\nassert count_lists_recursive([[[1], [2, [3]]], [4, [5, [6]]]]) == 7\nassert count_lists_recursive([]) == 0\nassert count_lists_recursive([[[[[]]]]]) == 4"
    },
    {
        "id": 363,
        "raw_problem": "# Write a python function to find the last position of an element in a sorted array.\ndef last(arr,x):\n",
        "raw_solution": "    return len(arr)-arr[::-1].index(x) - 1\n",
        "new_problem": "# Given a list of sorted arrays and a target element, find the total number of occurrences of the target element across all arrays. You need to implement a function `total_occurrences(arrays, target)` that returns the total count of the target element in all arrays.\ndef total_occurrences(arrays, target):\n",
        "new_solution": "    count = 0\n    for arr in arrays:\n        if target in arr:\n            count += last(arr, target) - arr.index(target) + 1\n    return count\n",
        "test_code": "assert total_occurrences([[1, 2, 2, 3], [2, 2, 3, 4], [1, 3, 3]], 2) == 4\nassert total_occurrences([[1, 1, 1], [1, 2, 2], [2, 2, 3]], 1) == 4\nassert total_occurrences([[5, 5, 5], [5, 5, 5], [5, 5, 5]], 5) == 9\nassert total_occurrences([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 10) == 0"
    },
    {
        "id": 364,
        "raw_problem": "# Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nimport re\ndef text_starta_endb(text):\n",
        "raw_solution": "    patterns = 'a.*?b$'\n    return re.search(patterns,  text)\n",
        "new_problem": "# Given a list of strings, write a function that returns a list of strings that match the pattern 'a' followed by anything, ending in 'b' for each string in the list. Additionally, the function should count and return the total number of matches found.\nimport re\n\ndef text_starta_endb(text):\n",
        "new_solution": "    patterns = 'a.*?b$'\n    return re.search(patterns, text)\n\ndef process_string_list(string_list):\n    matches = []\n    total_matches = 0\n    for text in string_list:\n        if text_starta_endb(text):\n            matches.append(text)\n            total_matches += 1\n    return matches, total_matches\n",
        "test_code": "assert process_string_list(['aab', 'abb', 'acb', 'a', 'b']) == (['aab', 'abb', 'acb'], 3)\nassert process_string_list(['abc', 'a', 'b', 'ab', 'aab']) == (['ab', 'aab'], 2)\nassert process_string_list(['b', 'c', 'd']) == ([], 0)\nassert process_string_list(['aab', 'aab', 'aab']) == (['aab', 'aab', 'aab'], 3)"
    },
    {
        "id": 365,
        "raw_problem": "# Write function to find the sum of all items in the given dictionary.\ndef return_sum(d):\n",
        "raw_solution": "  return sum(d.values())\n",
        "new_problem": "# Given a list of dictionaries, write a function to find the total sum of all items in all dictionaries.\ndef total_sum_of_dicts(dict_list):\n",
        "new_solution": "    return sum(return_sum(d) for d in dict_list)\n",
        "test_code": "assert total_sum_of_dicts([{'a': 1, 'b': 2}, {'c': 3, 'd': 4}]) == 10\nassert total_sum_of_dicts([{}, {'e': 5, 'f': 6}]) == 11\nassert total_sum_of_dicts([{'g': 7}, {'h': 8, 'i': 9}]) == 24\nassert total_sum_of_dicts([{}, {}]) == 0\nassert total_sum_of_dicts([{'j': 10, 'k': 11, 'l': 12}]) == 33"
    },
    {
        "id": 366,
        "raw_problem": "# Write a python function to find the sum of all odd natural numbers within the range l and r.\ndef sum_in_range(l,r):\n",
        "raw_solution": "    return sum_odd(r) - sum_odd(l - 1)\ndef sum_odd(n):\n    terms = (n + 1) // 2\n    sum1 = terms * terms \n    return sum1  \n",
        "new_problem": "# Write a Python function to find the sum of all odd natural numbers within multiple ranges provided as a list of tuples. Each tuple contains the lower and upper bounds of a range. The function should return the total sum of all odd numbers across all ranges.\ndef sum_odd_in_multiple_ranges(ranges): \n    total_sum = 0\n    for l, r in ranges:\n",
        "new_solution": "        total_sum += sum_in_range(l, r)\n    return total_sum\n",
        "test_code": "assert sum_odd_in_multiple_ranges([(1, 5), (10, 15)]) == 48\nassert sum_odd_in_multiple_ranges([(2, 8), (12, 20)]) == 79\nassert sum_odd_in_multiple_ranges([(3, 7), (11, 13)]) == 39\nassert sum_odd_in_multiple_ranges([(1, 1), (2, 2), (3, 3)]) == 4\nassert sum_odd_in_multiple_ranges([(1, 10), (11, 20), (21, 30)]) == 225"
    },
    {
        "id": 367,
        "raw_problem": "# Write a python function to find the sum of an array.\ndef _sum(arr):\n",
        "raw_solution": "    return sum(arr)\n",
        "new_problem": "# Given a list of arrays, write a Python function to find the sum of each array and then return the total sum of all these sums.\ndef total_sum_of_sums(arrays):\n",
        "new_solution": "    return sum(_sum(arr) for arr in arrays)\n",
        "test_code": "assert total_sum_of_sums([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 45\nassert total_sum_of_sums([[1], [2], [3], [4], [5]]) == 15\nassert total_sum_of_sums([[0, 0, 0], [0, 0], [0]]) == 0\nassert total_sum_of_sums([[10, 20], [30], [40, 50, 60]]) == 210\nassert total_sum_of_sums([[-1, -2, -3], [-4, -5], [-6]]) == -21"
    },
    {
        "id": 368,
        "raw_problem": "# Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\ndef left_rotate(n,d):\n",
        "raw_solution": "    INT_BITS = 32\n    return (n << d)|(n >> (INT_BITS - d))  \n",
        "new_problem": "# Given a list of 32-bit numbers and a list of corresponding rotation values, write a function to rotate each number left by its corresponding rotation value and return the list of rotated numbers. If the rotation value is greater than 32, it should be reduced modulo 32 before performing the rotation.\ndef rotate_numbers(numbers, rotations):\n",
        "new_solution": "    rotated_numbers = []\n    for num, rot in zip(numbers, rotations):\n        rot = rot % 32\n        rotated_numbers.append(left_rotate(num, rot))\n    return rotated_numbers\n",
        "test_code": "assert rotate_numbers([123456789, 987654321], [10, 20]) == [126419751965, 1035630617538022]\nassert rotate_numbers([0, 1, 2], [0, 32, 33]) == [0, 1, 4]\nassert rotate_numbers([2147483647, 4294967295], [32, 16]) == [2147483647, 281474976710655]"
    },
    {
        "id": 369,
        "raw_problem": "# Write a function to remove all whitespaces from a string.\ndef remove_all_spaces(text):\n",
        "raw_solution": " return text.replace(' ', '')\n",
        "new_problem": "# Write a function to process a list of strings, where each string may contain multiple types of whitespace characters (spaces, tabs, newlines). The function should remove all whitespace characters from each string and then concatenate the processed strings into a single string, separated by a single space.\ndef process_and_concatenate_strings(string_list):\n",
        "new_solution": "    processed_strings = [remove_all_spaces(s).replace('\\t', '').replace('\\n', '') for s in string_list]\n    return ' '.join(processed_strings)\n",
        "test_code": "assert process_and_concatenate_strings(['hello world', 'goodbye\\ttab', 'newline\\nhere']) == 'helloworld goodbyetab newlinehere'\nassert process_and_concatenate_strings(['  leading spaces', 'trailing spaces  ', '  both  ']) == 'leadingspaces trailingspaces both'\nassert process_and_concatenate_strings(['\\nnewline\\n', '\\ttab\\t', 'mixed \\n\\t']) == 'newline tab mixed'"
    },
    {
        "id": 370,
        "raw_problem": "# Write a python function to count the number of equal numbers from three given integers.\ndef test_three_equal(x,y,z):\n",
        "raw_solution": "  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
        "new_problem": "# Given a list of tuples, where each tuple contains three integers, write a Python function to count the total number of equal numbers across all tuples. For example, if the list is [(1, 2, 2), (2, 2, 3), (3, 3, 3)], the function should return 7 because there are two 2's in the first tuple, two 2's in the second tuple, and three 3's in the third tuple.\ndef total_equal_numbers(tuples_list):\n",
        "new_solution": "    total_count = 0\n    for tup in tuples_list:\n        total_count += test_three_equal(*tup)\n    return total_count\n",
        "test_code": "assert total_equal_numbers([(1, 2, 2), (2, 2, 3), (3, 3, 3)]) == 7\nassert total_equal_numbers([(1, 1, 1), (2, 2, 2), (3, 3, 3)]) == 9\nassert total_equal_numbers([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == 0\nassert total_equal_numbers([(1, 1, 2), (2, 2, 2), (3, 3, 4)]) == 7"
    },
    {
        "id": 371,
        "raw_problem": "# Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\ndef is_perfect_square(n) :\n",
        "raw_solution": "    if n < 0:\n        return False\n    return n**(1/2) == int(n**(1/2))\n",
        "new_problem": "# Given a list of numbers, write a function to return a list of tuples where each tuple contains a number from the list and a boolean indicating whether the number is a perfect square. Additionally, the function should return the count of perfect squares in the list.\ndef check_perfect_squares(numbers):\n",
        "new_solution": "    def is_perfect_square(n):\n        if n < 0:\n            return False\n        return n**(1/2) == int(n**(1/2))\n    result = [(num, is_perfect_square(num)) for num in numbers]\n    count = sum(1 for _, is_square in result if is_square)\n    return result, count\n",
        "test_code": "assert check_perfect_squares([1, 4, 9, 16, 25, 30]) == ([(1, True), (4, True), (9, True), (16, True), (25, True), (30, False)], 5)\nassert check_perfect_squares([2, 3, 5, 7, 11]) == ([(2, False), (3, False), (5, False), (7, False), (11, False)], 0)\nassert check_perfect_squares([0, 100, 121, 144, 169]) == ([(0, True), (100, True), (121, True), (144, True), (169, True)], 5)"
    },
    {
        "id": 372,
        "raw_problem": "# Write a function to check whether the product of numbers in a list is even or not.\ndef is_product_even(arr):\n",
        "raw_solution": "    return any(x % 2 == 0 for x in arr)\n",
        "new_problem": "# Given a list of lists, determine if the product of numbers in each sublist is even. Return a list of boolean values where each value corresponds to whether the product of the numbers in the respective sublist is even.\ndef is_product_even_in_sublists(arr_of_arrs):\n",
        "new_solution": "    return [is_product_even(sublist) for sublist in arr_of_arrs]\n",
        "test_code": "assert is_product_even_in_sublists([[1, 3, 5], [2, 4, 6], [7, 9, 11]]) == [False, True, False]\nassert is_product_even_in_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [True, True, True]\nassert is_product_even_in_sublists([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == [False, True, False]\nassert is_product_even_in_sublists([[10, 11, 12], [13, 14, 15], [16, 17, 18]]) == [True, True, True]\nassert is_product_even_in_sublists([[1, 3, 5], [7, 9, 11], [13, 15, 17]]) == [False, False, False]"
    },
    {
        "id": 373,
        "raw_problem": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists):\n",
        "raw_solution": " return max(lists, key=sum)\n",
        "new_problem": "# Given a list of lists of lists, where each sub-list contains integers, write a function that returns the list of lists whose sum of elements is the highest among all sub-lists. If there are multiple lists with the same highest sum, return the first one encountered.\ndef max_sum_list_of_lists(list_of_lists):\n",
        "new_solution": "   return max(list_of_lists, key=lambda x: sum(max_sum_list(x)))\n",
        "test_code": "assert max_sum_list_of_lists([[[1, 2], [3, 4]], [[5, 6], [7, 8]]]) == [[5, 6], [7, 8]]\nassert max_sum_list_of_lists([[[1], [2, 3]], [[4], [5, 6]]]) == [[4], [5, 6]]\nassert max_sum_list_of_lists([[[1, 2, 3], [4, 5]], [[6, 7], [8, 9]]]) == [[6, 7], [8, 9]]\nassert max_sum_list_of_lists([[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]]) == [[9, 10], [11, 12]]"
    },
    {
        "id": 374,
        "raw_problem": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str):\n",
        "raw_solution": "  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return res\n",
        "new_problem": "# Given a list of strings, find the maximum run of uppercase characters across all strings. If there are multiple strings with the same maximum run, return the first one found.\ndef max_run_uppercase_across_strings(strings):\n",
        "new_solution": "      max_run = 0\n      max_string = ''\n      for string in strings:\n        current_run = max_run_uppercase(string)\n        if current_run > max_run:\n            max_run = current_run\n            max_string = string\n      return max_string\n",
        "test_code": "assert max_run_uppercase_across_strings(['Hello', 'WORLD', 'Python']) == 'WORLD'\nassert max_run_uppercase_across_strings(['aBcDeF', 'gHiJkL', 'mNoPqR']) == 'aBcDeF'\nassert max_run_uppercase_across_strings(['UPPER', 'lower', 'MIXED']) == 'UPPER'\nassert max_run_uppercase_across_strings(['no', 'UPPERCASE', 'here']) == 'UPPERCASE'\nassert max_run_uppercase_across_strings(['ONE', 'TWO', 'THREE']) == 'THREE'"
    },
    {
        "id": 375,
        "raw_problem": "# Write a python function to find the first odd number in a given list of numbers.\ndef first_odd(nums):\n",
        "raw_solution": "  first_odd = next((el for el in nums if el%2!=0), None)\n  return first_odd\n",
        "new_problem": "# Write a Python function to find the first odd number in each sublist of a given list of lists of numbers, and then return the sum of these first odd numbers.\ndef sum_first_odds(list_of_lists):\n",
        "new_solution": "    first_odds = [first_odd(sublist) for sublist in list_of_lists]\n    return sum(odd for odd in first_odds if odd is not None)\n",
        "test_code": "assert sum_first_odds([[2, 4, 6], [1, 3, 5], [2, 3, 4]]) == 4\nassert sum_first_odds([[2, 4, 6], [2, 4, 6], [2, 4, 6]]) == 0\nassert sum_first_odds([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 13\nassert sum_first_odds([[10, 20, 30], [31, 32, 33], [34, 35, 36]]) == 66"
    },
    {
        "id": 376,
        "raw_problem": "# Write a function to check if the given tuples contain the k or not.\ndef check_K(test_tup, K):\n",
        "raw_solution": "  return K in test_tup\n",
        "new_problem": "# Given a list of tuples and a target value K, write a function to count how many tuples in the list contain the target value K. Additionally, return a list of tuples that do not contain the target value K.\ndef count_and_filter_tuples(tuples_list, K):\n",
        "new_solution": "    count = 0\n    filtered_tuples = []\n    for tup in tuples_list:\n        if check_K(tup, K):\n            count += 1\n        else:\n            filtered_tuples.append(tup)\n    return count, filtered_tuples\n",
        "test_code": "assert count_and_filter_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 5) == (1, [(1, 2, 3), (7, 8, 9)])\nassert count_and_filter_tuples([(10, 20), (30, 40), (50, 60)], 70) == (0, [(10, 20), (30, 40), (50, 60)])\nassert count_and_filter_tuples([(1, 1, 1), (2, 2, 2), (3, 3, 3)], 1) == (1, [(2, 2, 2), (3, 3, 3)])"
    },
    {
        "id": 377,
        "raw_problem": "# Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\ndef check_smaller(test_tup1, test_tup2):\n",
        "raw_solution": "  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
        "new_problem": "# Given a list of tuples, write a function to check if each element of the second tuple in the list is smaller than its corresponding element in the first tuple, and each element of the third tuple is smaller than its corresponding element in the second tuple, and so on. If the list has only one tuple, return True.\ndef check_consecutive_smaller(tuples_list):\n",
        "new_solution": "    if len(tuples_list) <= 1:\n        return True\n    for i in range(len(tuples_list) - 1):\n        if not check_smaller(tuples_list[i], tuples_list[i + 1]):\n            return False\n    return True\n",
        "test_code": "assert check_consecutive_smaller([(5, 6), (4, 5), (3, 4)]) == True\nassert check_consecutive_smaller([(5, 6), (6, 5), (3, 4)]) == False\nassert check_consecutive_smaller([(1, 2)]) == True\nassert check_consecutive_smaller([(10, 10), (9, 9), (8, 8)]) == True\nassert check_consecutive_smaller([(10, 10), (9, 9), (10, 8)]) == False"
    }
]