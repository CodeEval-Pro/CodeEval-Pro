[
    {
        "id": 0,
        "raw_problem": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n",
        "raw_solution": "    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n",
        "new_problem": "# Given a list of lists of floats, determine if there exists any list where at least two numbers are closer to each other than a given threshold. If such a list exists, return the indices of the lists where this condition is met. If no such list exists, return an empty list.\ndef find_close_elements_lists(list_of_lists: List[List[float]], threshold: float) -> List[int]:\n",
        "new_solution": "    \"\"\" Find the indices of lists where at least two numbers are closer to each other than the given threshold.\n    >>> find_close_elements_lists([[1.0, 2.0, 3.0], [1.0, 2.8, 3.0, 4.0, 5.0, 2.0]], 0.5)\n    [1]\n    >>> find_close_elements_lists([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]], 0.3)\n    []\n    \"\"\"\n    return [i for i, lst in enumerate(list_of_lists) if has_close_elements(lst, threshold)]\n\n",
        "test_code": "\nassert find_close_elements_lists([[1.0, 2.0, 3.0], [1.0, 2.8, 3.0, 4.0, 5.0, 2.0]], 0.5) == [1]\nassert find_close_elements_lists([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]], 0.3) == []\nassert find_close_elements_lists([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]], 0.5) == []"
    },
    {
        "id": 1,
        "raw_problem": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n",
        "raw_solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "new_problem": "# Given a string containing multiple groups of nested parentheses, your goal is to count the number of balanced groups and return the total count. Each group is balanced (each open brace is properly closed) and not nested within each other. Ignore any spaces in the input string.\n\ndef count_balanced_paren_groups(paren_string: str) -> int:\n",
        "new_solution": "    return len(separate_paren_groups(paren_string))\n\n",
        "test_code": "\nassert count_balanced_paren_groups('( ) (( )) (( )( ))') == 3\nassert count_balanced_paren_groups('((())) (()) (()(()))') == 3\nassert count_balanced_paren_groups('()()()') == 3\nassert count_balanced_paren_groups('') == 0\nassert count_balanced_paren_groups('(()) ((()))') == 2"
    },
    {
        "id": 2,
        "raw_problem": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n",
        "raw_solution": "    return number % 1.0\n",
        "new_problem": "# Given a list of positive floating point numbers, decompose each number into its integer part and decimal part. Then, calculate the sum of all the integer parts and the sum of all the decimal parts separately. Finally, return the product of these two sums.\nimport math\ndef sum_of_parts(numbers: list) -> float:\n",
        "new_solution": "    integer_sum = 0\n    decimal_sum = 0\n    for number in numbers:\n        decimal_part = truncate_number(number)\n        integer_part = number - decimal_part\n        integer_sum += integer_part\n        decimal_sum += decimal_part\n    return integer_sum * decimal_sum\n\n",
        "test_code": "\nassert math.isclose(sum_of_parts([3.5, 2.7, 1.1]),7.8)\nassert math.isclose(sum_of_parts([0.5, 1.5, 2.5]), 4.5)\nassert math.isclose(sum_of_parts([10.0, 20.0, 30.0]), 0.0)\nassert math.isclose(sum_of_parts([1.23, 4.56, 7.89]), 20.16)\n"
    },
    {
        "id": 3,
        "raw_problem": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n",
        "raw_solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "new_problem": "# You are given a list of transactions where each transaction is a list of deposit and withdrawal operations on multiple bank accounts. Each sublist represents the operations for a single account, and the accounts are processed in the order they appear in the main list. Your task is to determine if any account falls below zero at any point during its operations. If any account falls below zero, the function should return True. Otherwise, it should return False.\nfrom typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n",
        "new_solution": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n\ndef any_account_below_zero(transactions: List[List[int]]) -> bool:\n    for account in transactions:\n        if below_zero(account):\n            return True\n    return False\n\n",
        "test_code": "\nassert any_account_below_zero([[1, 2, 3], [4, 5, 6]]) == False\nassert any_account_below_zero([[1, 2, -4, 5], [1, 2, 3]]) == True\nassert any_account_below_zero([[1, 2, 3], [1, -2, 3]]) == True\nassert any_account_below_zero([[1, 2, 3], [1, 2, 3]]) == False"
    },
    {
        "id": 4,
        "raw_problem": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n",
        "raw_solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "new_problem": "# Given a list of lists of numbers, calculate the Mean Absolute Deviation (MAD) for each sublist and then find the overall Mean Absolute Deviation of these MADs. The overall MAD should be calculated around the mean of the MADs of the sublists.\ndef overall_mean_absolute_deviation(list_of_lists: List[List[float]]) -> float:\n",
        "new_solution": "    mad_values = [mean_absolute_deviation(sublist) for sublist in list_of_lists]\n    return mean_absolute_deviation(mad_values)\n\n",
        "test_code": "\nassert overall_mean_absolute_deviation([[1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0]]) == 0.0\nassert overall_mean_absolute_deviation([[1.0, 1.0, 1.0], [2.0, 2.0, 2.0], [3.0, 3.0, 3.0]]) == 0.0\nassert overall_mean_absolute_deviation([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]) == 0.0"
    },
    {
        "id": 5,
        "raw_problem": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n",
        "raw_solution": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "new_problem": "# Given a list of integers, intersperse a specified delimiter between every two consecutive elements of the list. Then, repeat this process with a different delimiter for the resulting list. Finally, return the list after both interspersing operations.\nfrom typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n",
        "new_solution": "    result = []\n    for i in range(len(numbers)):\n        if i > 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result\n\n\ndef double_intersperse(numbers: List[int], delimeter1: int, delimeter2: int) -> List[int]:\n    intermediate_list = intersperse(numbers, delimeter1)\n    final_list = intersperse(intermediate_list, delimeter2)\n    return final_list\n\n",
        "test_code": "\nassert double_intersperse([], 4, 5) == []\nassert double_intersperse([1, 2, 3], 4, 5) == [1, 5, 4, 5, 2, 5, 4, 5, 3]\nassert double_intersperse([1, 1, 1], 2, 3) == [1, 3, 2, 3, 1, 3, 2, 3, 1]\nassert double_intersperse([1], 4, 5) == [1]\nassert double_intersperse([1, 2], 4, 5) == [1, 5, 4, 5, 2]"
    },
    {
        "id": 6,
        "raw_problem": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n",
        "raw_solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "new_problem": "# Given a list of strings, each representing multiple groups of nested parentheses separated by spaces, return the sum of the deepest levels of nesting for each group in each string. For example, if a string contains '(()()) ((())) () ((())()())', the sum of the deepest levels of nesting is 2 + 3 + 1 + 3 = 9.\ndef sum_deepest_nesting(strings: List[str]) -> List[int]:\n",
        "new_solution": "    results = []\n    for string in strings:\n        depths = parse_nested_parens(string)\n        results.append(sum(depths))\n    return results\n\n",
        "test_code": "\nassert sum_deepest_nesting(['(()()) ((())) () ((())()())']) == [9]\nassert sum_deepest_nesting(['() (())', '((()))']) == [3, 3]\nassert sum_deepest_nesting(['(()(()))', '()']) == [3, 1]\nassert sum_deepest_nesting(['']) == [0]\nassert sum_deepest_nesting(['(((())))', '(()())']) == [4, 2]"
    },
    {
        "id": 7,
        "raw_problem": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n",
        "raw_solution": "    return [x for x in strings if substring in x]\n",
        "new_problem": "# Given a list of strings and a list of substrings, return a set of strings that contain at least one of the given substrings. If a string contains multiple substrings, it should only appear once in the result.\nfrom typing import List\ndef filter_by_multiple_substrings(strings: List[str], substrings: List[str]) -> List[str]:\n",
        "new_solution": "    result = []\n    for substring in substrings:\n        result.extend(filter_by_substring(strings, substring))\n    return set(result)\n\n\n",
        "test_code": "\nassert filter_by_multiple_substrings([], ['a']) == set([])\nassert filter_by_multiple_substrings(['abc', 'bacd', 'cde', 'array'], ['a', 'd']) == set(['abc', 'bacd', 'cde', 'array'])\nassert filter_by_multiple_substrings(['hello', 'world', 'python', 'programming'], ['o', 'n']) == set(['hello', 'world', 'python', 'programming'])\nassert filter_by_multiple_substrings(['apple', 'banana', 'cherry'], ['p', 'a']) == set(['apple', 'banana'])"
    },
    {
        "id": 8,
        "raw_problem": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n",
        "raw_solution": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "new_problem": "# Given a list of lists of integers, return a list of tuples where each tuple consists of the sum and product of the integers in the corresponding sublist. Additionally, calculate the total sum and total product of all integers across all sublists.\nfrom typing import List, Tuple\n\n\ndef sum_product_of_lists(lists: List[List[int]]) -> Tuple[List[Tuple[int, int]], int, int]:\n",
        "new_solution": "    \"\"\" For a given list of lists of integers, return a list of tuples where each tuple consists of the sum and product of the integers in the corresponding sublist.\n    Additionally, calculate the total sum and total product of all integers across all sublists.\n    >>> sum_product_of_lists([[1, 2], [3, 4]])\n    ([(3, 2), (7, 12)], 10, 24)\n    \"\"\"\n    results = []\n    total_sum = 0\n    total_product = 1\n    for sublist in lists:\n        sub_sum, sub_product = sum_product(sublist)\n        results.append((sub_sum, sub_product))\n        total_sum += sub_sum\n        total_product *= sub_product\n    return results, total_sum, total_product\n\n",
        "test_code": "\nassert sum_product_of_lists([[1, 2], [3, 4]]) == ([(3, 2), (7, 12)], 10, 24)\nassert sum_product_of_lists([[0], [1], [2]]) == ([(0, 0), (1, 1), (2, 2)], 3, 0)\nassert sum_product_of_lists([[], [1, 2, 3], [4, 5]]) == ([(0, 1), (6, 6), (9, 20)], 15, 120)\nassert sum_product_of_lists([[1], [1, 1], [1, 1, 1]]) == ([(1, 1), (2, 1), (3, 1)], 6, 1)"
    },
    {
        "id": 9,
        "raw_problem": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n",
        "raw_solution": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "new_problem": "# Given a list of lists of integers, generate a list of lists where each sublist contains the rolling maximum elements for the corresponding sublist in the input. Additionally, find the maximum element across all sublists at each rolling position and return this as a single list.\nfrom typing import List\n\n\ndef rolling_max_across_lists(list_of_lists: List[List[int]]) -> Tuple[List[List[int]], List[int]]:\n",
        "new_solution": "    rolling_max_lists = [rolling_max(sublist) for sublist in list_of_lists]\n    max_across_lists = [max(elements) for elements in zip(*rolling_max_lists)]\n    return rolling_max_lists, max_across_lists\n\n# Example usage:\n# rolling_max_across_lists([[1, 2, 3, 2, 3, 4, 2], [5, 6, 2, 8, 3, 1, 9]])\n",
        "test_code": "\nassert rolling_max_across_lists([[1, 2, 3, 2, 3, 4, 2], [5, 6, 2, 8, 3, 1, 9]]) == ([[1, 2, 3, 3, 3, 4, 4], [5, 6, 6, 8, 8, 8, 9]], [5, 6, 6, 8, 8, 8, 9])\nassert rolling_max_across_lists([[4, 3, 2, 1], [1, 2, 3, 4]]) == ([[4, 4, 4, 4], [1, 2, 3, 4]], [4, 4, 4, 4])\nassert rolling_max_across_lists([[1], [1]]) == ([[1], [1]], [1])"
    },
    {
        "id": 10,
        "raw_problem": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n",
        "raw_solution": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "new_problem": "# Given a list of strings, find the shortest palindrome for each string and then concatenate all the resulting palindromes into a single string. If the list is empty, return an empty string.\ndef concatenate_palindromes(strings: list) -> str:\n",
        "new_solution": "    \"\"\" Concatenate the shortest palindrome for each string in the list.\n    >>> concatenate_palindromes(['cat', 'cata'])\n    'cataccatac'\n    >>> concatenate_palindromes([''])\n    ''\n    >>> concatenate_palindromes([])\n    ''\n    \"\"\"\n    return ''.join(make_palindrome(s) for s in strings)\n\n",
        "test_code": "\nassert concatenate_palindromes(['cat', 'cata']) == 'cataccatac'\nassert concatenate_palindromes(['']) == ''\nassert concatenate_palindromes([]) == ''\nassert concatenate_palindromes(['a', 'ab', 'abc']) == 'aabaabcba'"
    },
    {
        "id": 11,
        "raw_problem": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n",
        "raw_solution": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "new_problem": "# Given a list of binary strings, perform a cumulative XOR operation on them. The cumulative XOR operation means that for each string in the list, XOR it with the result of all previous XOR operations. Return the final result as a string.\nfrom typing import List\n\n\ndef cumulative_xor(binary_strings: List[str]) -> str:\n",
        "new_solution": "    \"\"\"\n    Given a list of binary strings, perform a cumulative XOR operation on them.\n    The cumulative XOR operation means that for each string in the list, XOR it with the result of all previous XOR operations.\n    Return the final result as a string.\n    >>> cumulative_xor(['010', '110', '101'])\n    '001'\n    \"\"\"\n    result = binary_strings[0]\n    for binary_string in binary_strings[1:]:\n        result = string_xor(result, binary_string)\n    return result\n\n",
        "test_code": "\nassert cumulative_xor(['010', '110', '101']) == '001'\nassert cumulative_xor(['111', '111', '111']) == '111'\nassert cumulative_xor(['000', '000', '000']) == '000'\nassert cumulative_xor(['101', '010', '111']) == '000'\nassert cumulative_xor(['110', '011', '100']) == '001'"
    },
    {
        "id": 12,
        "raw_problem": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n",
        "raw_solution": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "new_problem": "# Given a list of lists of strings, return the longest string from each sublist. If a sublist is empty, return 'EMPTY' for that sublist. If there are multiple strings of the same length in a sublist, return the first one. Return a list of these longest strings.\ndef find_longest_strings(list_of_lists: List[List[str]]) -> List[str]:\n",
        "new_solution": "    result = []\n    for sublist in list_of_lists:\n        longest_str = longest(sublist)\n        if longest_str is None:\n            result.append('EMPTY')\n        else:\n            result.append(longest_str)\n    return result\n\n",
        "test_code": "\nassert find_longest_strings([['a', 'b', 'c'], ['d', 'ee', 'fff'], []]) == ['a', 'fff', 'EMPTY']\nassert find_longest_strings([['a', 'bb', 'ccc'], ['d', 'ee', 'fff'], ['g', 'hh', 'iii']]) == ['ccc', 'fff', 'iii']\nassert find_longest_strings([[], [], []]) == ['EMPTY', 'EMPTY', 'EMPTY']\nassert find_longest_strings([['a'], ['bb'], ['ccc']]) == ['a', 'bb', 'ccc']"
    },
    {
        "id": 13,
        "raw_problem": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n",
        "raw_solution": "    while b:\n        a, b = b, a % b\n    return a\n",
        "new_problem": "# Given a list of integers, find the greatest common divisor (GCD) of all the integers in the list. You need to implement a function that takes a list of integers as input and returns their GCD.\n\nfrom typing import List\ndef gcd_of_list(lst: List[int]) -> int:\n",
        "new_solution": "    if not lst:\n        return 0\n    gcd = lst[0]\n    for num in lst[1:]:\n        gcd = greatest_common_divisor(gcd, num)\n    return gcd\n\n",
        "test_code": "\nassert gcd_of_list([3, 5]) == 1\nassert gcd_of_list([25, 15]) == 5\nassert gcd_of_list([12, 18, 24]) == 6\nassert gcd_of_list([7, 13, 19]) == 1\nassert gcd_of_list([0, 10, 20]) == 10\nassert gcd_of_list([]) == 0"
    },
    {
        "id": 14,
        "raw_problem": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n",
        "raw_solution": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "new_problem": "# Given a list of strings, return a list of lists where each sublist contains all prefixes of the corresponding string in the input list, sorted from shortest to longest. If the input list is empty, return an empty list.\nfrom typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n",
        "new_solution": "    return [string[:i] for i in range(1, len(string) + 1)]\n\n\ndef all_prefixes_for_list(strings: List[str]) -> List[List[str]]:\n    return [all_prefixes(s) for s in strings]\n\n",
        "test_code": "\nassert all_prefixes_for_list(['abc', 'def']) == [['a', 'ab', 'abc'], ['d', 'de', 'def']]\nassert all_prefixes_for_list(['']) == [[]]\nassert all_prefixes_for_list([]) == []\nassert all_prefixes_for_list(['single']) == [['s', 'si', 'sin', 'sing', 'singl', 'single']]"
    },
    {
        "id": 15,
        "raw_problem": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n",
        "raw_solution": "    return ' '.join([str(x) for x in range(n + 1)])\n",
        "new_problem": "# Given a list of integers, return a single string that concatenates the space-delimited sequences starting from 0 up to each integer in the list. If the list is empty, return an empty string.\nfrom typing import List\ndef concatenated_sequences(lst: List[int]) -> str:\n",
        "new_solution": "    return ' '.join(string_sequence(n) for n in lst) if lst else ''\n\n",
        "test_code": "\nassert concatenated_sequences([0, 5, 3]) == '0 0 1 2 3 4 5 0 1 2 3'\nassert concatenated_sequences([]) == ''\nassert concatenated_sequences([1, 1, 1]) == '0 1 0 1 0 1'\nassert concatenated_sequences([10]) == '0 1 2 3 4 5 6 7 8 9 10'"
    },
    {
        "id": 16,
        "raw_problem": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n",
        "raw_solution": "    return len(set(string.lower()))\n",
        "new_problem": "# Given a list of strings, find out how many distinct characters (regardless of case) are present across all strings. For example, if the list is ['xyzXYZ', 'Jerry'], the output should be 6 because the distinct characters are 'x', 'y', 'z', 'j', 'e', 'r'.\ndef count_distinct_characters_across_strings(strings: list) -> int:\n",
        "new_solution": "    distinct_characters = set()\n    for string in strings:\n        distinct_characters.update(string.lower())  # Converting to lowercase for case-insensitive counting\n    return len(distinct_characters)\n\n",
        "test_code": "\nassert count_distinct_characters_across_strings(['xyzXYZ', 'Jerry']) == 6\nassert count_distinct_characters_across_strings(['Hello', 'world']) == 7\nassert count_distinct_characters_across_strings(['Python', 'java']) == 9\nassert count_distinct_characters_across_strings(['', '']) == 0\nassert count_distinct_characters_across_strings(['Aa', 'aA']) == 1"
    },
    {
        "id": 17,
        "raw_problem": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n",
        "raw_solution": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "new_problem": "# Given a list of musical note strings, each representing a measure in a piece of music, calculate the total number of beats for each measure and return the sum of all beats in the piece. Each measure is separated by a space and the notes within a measure are also separated by a space. Use the parse_music function to parse each measure and sum the beats.\nfrom typing import List\n\n\ndef total_beats(music_measures: List[str]) -> int:\n",
        "new_solution": "    total_beats = 0\n    for measure in music_measures:\n        total_beats += sum(parse_music(measure))\n    return total_beats\n\n",
        "test_code": "\nassert total_beats(['o o| .|', 'o| o| .| .|', 'o o']) == 21\nassert total_beats(['o| .| o| .|', 'o o o']) == 18\nassert total_beats(['.| .| .| .|', 'o o| o| o']) == 16"
    },
    {
        "id": 18,
        "raw_problem": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n",
        "raw_solution": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "new_problem": "# Given a list of strings and a list of substrings, find the total number of times each substring appears in the list of strings. Return a dictionary where the keys are the substrings and the values are the total counts across all strings.\ndef total_substring_counts(strings: list, substrings: list) -> dict:\n",
        "new_solution": "    counts = {substring: 0 for substring in substrings}\n    for string in strings:\n        for substring in substrings:\n            counts[substring] += how_many_times(string, substring)\n    return counts\n\n",
        "test_code": "\nassert total_substring_counts(['aaa', 'aaaa'], ['a', 'aa']) == {'a': 7, 'aa': 5}\nassert total_substring_counts(['', 'test'], ['t', 'st']) == {'t': 2, 'st': 1}\nassert total_substring_counts(['hello', 'world'], ['l', 'o']) == {'l': 3, 'o': 2}"
    },
    {
        "id": 19,
        "raw_problem": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n",
        "raw_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "new_problem": "# Given a list of space-delimited strings, each representing a sequence of numerals from 'zero' to 'nine', sort each individual string from smallest to largest and then concatenate the sorted strings into a single string, maintaining the original order of the strings. If any string contains an invalid numeral, it should be replaced with an empty string in the final result.\nfrom typing import List\n\n\ndef sort_and_concatenate(sequences: List[str]) -> str:\n",
        "new_solution": "    numeral_order = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    sorted_sequences = []\n    for seq in sequences:\n        try:\n            sorted_seq = ' '.join(sorted(seq.split(), key=lambda x: numeral_order.index(x)))\n        except ValueError:\n            sorted_seq = ''\n        sorted_sequences.append(sorted_seq)\n    return ' '.join(sorted_sequences)\n\n",
        "test_code": "\nassert sort_and_concatenate(['three one five', 'two four six']) == 'one three five two four six'\nassert sort_and_concatenate(['nine eight seven', 'one two three']) == 'seven eight nine one two three'\nassert sort_and_concatenate(['zero zero', 'invalid numeral']) == 'zero zero '\nassert sort_and_concatenate(['', 'one two']) == ' one two'"
    },
    {
        "id": 20,
        "raw_problem": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n",
        "raw_solution": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "new_problem": "# Given a list of lists of numbers, find the pair of numbers across all lists that are the closest to each other. Return the pair in the order (smaller number, larger number). If there are multiple pairs with the same smallest difference, return the first one found.\nfrom typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n",
        "new_solution": "    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair\n\n\ndef find_closest_pair_across_lists(lists: List[List[float]]) -> Tuple[float, float]:\n    all_numbers = []\n    for lst in lists:\n        all_numbers.extend(lst)\n    return find_closest_elements(all_numbers)\n\n",
        "test_code": "\nassert find_closest_pair_across_lists([[1.0, 2.0, 3.0], [4.0, 5.0, 2.2]]) == (2.0, 2.2)\nassert find_closest_pair_across_lists([[1.0, 2.0, 3.0], [4.0, 5.0, 2.0]]) == (2.0, 2.0)\nassert find_closest_pair_across_lists([[1.0, 2.0, 3.0], [4.0, 5.0, 1.1]]) == (1.0, 1.1)\nassert find_closest_pair_across_lists([[1.0, 2.0, 3.0], [4.0, 5.0, 1.0]]) == (1.0, 1.0)"
    },
    {
        "id": 21,
        "raw_problem": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n",
        "raw_solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
        "new_problem": "# Given a list of lists of numbers (each sublist containing at least two elements), apply a linear transform to each sublist such that the smallest number in each sublist will become 0 and the largest will become 1. Then, combine all the transformed sublists into a single list and apply the same linear transform to this combined list, ensuring the smallest number in the combined list becomes 0 and the largest becomes 1.\nfrom typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n",
        "new_solution": "    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    rescaled = [(x - min_val) / (max_val - min_val) for x in numbers]\n    return rescaled\n\ndef rescale_nested_lists(nested_lists: List[List[float]]) -> List[float]:\n    \"\"\" Given a list of lists of numbers, apply a linear transform to each sublist\n    such that the smallest number in each sublist will become 0 and the largest will become 1.\n    Then, combine all the transformed sublists into a single list and apply the same\n    linear transform to this combined list.\n    \"\"\"\n    rescaled_sublists = []\n    \n    for sublist in nested_lists:\n        if not sublist:  # Check for empty sublist and handle accordingly\n            rescaled_sublists.append([])\n            continue\n        \n        # Directly check for identical values\n        if len(set(sublist)) == 1:  # All values are the same\n            rescaled_sublists.append([0.0] * len(sublist))\n        else:\n            rescaled_sublist = rescale_to_unit(sublist)\n            rescaled_sublists.append(rescaled_sublist)\n    \n    combined_list = [num for sublist in rescaled_sublists for num in sublist]\n    \n    # Final rescaling of the combined list\n    final_rescaled_list = rescale_to_unit(combined_list)\n    return final_rescaled_list\n\n",
        "test_code": "\nassert rescale_nested_lists([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]) == [0.0, 0.5, 1.0, 0.0, 0.5, 1.0, 0.0, 0.5, 1.0]\nassert rescale_nested_lists([[0.0, 1.0], [2.0, 3.0], [4.0, 5.0]]) == [0.0, 1.0, 0.0, 1.0, 0.0, 1.0]"
    },
    {
        "id": 22,
        "raw_problem": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n",
        "raw_solution": "    return [x for x in values if isinstance(x, int)]\n",
        "new_problem": "# Given a list of lists containing any Python values, filter out all non-integer values from each sublist and return a new list of lists containing only the integers. If a sublist becomes empty after filtering, it should not be included in the final result.\nfrom typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n",
        "new_solution": "    return [value for value in values if isinstance(value, int)]\n\n\ndef filter_nested_lists(nested_values: List[List[Any]]) -> List[List[int]]:\n    filtered_lists = [filter_integers(sublist) for sublist in nested_values]\n    return [sublist for sublist in filtered_lists if sublist]\n\n",
        "test_code": "\nassert filter_nested_lists([['a', 3.14, 5], [1, 2, 'abc', {}, []]]) == [[5], [1, 2]]\nassert filter_nested_lists([[1, 'b', 3], [4, 5, 'c'], [6, 7, 8]]) == [[1, 3], [4, 5], [6, 7, 8]]\nassert filter_nested_lists([[1, 2, 3], ['a', 'b', 'c'], [4, 5, 6]]) == [[1, 2, 3], [4, 5, 6]]\nassert filter_nested_lists([[1, 'a', 2], [], [3, 'b', 4]]) == [[1, 2], [3, 4]]\nassert filter_nested_lists([[], [1, 2, 3], []]) == [[1, 2, 3]]"
    },
    {
        "id": 23,
        "raw_problem": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n",
        "raw_solution": "    return len(string)\n",
        "new_problem": "# Given a list of strings, write a function to return the total length of all strings combined. If the list is empty, return 0.\ndef total_length(strings: list) -> int:\n",
        "new_solution": "    return sum(strlen(s) for s in strings)\n\n",
        "test_code": "\nassert total_length(['hello', 'world']) == 10\nassert total_length(['python', 'programming']) == 17\nassert total_length([]) == 0\nassert total_length(['a', 'bc', 'def']) == 6"
    },
    {
        "id": 24,
        "raw_problem": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n",
        "raw_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "new_problem": "# Given a list of integers, find the largest number that divides each of the numbers in the list evenly, smaller than the smallest number in the list.\ndef largest_common_divisor(numbers: list) -> int:\n    \"\"\" For a given list of integers, find the largest number that divides each of the numbers in the list evenly, smaller than the smallest number in the list\n    >>> largest_common_divisor([15, 30, 45])\n    15\n    \"\"\"\n",
        "new_solution": "    if not numbers:  # Check for empty list\n        return 0\n\n    smallest = min(numbers)  # Find the smallest number in the list\n    common_divisor = smallest  # Start with the smallest number\n\n    while common_divisor > 1:  # Check for divisors until we reach 1\n        if all(num % common_divisor == 0 for num in numbers):\n            return common_divisor\n        common_divisor = largest_divisor(common_divisor)  # Get the largest divisor smaller than current common_divisor\n\n    return 1  # If no common divisor is found, return 1\n\n\n",
        "test_code": "\nassert largest_common_divisor([15, 30, 45]) == 15\nassert largest_common_divisor([10, 20, 30]) == 10\nassert largest_common_divisor([7, 14, 21]) == 7\nassert largest_common_divisor([16, 32, 64]) == 16\nassert largest_common_divisor([9, 18, 27]) == 9"
    },
    {
        "id": 25,
        "raw_problem": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n",
        "raw_solution": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "new_problem": "# Given a list of integers, return a list of lists where each sublist contains the prime factors of the corresponding integer in the original list. The prime factors should be listed in ascending order, and each factor should appear as many times as it does in the factorization of the integer.\nfrom typing import List\n\n\ndef factorize_list(numbers: List[int]) -> List[List[int]]:\n",
        "new_solution": "    \"\"\" Return a list of lists where each sublist contains the prime factors of the corresponding integer in the input list.\n    Each sublist should be in ascending order, and each factor should appear as many times as it does in the factorization of the integer.\n    >>> factorize_list([8, 25, 70])\n    [[2, 2, 2], [5, 5], [2, 5, 7]]\n    \"\"\"\n    return [factorize(n) for n in numbers]\n\n# Assuming factorize function is defined as in the raw question\n\n",
        "test_code": "\nassert factorize_list([8, 25, 70]) == [[2, 2, 2], [5, 5], [2, 5, 7]]\nassert factorize_list([10, 12, 14]) == [[2, 5], [2, 2, 3], [2, 7]]\nassert factorize_list([1, 2, 3]) == [[], [2], [3]]\nassert factorize_list([49, 64, 81]) == [[7, 7], [2, 2, 2, 2, 2, 2], [3, 3, 3, 3]]"
    },
    {
        "id": 26,
        "raw_problem": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n",
        "raw_solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "new_problem": "# Given a list of lists of integers, remove all elements that occur more than once across all lists. Keep the order of elements left the same as in the input. For example, given [[1, 2, 3, 2, 4], [2, 3, 5]], the output should be [[1, 4], [5]].\nfrom typing import List\ndef remove_duplicates_across_lists(lists: List[List[int]]) -> List[List[int]]:\n",
        "new_solution": "    all_elements = [element for sublist in lists for element in sublist]\n    unique_elements = remove_duplicates(all_elements)\n    result = []\n    for sublist in lists:\n        new_sublist = [element for element in sublist if element in unique_elements]\n        result.append(new_sublist)\n    return result\n\n\n",
        "test_code": "\nassert remove_duplicates_across_lists([[1, 2, 3, 2, 4], [2, 3, 5]]) == [[1, 4], [5]]\nassert remove_duplicates_across_lists([[1, 1, 2, 2], [3, 3, 4, 4]]) == [[], []]\nassert remove_duplicates_across_lists([[1, 2, 3], [4, 5, 6]]) == [[1, 2, 3], [4, 5, 6]]\nassert remove_duplicates_across_lists([[1, 2, 3, 4, 5], [5, 4, 3, 2, 1]]) == [[], []]"
    },
    {
        "id": 27,
        "raw_problem": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n",
        "raw_solution": "    return string.swapcase()\n",
        "new_problem": "# Given a list of strings, flip the case of each character in each string and then concatenate all the strings together. Return the resulting string.\ndef flip_and_concatenate(strings: list) -> str:\n",
        "new_solution": "    return ''.join(flip_case(s) for s in strings)\n\n",
        "test_code": "\nassert flip_and_concatenate(['Hello', 'World']) == 'hELLOwORLD'\nassert flip_and_concatenate(['Python', 'Programming']) == 'pYTHONpROGRAMMING'\nassert flip_and_concatenate(['123', 'Test']) == '123tEST'\nassert flip_and_concatenate(['', 'Empty']) == 'eMPTY'\nassert flip_and_concatenate([]) == ''"
    },
    {
        "id": 28,
        "raw_problem": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n",
        "raw_solution": "    return ''.join(strings)\n",
        "new_problem": "# Given a list of lists of strings, concatenate each sublist into a single string and then concatenate all the resulting strings into a single string. Return the final concatenated string.\nfrom typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n",
        "new_solution": "    return ''.join(strings)\n\n\ndef concatenate_lists_of_strings(list_of_lists: List[List[str]]) -> str:\n    concatenated_sublists = [concatenate(sublist) for sublist in list_of_lists]\n    return concatenate(concatenated_sublists)\n\n",
        "test_code": "\nassert concatenate_lists_of_strings([['a', 'b'], ['c', 'd'], ['e', 'f']]) == 'abcdef'\nassert concatenate_lists_of_strings([['hello', 'world'], ['python', 'programming']]) == 'helloworldpythonprogramming'\nassert concatenate_lists_of_strings([[], ['a'], ['b', 'c'], []]) == 'abc'\nassert concatenate_lists_of_strings([[], [], []]) == ''"
    },
    {
        "id": 29,
        "raw_problem": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n",
        "raw_solution": "    return [x for x in strings if x.startswith(prefix)]\n\n# Given a list of strings and a list of prefixes, return a set of strings that start with any of the given prefixes. If a string matches multiple prefixes, it should only appear once in the result.\n\nfrom typing import List\n",
        "new_problem": "def filter_by_multiple_prefixes(strings: List[str], prefixes: List[str]) -> List[str]:\n",
        "new_solution": "    result = set()\n    for prefix in prefixes:\n        result.update(filter_by_prefix(strings, prefix))\n    return result\n\n\n",
        "test_code": "\nassert filter_by_multiple_prefixes([], ['a', 'b']) == set([])\nassert filter_by_multiple_prefixes(['abc', 'bcd', 'cde', 'array'], ['a', 'b']) == set(['abc', 'array', 'bcd'])\nassert filter_by_multiple_prefixes(['apple', 'banana', 'cherry', 'apricot'], ['a', 'b']) == set(['apple', 'apricot', 'banana'])\nassert filter_by_multiple_prefixes(['apple', 'banana', 'cherry', 'apricot'], ['c', 'd']) == set(['cherry'])\nassert filter_by_multiple_prefixes(['apple', 'banana', 'cherry', 'apricot'], ['a', 'b', 'c']) == set(['apple', 'apricot', 'banana', 'cherry'])\n"
    },
    {
        "id": 30,
        "raw_problem": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n",
        "raw_solution": "    return [e for e in l if e > 0]\n",
        "new_problem": "# Given a list of lists, return a list containing only the positive numbers from each sublist. If a sublist is empty, it should be ignored in the final result. The order of the numbers should be maintained as they appear in the original lists.\ndef get_all_positives(list_of_lists: list) -> list:\n",
        "new_solution": "    return [num for sublist in list_of_lists if sublist for num in get_positive(sublist)]\n\n",
        "test_code": "\nassert get_all_positives([[-1, 2, -4, 5, 6], [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]]) == [2, 5, 6, 5, 3, 2, 3, 9, 123, 1]\nassert get_all_positives([[1, 2, 3], [], [4, -5, 6], [-7, -8, -9]]) == [1, 2, 3, 4, 6]\nassert get_all_positives([[], [10, -10], [], [11, -11, 12]]) == [10, 11, 12]\nassert get_all_positives([[0, -1, -2], [-3, -4, -5], [-6, -7, -8]]) == []"
    },
    {
        "id": 31,
        "raw_problem": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n",
        "raw_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "new_problem": "# Write a function that takes a list of numbers and returns a list of tuples. Each tuple should contain a number from the input list and a boolean indicating whether the number is prime. The function should use the is_prime function to determine if a number is prime.\ndef prime_check_list(numbers):\n",
        "new_solution": "    return [(n, is_prime(n)) for n in numbers]\n\n",
        "test_code": "\nassert prime_check_list([6, 101, 11, 13441, 61, 4, 1]) == [(6, False), (101, True), (11, True), (13441, True), (61, True), (4, False), (1, False)]"
    },
    {
        "id": 32,
        "raw_problem": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n",
        "raw_solution": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "new_problem": "# Given a list of polynomials, each represented by their coefficients, find the common zero point for all polynomials if it exists. If no common zero point exists, return None. Note that each polynomial is guaranteed to have an even number of coefficients and the largest non-zero coefficient ensures a solution.\n\ndef find_common_zero(polys: list):\n",
        "new_solution": "    if not polys:\n        return None\n    common_zero = find_zero(polys[0])\n    for poly in polys[1:]:\n        zero = find_zero(poly)\n        if round(zero, 2) != round(common_zero, 2):\n            return None\n    return round(common_zero, 2)\n\n",
        "test_code": "\nassert find_common_zero([[1, 2], [-2, 4]]) == None\nassert find_common_zero([[-6, 11, -6, 1], [1, -3, 2]]) == None\nassert find_common_zero([[1, 2], [1, 3]]) == None\nassert find_common_zero([]) == None\n"
    },
    {
        "id": 33,
        "raw_problem": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n",
        "raw_solution": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "new_problem": "# Given a list of lists, where each sublist contains integers, write a function that sorts every third sublist in ascending order. If a sublist has fewer than three elements, it should remain unchanged. The function should return the modified list of lists.\ndef sort_every_third_sublist(list_of_lists: list):\n",
        "new_solution": "    for i in range(2, len(list_of_lists), 3): \n        list_of_lists[i] = sort_third(list_of_lists[i]) \n    return list_of_lists\n\n",
        "test_code": "\nassert sort_every_third_sublist([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert sort_every_third_sublist([[5, 6, 3], [4, 8, 9], [2, 1, 7]]) == [[5, 6, 3], [4, 8, 9], [2, 1, 7]]\nassert sort_every_third_sublist([[1], [2], [3], [4], [5], [6]]) == [[1], [2], [3], [4], [5], [6]]\nassert sort_every_third_sublist([[9, 8, 7], [6, 5, 4], [3, 2, 1]]) == [[9, 8, 7], [6, 5, 4], [3, 2, 1]]"
    },
    {
        "id": 34,
        "raw_problem": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n",
        "raw_solution": "    return sorted(list(set(l)))\n",
        "new_problem": "# Given a list of lists, return a list of sorted unique elements from all sublists. Each sublist may contain duplicate elements, and the final list should not have any duplicates.\ndef unique_from_lists(lists: list[list]) -> list:\n",
        "new_solution": "    unique_elements = []\n    for sublist in lists:\n        unique_elements.extend(unique(sublist))\n    return unique(unique_elements)\n\n",
        "test_code": "\nassert unique_from_lists([[1, 2, 2], [3, 3, 4], [5, 6, 6]]) == [1, 2, 3, 4, 5, 6]\nassert unique_from_lists([[10, 10], [20, 30, 20], [40, 40, 50]]) == [10, 20, 30, 40, 50]\nassert unique_from_lists([[1, 1, 1], [1, 1], [1]]) == [1]"
    },
    {
        "id": 35,
        "raw_problem": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n",
        "raw_solution": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "new_problem": "# Given a list of lists, return the maximum element among all the sublists. If the list of lists is empty, return None.\ndef max_element_in_lists(list_of_lists: list):\n",
        "new_solution": "    if not list_of_lists:\n        return None\n    # Filter out empty sublists before finding maximum elements\n    max_elements = [max(sublist) for sublist in list_of_lists if sublist]\n    # If no non-empty lists, return None; otherwise, return the max of max_elements\n    return max(max_elements) if max_elements else None\n\n",
        "test_code": "\nassert max_element_in_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 9\nassert max_element_in_lists([[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], [100, 200, 300], [-1, -2, -3]]) == 300\nassert max_element_in_lists([]) == None\nassert max_element_in_lists([[], [1, 2], [3, 4, 5]]) == 5\nassert max_element_in_lists([[1], [2], [3]]) == 3"
    },
    {
        "id": 36,
        "raw_problem": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n",
        "raw_solution": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "new_problem": "# Given a list of integers, return the sum of the number of times the digit 7 appears in integers less than each integer in the list which are divisible by 11 or 13.\ndef new_fizz_buzz(lst):\n",
        "new_solution": "    return sum(fizz_buzz(n) for n in lst)\n\n",
        "test_code": "\nassert new_fizz_buzz([50, 78, 79]) == 5\nassert new_fizz_buzz([100, 200, 300]) == 19\nassert new_fizz_buzz([11, 13, 22, 26]) == 0\nassert new_fizz_buzz([77, 91, 143, 154]) == 11\nassert new_fizz_buzz([176, 234, 286, 319]) == 29"
    },
    {
        "id": 37,
        "raw_problem": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n",
        "raw_solution": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "new_problem": "# Given a list of lists, where each sublist contains integers, return a new list of lists where each sublist is transformed such that the even indexed elements are sorted and the odd indexed elements remain the same. The transformation should be applied to each sublist individually.\ndef transform_sublists(list_of_lists: list) -> list:\n",
        "new_solution": "    return [sort_even(sublist) for sublist in list_of_lists]\n\n",
        "test_code": "\nassert transform_sublists([[1, 2, 3], [5, 6, 3, 4]]) == [[1, 2, 3], [3, 6, 5, 4]]\nassert transform_sublists([[7, 8, 9], [10, 11, 12, 13]]) == [[7, 8, 9], [10, 11, 12, 13]]\nassert transform_sublists([[4, 3, 2, 1], [8, 7, 6, 5]]) == [[2, 3, 4, 1], [6, 7, 8, 5]]"
    },
    {
        "id": 38,
        "raw_problem": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n",
        "raw_solution": "    return encode_cyclic(encode_cyclic(s))\n",
        "new_problem": "# Given a list of strings, each encoded using the `encode_cyclic` function, decode all strings and concatenate the results. If the list contains an empty string, it should be ignored in the concatenation. Write a function `decode_all_cyclic` that takes a list of encoded strings and returns the concatenated decoded strings.\ndef decode_all_cyclic(encoded_strings: list) -> str:\n",
        "new_solution": "    decoded_strings = [decode_cyclic(s) for s in encoded_strings if s]\n    return ''.join(decoded_strings)\n\n",
        "test_code": "\nassert decode_all_cyclic(['abc', 'def']) == 'cabfde'\nassert decode_all_cyclic(['123', '456', '789']) == '312645978'\nassert decode_all_cyclic(['', 'xyz']) == 'zxy'\nassert decode_all_cyclic(['abc', '', 'def']) == 'cabfde'\nassert decode_all_cyclic([]) == ''"
    },
    {
        "id": 39,
        "raw_problem": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n",
        "raw_solution": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "new_problem": "# Write a function `prime_fib_sum(n: int)` that returns the sum of the first `n` prime Fibonacci numbers. For example, if `n` is 3, the function should return the sum of the first 3 prime Fibonacci numbers, which are 2, 3, and 5, resulting in a sum of 10.\ndef prime_fib_sum(n: int):\n",
        "new_solution": "    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def prime_fib(n: int):\n        fibs = [0, 1]\n        count = 0\n        while True:\n            next_fib = fibs[-1] + fibs[-2]\n            fibs.append(next_fib)\n            if is_prime(next_fib):\n                count += 1\n                if count == n:\n                    return next_fib\n\n    sum_primes = 0\n    for i in range(1, n + 1):\n        sum_primes += prime_fib(i)\n    return sum_primes\n\n",
        "test_code": "\nassert prime_fib_sum(1) == 2\nassert prime_fib_sum(2) == 5\nassert prime_fib_sum(3) == 10\nassert prime_fib_sum(4) == 23\nassert prime_fib_sum(5) == 112"
    },
    {
        "id": 40,
        "raw_problem": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n",
        "raw_solution": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "new_problem": "# Given a list of lists of integers, determine if there exists at least one sublist that contains three distinct elements summing to zero in each of the given lists. Return True if such a sublist exists in every list, and False otherwise.\ndef all_lists_have_triples_sum_to_zero(lists: list):\n",
        "new_solution": "    for l in lists:\n        if not triples_sum_to_zero(l):\n            return False\n    return True\n\n",
        "test_code": "\nassert all_lists_have_triples_sum_to_zero([[1, 3, 5, 0], [1, 3, -2, 1], [1, 2, 3, 7]]) == False\nassert all_lists_have_triples_sum_to_zero([[2, 4, -5, 3, 9, 7], [1, 3, -2, 1], [0, 0, 0]]) == True\nassert all_lists_have_triples_sum_to_zero([[1], [2, 3, 4], [5, 6, 7]]) == False\nassert all_lists_have_triples_sum_to_zero([[1, 2, -3], [4, -1, -3], [5, -2, -3]]) == True\nassert all_lists_have_triples_sum_to_zero([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == False"
    },
    {
        "id": 41,
        "raw_problem": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n",
        "raw_solution": "    return n**2\n",
        "new_problem": "# Imagine a circular racetrack with 2n cars, where n cars are driving clockwise and n cars are driving counterclockwise. The cars start at equal intervals around the racetrack and move at the same speed. A collision occurs when a car moving clockwise meets a car moving counterclockwise. Write a function that calculates the total number of collisions that will occur during a complete lap for all cars.\n# To solve this problem, we need to consider that each pair of cars moving in opposite directions will collide exactly once per lap. Since there are n cars moving clockwise and n cars moving counterclockwise, the total number of collisions is the number of ways to choose 2 cars out of n, which is given by the combination formula C(n, 2) = n * (n - 1) / 2. This can be implemented by calling the function `car_race_collision` twice, once for the clockwise cars and once for the counterclockwise cars, and then summing the results.\ndef car_race_collision(n):\n",
        "new_solution": "    # Calculate the number of collisions for n cars moving in one direction\n    return n * (n - 1) // 2\n\n",
        "test_code": "\nassert car_race_collision(3) + car_race_collision(3) == 6\nassert car_race_collision(5) + car_race_collision(5) == 20\nassert car_race_collision(10) + car_race_collision(10) == 90\nassert car_race_collision(1) + car_race_collision(1) == 0\nassert car_race_collision(0) + car_race_collision(0) == 0\n\n"
    },
    {
        "id": 42,
        "raw_problem": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n",
        "raw_solution": "    return [(e + 1) for e in l]\n",
        "new_problem": "# Given a list of lists, increment each sublist by 1 and then increment the entire list of lists by 1. Return the final incremented list of lists.\ndef incr_nested_list(l: list):\n",
        "new_solution": "    \"\"\"Return list of lists with each sublist and the entire list incremented by 1.\"\"\"\n    incremented_sublists = [incr_list(sublist) for sublist in l]\n    # Now, we increment each sublist sum by 1 to get the outer increment.\n    return [incr_list(sublist) for sublist in incremented_sublists]\n\n",
        "test_code": "\nassert incr_nested_list([[1, 2, 3], [4, 5, 6]]) == [[3, 4, 5], [6, 7, 8]]\nassert incr_nested_list([[5, 3, 5], [2, 3, 3], [9, 0, 123]]) == [[7, 5, 7], [4, 5, 5], [11, 2, 125]]"
    },
    {
        "id": 43,
        "raw_problem": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n",
        "raw_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "new_problem": "# Given a list of lists of integers, determine if there exists a pair of integers in each sublist that sum to zero. Return True if all sublists contain such a pair, and False otherwise.\ndef all_pairs_sum_to_zero(list_of_lists):\n",
        "new_solution": "    for sublist in list_of_lists:\n        if not pairs_sum_to_zero(sublist):\n            return False\n    return True\n\n",
        "test_code": "\nassert all_pairs_sum_to_zero([[1, 3, 5, 0], [1, 3, -2, 1], [1, 2, 3, 7]]) == False\nassert all_pairs_sum_to_zero([[2, 4, -5, 3, 5, 7], [1, 2, -1, 7]]) == True\nassert all_pairs_sum_to_zero([[1], [2, 4, -2, 3, 5, 7]]) == False\nassert all_pairs_sum_to_zero([[1, 2, -3, 7], [4, -4, 5, 7]]) == False\nassert all_pairs_sum_to_zero([[1, 2, 3, 7], [1, 2, 3, 7]]) == False"
    },
    {
        "id": 44,
        "raw_problem": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n",
        "raw_solution": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
        "new_problem": "# Given a list of integers and a target base, convert each integer in the list to the target base and concatenate the results into a single string. If the list contains any number that cannot be represented in the given base (i.e., the number is negative or the base is less than 2), return 'Invalid input'. Finally, reverse the concatenated string and return it.\ndef convert_and_concatenate(numbers: list, base: int) -> str:\n",
        "new_solution": "    if base < 2:\n        return 'Invalid input'\n    converted_numbers = []\n    for number in numbers:\n        if number < 0:\n            return 'Invalid input'\n        converted_numbers.append(change_base(number, base))\n    concatenated_string = ''.join(converted_numbers)\n    return concatenated_string[::-1]\n\n",
        "test_code": "\nassert convert_and_concatenate([8, 7], 2) == '1110001'  # 1000 (8) + 111 (7) -> reverse -> 1110001\nassert convert_and_concatenate([10, 15, 3], 3) == '01021101'  # 101 (10) + 120 (15) + 10 (3) -> reverse -> 101120\nassert convert_and_concatenate([5, -3, 2], 2) == 'Invalid input'  # Negative number\nassert convert_and_concatenate([10, 20, 30], 1) == 'Invalid input'  # Base less than 2\nassert convert_and_concatenate([1, 2, 3], 10) == '321'  # 1 + 2 + 3 -> reverse -> 321\n"
    },
    {
        "id": 45,
        "raw_problem": "\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n",
        "raw_solution": "    return a * h / 2.0\n",
        "new_problem": "# Given a list of tuples where each tuple contains the length of a side and the corresponding height of multiple triangles, calculate the total area of all the triangles combined.\ndef total_triangle_area(triangles):\n",
        "new_solution": "    total_area = 0\n    for triangle in triangles:\n        total_area += triangle_area(triangle[0], triangle[1])\n    return total_area\n\n",
        "test_code": "\nassert total_triangle_area([(5, 3), (4, 2), (6, 4)]) == 23.5\nassert total_triangle_area([(1, 1), (2, 2), (3, 3)]) == 7.0\nassert total_triangle_area([]) == 0.0"
    },
    {
        "id": 46,
        "raw_problem": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n",
        "raw_solution": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "new_problem": "# The Fib4 number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n",
        "new_solution": "# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\n# Given a list of integers, compute the sum of the Fib4 values for each integer in the list. If the list contains duplicate integers, compute the Fib4 value only once for each unique integer and then sum these values. Return the total sum as the result.\nfrom typing import List\ndef sum_fib4_values(lst: List[int]) -> int:\n    unique_numbers = set(lst)\n    total_sum = sum(fib4(n) for n in unique_numbers)\n    return total_sum\n\n",
        "test_code": "\nassert sum_fib4_values([5, 6, 7]) == 26\nassert sum_fib4_values([0, 1, 2, 3]) == 2\nassert sum_fib4_values([5, 5, 6, 6, 7, 7]) == 26\nassert sum_fib4_values([10, 11, 12]) == 690\nassert sum_fib4_values([]) == 0"
    },
    {
        "id": 47,
        "raw_problem": "\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n",
        "raw_solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n",
        "new_problem": "# Given a list of lists, where each sublist contains numbers, write a function to return the median of the medians of each sublist.\ndef median_of_medians(list_of_lists: list):\n",
        "new_solution": "    \"\"\"Return the median of the medians of each sublist.\n    >>> median_of_medians([[3, 1, 2, 4, 5], [-10, 4, 6, 1000, 10, 20], [7, 8, 9]])\n    7.0\n    \"\"\"\n    medians = [median(sublist) for sublist in list_of_lists]\n    return median(medians)\n\n",
        "test_code": "\nassert median_of_medians([[3, 1, 2, 4, 5], [-10, 4, 6, 1000, 10, 20], [7, 8, 9]]) == 8.0\nassert median_of_medians([[1], [2], [3], [4], [5]]) == 3\nassert median_of_medians([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5\nassert median_of_medians([[10, 20, 30], [40, 50, 60], [70, 80, 90]]) == 50.0\nassert median_of_medians([[1, 3, 5], [2, 4, 6], [7, 9, 11]]) == 4"
    },
    {
        "id": 48,
        "raw_problem": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n",
        "raw_solution": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
        "new_problem": "# Given a list of strings, return the number of palindromic substrings in each string. A palindromic substring is a contiguous substring that reads the same forward and backward. For each string, find all possible substrings and count how many of them are palindromes.\ndef count_palindromic_substrings(strings: list) -> list:\n",
        "new_solution": "    def count_palindromes_in_string(s: str) -> int:\n        count = 0\n        for i in range(len(s)):\n            for j in range(i + 1, len(s) + 1):\n                if is_palindrome(s[i:j]):\n                    count += 1\n        return count\n\n    return [count_palindromes_in_string(s) for s in strings]\n\n",
        "test_code": "\nassert count_palindromic_substrings(['a', 'ab', 'aa']) == [1, 2, 3]\nassert count_palindromic_substrings(['abc', 'aaa', '']) == [3, 6, 0]\nassert count_palindromic_substrings(['aba', 'abba', 'abcba']) == [4, 6, 7]"
    },
    {
        "id": 49,
        "raw_problem": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n",
        "raw_solution": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
        "new_problem": "# Given a list of tuples where each tuple contains two integers (n, p), compute the sum of all 2^n modulo p for each tuple in the list. Return the final sum modulo 123.\ndef sum_modp_list(tuples_list):\n",
        "new_solution": "    result = 0\n    for n, p in tuples_list:\n        result += modp(n, p)\n        result %= 123\n    return result\n\n",
        "test_code": "\nassert sum_modp_list([(3, 5), (1101, 101), (0, 101), (3, 11), (100, 101)]) == 15\nassert sum_modp_list([(1, 2), (2, 3), (3, 4), (4, 5)]) == 2\nassert sum_modp_list([(10, 11), (100, 101), (1000, 1001)]) == 72\nassert sum_modp_list([(0, 1), (0, 2), (0, 3), (0, 4)]) == 4"
    },
    {
        "id": 50,
        "raw_problem": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n",
        "raw_solution": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "new_problem": "# Given a list of encoded messages, each encoded with the `encode_shift` function, decode all messages and concatenate the results into a single string. Then, encode this concatenated string using the `encode_shift` function again. Return the final encoded string.\ndef decode_and_reencode(encoded_messages: list) -> str:\n",
        "new_solution": "    decoded_messages = ''.join([decode_shift(msg) for msg in encoded_messages])\n    return encode_shift(decoded_messages)\n\n",
        "test_code": "\nassert decode_and_reencode(['fgh', 'klm']) == 'fghklm'\nassert decode_and_reencode(['abc', 'def']) == 'abcdef'\nassert decode_and_reencode(['xyz']) == 'xyz'"
    },
    {
        "id": 51,
        "raw_problem": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n",
        "raw_solution": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "new_problem": "# Create a function `remove_vowels_from_list` that takes a list of strings and returns a list of strings with all vowels removed from each string. The function should handle an empty list and lists containing empty strings.\ndef remove_vowels_from_list(texts):\n",
        "new_solution": "    return [remove_vowels(text) for text in texts]\n\n",
        "test_code": "\nassert remove_vowels_from_list(['']) == ['']\nassert remove_vowels_from_list(['abcdefghijklm', 'abcdef']) == ['bcdfghjklm', 'bcdf']\nassert remove_vowels_from_list(['aaaaa', 'aaBAA']) == ['', 'B']\nassert remove_vowels_from_list(['zbcd', '']) == ['zbcd', '']\nassert remove_vowels_from_list([]) == []"
    },
    {
        "id": 52,
        "raw_problem": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n",
        "raw_solution": "    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "new_problem": "# Given a list of lists, where each sublist contains numbers, determine if all numbers in each sublist are below a given threshold. Return a list of boolean values where each value corresponds to whether all numbers in the respective sublist are below the threshold.\ndef all_below_threshold(ll: list, t: int):\n",
        "new_solution": "    return [below_threshold(sublist, t) for sublist in ll]\n\n",
        "test_code": "\nassert all_below_threshold([[1, 2, 4, 10], [1, 20, 4, 10]], 100) == [True, True]\nassert all_below_threshold([[1, 2, 4, 10], [1, 20, 4, 10]], 5) == [False, False]\nassert all_below_threshold([[100, 200], [300, 400]], 50) == [False, False]\nassert all_below_threshold([[1, 2, 3], [4, 5, 6]], 10) == [True, True]"
    },
    {
        "id": 53,
        "raw_problem": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n",
        "raw_solution": "    return x + y\n",
        "new_problem": "# Given a list of tuples where each tuple contains two integers, write a function that returns the sum of the sums of all the tuples. For example, given [(1, 2), (3, 4)], the function should return 10 because (1+2) + (3+4) = 10.\ndef sum_of_tuples(tuples_list: list) -> int:\n",
        "new_solution": "    return sum(add(x, y) for x, y in tuples_list)\n\n",
        "test_code": "\nassert sum_of_tuples([(1, 2), (3, 4)]) == 10\nassert sum_of_tuples([(5, 5), (10, 10)]) == 30\nassert sum_of_tuples([(0, 0), (0, 0)]) == 0\nassert sum_of_tuples([(-1, 1), (2, -2)]) == 0"
    },
    {
        "id": 54,
        "raw_problem": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n",
        "raw_solution": "    return set(s0) == set(s1)\n",
        "new_problem": "# Given a list of words, determine if each word can be formed by rearranging the characters of any other word in the list. Return a list of boolean values indicating whether each word can be formed by rearranging the characters of any other word in the list.\ndef can_form_by_rearranging(words: list) -> list:\n",
        "new_solution": "    \"\"\"\n    Determine if each word in the list can be formed by rearranging the characters of any other word in the list.\n    >>> can_form_by_rearranging(['eabcdzzzz', 'dddzzzzzzzddeddabc', 'abcd', 'dddddddabc', 'eabcd', 'dddddddabce', 'abcd', 'dddddddabce'])\n    [True, True, True, True, True, True, True, True]\n    \"\"\"\n    result = []\n    for i in range(len(words)):\n        found = False\n        for j in range(len(words)):\n            if i != j and same_chars(words[i], words[j]):\n                found = True\n                break\n        result.append(found)\n    return result\n\n",
        "test_code": "\nassert can_form_by_rearranging(['eabcdzzzz', 'dddzzzzzzzddeddabc', 'abcd', 'dddddddabc', 'eabcd', 'dddddddabce', 'abcd', 'dddddddabce']) == [True, True, True, True, True, True, True, True]\nassert can_form_by_rearranging(['abcd', 'dcba', 'abcd', 'abcd']) == [True, True, True, True]\nassert can_form_by_rearranging(['abc', 'def', 'ghi', 'jkl']) == [False, False, False, False]\nassert can_form_by_rearranging(['abc', 'cba', 'bca', 'acb']) == [True, True, True, True]"
    },
    {
        "id": 55,
        "raw_problem": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n",
        "raw_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "new_problem": "# Given a list of integers, return a list where each element at index i is the sum of the Fibonacci numbers of all elements in the original list except the element at index i. For example, if the input list is [1, 2, 3], the output should be [fib(2) + fib(3), fib(1) + fib(3), fib(1) + fib(2)].\nfrom typing import List\ndef sum_of_fibs_except_self(lst: List[int]) -> List[int]:    \n    result = []\n    for i in range(len(lst)):\n",
        "new_solution": "        total = 0\n        for j in range(len(lst)):\n            if i != j:\n                total += fib(lst[j])\n        result.append(total)\n    return result\n\n",
        "test_code": "\nassert sum_of_fibs_except_self([1, 2, 3]) == [3, 3, 2]\nassert sum_of_fibs_except_self([0, 1, 1, 2]) == [3, 2, 2, 2]\nassert sum_of_fibs_except_self([5, 5, 5]) == [10, 10, 10]\nassert sum_of_fibs_except_self([10, 20, 30]) == [838805, 832095, 6820]"
    },
    {
        "id": 56,
        "raw_problem": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n",
        "raw_solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "new_problem": "# Given a list of bracket strings, determine if each string in the list is correctly bracketed and then return a list of booleans indicating the correctness of each string. If the list is empty, return an empty list.\ndef check_bracket_strings(bracket_list: list) -> list:\n",
        "new_solution": "    return [correct_bracketing(brackets) for brackets in bracket_list]\n\n",
        "test_code": "\nassert check_bracket_strings(['<>', '<<><>>', '><<>']) == [True, True, False]\nassert check_bracket_strings(['<', '>', '<<>>']) == [False, False, True]\nassert check_bracket_strings([]) == []\nassert check_bracket_strings(['<><>', '><><']) == [True, False]"
    },
    {
        "id": 57,
        "raw_problem": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n",
        "raw_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "new_problem": "# Given a list of lists, determine if each sublist is monotonic and if the entire list of lists is also monotonic when concatenated. Return a tuple where the first element is a list of boolean values indicating whether each sublist is monotonic, and the second element is a boolean indicating whether the concatenated list is monotonic.\ndef check_monotonic_lists(lists: list[list]) -> tuple[list[bool], bool]:\n",
        "new_solution": "    is_sublist_monotonic = [monotonic(sublist) for sublist in lists]\n    concatenated_list = [item for sublist in lists for item in sublist]\n    return (is_sublist_monotonic, monotonic(concatenated_list))\n\n",
        "test_code": "\nassert check_monotonic_lists([[1, 2, 4, 20], [4, 1, 0, -10]]) == ([True, True], False)\nassert check_monotonic_lists([[1, 20, 4, 10], [4, 1, 0, -10]]) == ([False, True], False)\nassert check_monotonic_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == ([True, True, True], True)\nassert check_monotonic_lists([[9, 8, 7], [6, 5, 4], [3, 2, 1]]) == ([True, True, True], True)\nassert check_monotonic_lists([[1, 2, 3], [3, 2, 1], [1, 2, 3]]) == ([True, True, True], False)"
    },
    {
        "id": 58,
        "raw_problem": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n",
        "raw_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "new_problem": "# Given a list of lists, find the sorted unique common elements across all lists. For example, given [[1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121], [5, 3, 2, 8]], the output should be [1, 2, 3, 5, 653].\n\ndef common_elements(lists: list):\n",
        "new_solution": "    if not lists:\n        return []\n    result = lists[0]\n    for lst in lists[1:]:\n        result = common(result, lst)\n    return sorted(result)\n\n",
        "test_code": "\nassert common_elements([[1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121], [5, 3, 2, 8]]) == [5]\nassert common_elements([[5, 3, 2, 8], [3, 2], [2, 3, 5]]) == [2, 3]\nassert common_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == []\nassert common_elements([[1, 1, 1], [1, 1, 1], [1, 1, 1]]) == [1]"
    },
    {
        "id": 59,
        "raw_problem": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n",
        "raw_solution": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "new_problem": "# Given a list of integers, find the product of the largest prime factors of each integer. If an integer is less than or equal to 1 or is a prime number, ignore it. The function should return the product of the largest prime factors of the valid integers in the list.\ndef product_of_largest_prime_factors(numbers: list):\n",
        "new_solution": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    product = 1\n    found = False\n    for number in numbers:\n        if number > 1 and not is_prime(number):\n            largest_factor = largest_prime_factor(number)\n            if largest_factor:\n                product *= largest_factor\n                found = True\n    return product if found else 0\n\n",
        "test_code": "\nassert product_of_largest_prime_factors([13195, 2048]) == 58\nassert product_of_largest_prime_factors([1, 2, 3, 4, 5]) == 2\nassert product_of_largest_prime_factors([10, 15, 21, 25, 30]) == 4375\nassert product_of_largest_prime_factors([100, 101, 102, 103, 104]) == 1105\n"
    },
    {
        "id": 60,
        "raw_problem": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n",
        "raw_solution": "    return sum(range(n + 1))\n",
        "new_problem": "# Given a list of integers, write a function that returns the sum of the sums of numbers from 1 to each integer in the list. For example, if the list is [3, 5], the function should return the sum of (1+2+3) and (1+2+3+4+5), which is 15 + 15 = 30.\ndef sum_of_sums_to_n(lst: list):\n",
        "new_solution": "    return sum(sum_to_n(n) for n in lst)\n\n",
        "test_code": "\nassert sum_of_sums_to_n([3, 5]) == 21\nassert sum_of_sums_to_n([10, 20]) == 265\nassert sum_of_sums_to_n([1, 2, 3]) == 10\nassert sum_of_sums_to_n([5, 10, 15]) == 190\nassert sum_of_sums_to_n([100, 200, 300]) == 70300"
    },
    {
        "id": 61,
        "raw_problem": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n",
        "raw_solution": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "new_problem": "# Given a list of bracket strings, determine if each string in the list is correctly bracketed. Return a list of boolean values indicating whether each string is correctly bracketed or not.\ndef check_bracket_strings(bracket_strings: list) -> list:\n",
        "new_solution": "    return [correct_bracketing(bracket) for bracket in bracket_strings]\n\n",
        "test_code": "\nassert check_bracket_strings(['(', '()', '(()())', ')()']) == [False, True, True, False]"
    },
    {
        "id": 62,
        "raw_problem": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n",
        "raw_solution": "    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "new_problem": "# Given a list of polynomials, each represented by their coefficients, compute the second derivative of each polynomial. The second derivative is obtained by applying the derivative function twice. Return a list of the second derivatives for each polynomial.\ndef second_derivative(polynomials: list) -> list:\n",
        "new_solution": "    return [derivative(derivative(poly)) for poly in polynomials]\n\n",
        "test_code": "\nassert second_derivative([[3, 1, 2, 4, 5], [1, 2, 3]]) == [[4, 24, 60], [6]]\nassert second_derivative([[1, 0, 1], [2, 0, 2]]) == [[2], [4]]\nassert second_derivative([[5], [7]]) == [[], []]"
    },
    {
        "id": 63,
        "raw_problem": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n",
        "raw_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "new_problem": "# Given a list of integers, where each integer represents the position in the FibFib sequence, write a function to return the sum of the FibFib numbers at those positions. The FibFib sequence is defined as follows:\n",
        "new_solution": "# fibfib(0) == 0\n# fibfib(1) == 0\n# fibfib(2) == 1\n# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\n# For example, if the input list is [1, 5, 8], the function should return the sum of fibfib(1), fibfib(5), and fibfib(8).\ndef sum_fibfib_positions(positions: list) -> int:\n    def fibfib(n: int):\n        if n == 0 or n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c\n\n    return sum(fibfib(pos) for pos in positions)\n\n",
        "test_code": "\nassert sum_fibfib_positions([1, 5, 8]) == 28\nassert sum_fibfib_positions([0, 2, 4]) == 3\nassert sum_fibfib_positions([3, 6, 9]) == 52\nassert sum_fibfib_positions([10, 11, 12]) == 504"
    },
    {
        "id": 64,
        "raw_problem": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n",
        "raw_solution": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "new_problem": "# Write a function `total_vowels_count` that takes a list of strings as input and returns the total number of vowels in all the strings combined. The function should consider 'a', 'e', 'i', 'o', 'u' as vowels, and 'y' as a vowel only when it is at the end of any given string in the list.\ndef total_vowels_count(strings):\n",
        "new_solution": "    total_count = 0\n    for s in strings:\n        total_count += vowels_count(s)\n    return total_count\n\n",
        "test_code": "\nassert total_vowels_count(['abcde', 'ACEDY']) == 5\nassert total_vowels_count(['hello', 'world']) == 3\nassert total_vowels_count(['python', 'programming']) == 4\nassert total_vowels_count(['sky', 'fly']) == 2\nassert total_vowels_count(['rhythm', 'syzygy']) == 1"
    },
    {
        "id": 65,
        "raw_problem": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n",
        "raw_solution": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "new_problem": "# Given a list of integers, perform a circular shift on each integer by a specified shift value. If the shift value is greater than the number of digits in the integer, reverse the digits. Return the list of transformed integers as strings.\ndef circular_shift_list(lst, shift):\n",
        "new_solution": "    return [circular_shift(x, shift) for x in lst]\n\n",
        "test_code": "\nassert circular_shift_list([12, 34, 56], 1) == ['21', '43', '65']\nassert circular_shift_list([12, 34, 56], 2) == ['12', '34', '56']\nassert circular_shift_list([123, 456, 789], 4) == ['321', '654', '987']"
    },
    {
        "id": 66,
        "raw_problem": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n",
        "raw_solution": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "new_problem": "# Given a list of strings, write a function that returns the total sum of the ASCII codes of the uppercase characters in all the strings. If a string is empty, it should be ignored in the sum.\ndef totalUppercaseSum(strings):\n",
        "new_solution": "    total_sum = 0\n    for s in strings:\n        if s:\n            total_sum += digitSum(s)\n    return total_sum\n\n",
        "test_code": "\nassert totalUppercaseSum(['abAB', 'abcCd', 'helloE']) == 267\nassert totalUppercaseSum(['woArBld', 'aAaaaXa', '']) == 284\nassert totalUppercaseSum(['', '']) == 0\nassert totalUppercaseSum(['ABC', 'DEF']) == 405\nassert totalUppercaseSum(['a', 'b', 'c']) == 0"
    },
    {
        "id": 67,
        "raw_problem": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n",
        "raw_solution": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "new_problem": "# Given a list of strings, each representing the distribution of apples and oranges in multiple baskets, and a list of integers, each representing the total number of fruits in the corresponding basket, write a function to calculate the total number of mango fruits across all baskets. Each string follows the format 'X apples and Y oranges' where X and Y are integers.\ndef total_mangoes(distributions, totals):\n",
        "new_solution": "    total_mangoes = 0\n    for s, n in zip(distributions, totals):\n        total_mangoes += fruit_distribution(s, n)\n    return total_mangoes\n\n",
        "test_code": "\nassert total_mangoes([\"5 apples and 6 oranges\", \"0 apples and 1 oranges\", \"2 apples and 3 oranges\", \"100 apples and 1 oranges\"], [19, 3, 100, 120]) == 124"
    },
    {
        "id": 68,
        "raw_problem": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n",
        "raw_solution": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "new_problem": "# Given a list of branches from a tree, where each branch is represented as an array of non-negative integer nodes, your task is to pluck the smallest even node from each branch and return a list of these plucked nodes. Each plucked node should be represented as a list containing the smallest even value and its index in the original branch. If a branch does not contain any even nodes, it should be represented as an empty list in the result. The final result should be a list of these lists, where each sublist corresponds to a branch from the input list.\ndef pluck_branches(branches):\n",
        "new_solution": "    return [pluck(branch) for branch in branches]\n\n",
        "test_code": "\nassert pluck_branches([[4,2,3], [1,2,3], [], [5, 0, 3, 0, 4, 2]]) == [[2, 1], [2, 1], [], [0, 1]]\nassert pluck_branches([[1, 3, 5], [2, 4, 6], [7, 8, 9]]) == [[], [2, 0], [8, 1]]\nassert pluck_branches([[0, 2, 4], [1, 3, 5], [6, 8, 10]]) == [[0, 0], [], [6, 0]]\nassert pluck_branches([[1], [2], [3], [4]]) == [[], [2, 0], [], [4, 0]]"
    },
    {
        "id": 69,
        "raw_problem": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n",
        "raw_solution": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "new_problem": "# You are given a list of non-empty lists of positive integers. For each list, find the greatest integer that is greater than zero, and has a frequency greater than or equal to the value of the integer itself. Return a list of these integers for each input list. If no such integer exists for a list, append -1 to the result list. Finally, return the sum of all the integers in the result list.\ndef new_search(lst_of_lsts):\n",
        "new_solution": "    result = [search(lst) for lst in lst_of_lsts]\n    return sum(result)\n\n",
        "test_code": "\nassert new_search([[4, 1, 2, 2, 3, 1], [1, 2, 2, 3, 3, 3, 4, 4, 4], [5, 5, 4, 4, 4]]) == 4\nassert new_search([[1, 1, 1, 1], [2, 2, 2, 2, 2], [3, 3, 3, 3, 3, 3]]) == 6\nassert new_search([[1], [2], [3]]) == -1\nassert new_search([[1, 2, 2, 3, 3, 3, 4, 4, 4, 4], [5, 5, 5, 5, 5, 5], [6, 6, 6, 6, 6, 6, 6]]) == 15"
    },
    {
        "id": 70,
        "raw_problem": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n",
        "raw_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "new_problem": "# Given a list of lists of integers, return a list of lists in a strange order. The strange order for each sublist should be calculated using the strange_sort_list function. Additionally, the final result should be sorted by the sum of the elements in each sublist in ascending order.\ndef strange_sort_lists(lst_of_lsts):\n",
        "new_solution": "    sorted_lsts = [strange_sort_list(lst) for lst in lst_of_lsts] \n    sorted_lsts.sort(key=sum) \n    return sorted_lsts\n\n",
        "test_code": "\nassert strange_sort_lists([[1, 2, 3, 4], [5, 5, 5, 5], []]) == [[], [1, 4, 2, 3], [5, 5, 5, 5]]\nassert strange_sort_lists([[10, 20], [1, 2, 3], [4, 5]]) == [[1, 3, 2], [4, 5], [10, 20]]\nassert strange_sort_lists([[7, 7], [1, 2, 3, 4], [5]]) == [[5], [1, 4, 2, 3], [7, 7]]"
    },
    {
        "id": 71,
        "raw_problem": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n",
        "raw_solution": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "new_problem": "# Given a list of tuples, where each tuple contains the lengths of the three sides of a triangle, return the total area of all valid triangles. If no valid triangles are found, return -1. Each tuple should be processed using the `triangle_area` function to determine if it forms a valid triangle and to calculate its area.\ndef total_triangle_area(triangles):\n",
        "new_solution": "    total_area = 0\n    for triangle in triangles:\n        area = triangle_area(*triangle)\n        if area == -1:\n            continue\n        total_area += area\n    return round(total_area, 2) if total_area > 0 else -1\n\n",
        "test_code": "\nassert total_triangle_area([(3, 4, 5), (1, 2, 10)]) == 6.00\nassert total_triangle_area([(5, 12, 13), (7, 24, 25)]) == 114.0\nassert total_triangle_area([(1, 2, 3), (1, 1, 1)]) == 0.43\nassert total_triangle_area([(1, 2, 10), (10, 20, 30)]) == -1"
    },
    {
        "id": 72,
        "raw_problem": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n",
        "raw_solution": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "new_problem": "# Given a list of objects and their maximum possible weights, determine if each object can fly according to the rules of the `will_it_fly` function. Return a list of boolean values indicating whether each object can fly or not. If the input list is empty, return an empty list.\ndef can_objects_fly(objects, weights):\n",
        "new_solution": "    return [will_it_fly(obj, w) for obj, w in zip(objects, weights)]\n\n",
        "test_code": "\nassert can_objects_fly([[1, 2], [3, 2, 3], [3]], [5, 9, 5]) == [False, True, True]\nassert can_objects_fly([[1, 2], [3, 2, 3]], [5, 1]) == [False, False]\nassert can_objects_fly([], []) == []\nassert can_objects_fly([[1, 1], [2, 2, 2]], [2, 6]) == [True, True]"
    },
    {
        "id": 73,
        "raw_problem": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n",
        "raw_solution": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "new_problem": "# Given a 2D array of integers, find the minimum number of elements that need to be changed to make each row and each column of the array palindromic. A palindromic row or column is a row or column that is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n\ndef smallest_change_2d(arr):\n",
        "new_solution": "    total_changes = 0\n    for row in arr:\n        total_changes += smallest_change(row)\n    for col in zip(*arr):\n        total_changes += smallest_change(list(col))\n    return total_changes\n\n",
        "test_code": "\nassert smallest_change_2d([[1,2,3,5,4,7,9,6], [1,2,3,4,3,2,2], [1,2,3,2,1]]) == 7\nassert smallest_change_2d([[1,2,3,4], [4,3,2,1], [1,2,2,1], [1,2,3,4]]) == 8\nassert smallest_change_2d([[1,2,3,2,1], [1,2,3,2,1], [1,2,3,2,1], [1,2,3,2,1]]) == 0"
    },
    {
        "id": 74,
        "raw_problem": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n",
        "raw_solution": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
        "new_problem": "# Given a list of lists of strings, return the list of strings that has the smallest total number of characters across all its sublists. If there are multiple lists with the same smallest total number of characters, return the first one encountered.\ndef smallest_total_match(list_of_lists):\n",
        "new_solution": "    smallest_total = float('inf')\n    smallest_list = []\n    for lst in list_of_lists:\n        current_total = sum(len(s) for s in lst)\n        if current_total < smallest_total:\n            smallest_total = current_total\n            smallest_list = lst\n    return smallest_list\n\n",
        "test_code": "\nassert smallest_total_match([[], []]) == []\nassert smallest_total_match([['hi', 'admin'], ['hI', 'Hi']]) == ['hI', 'Hi']\nassert smallest_total_match([['hi', 'admin'], ['hi', 'hi', 'admin', 'project']]) == ['hi', 'admin']\nassert smallest_total_match([['hi', 'admin'], ['hI', 'hi', 'hi']]) == ['hI', 'hi', 'hi']\nassert smallest_total_match([['4'], ['1', '2', '3', '4', '5']]) == ['4']"
    },
    {
        "id": 75,
        "raw_problem": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n",
        "raw_solution": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "new_problem": "# Write a function that takes a list of numbers and returns a list of numbers that are the multiplication of exactly 3 prime numbers, considering each number in the input list. The input list contains numbers less than 100.\ndef find_multiply_primes(numbers):\n",
        "new_solution": "    return [num for num in numbers if is_multiply_prime(num)]\n\n",
        "test_code": "\nassert find_multiply_primes([30, 42, 60, 70, 84]) == [30, 42, 70]\nassert find_multiply_primes([10, 15, 20, 25, 30]) == [20, 30]\nassert find_multiply_primes([1, 2, 3, 4, 5]) == []\nassert find_multiply_primes([2, 3, 5, 7, 11]) == []\nassert find_multiply_primes([30, 42, 60, 70, 84, 90]) == [30, 42, 70]"
    },
    {
        "id": 76,
        "raw_problem": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n",
        "raw_solution": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "new_problem": "# Given a list of numbers and a base number, determine if each number in the list is a simple power of the base number. Return a list of boolean values indicating whether each number is a simple power of the base number or not.\ndef check_powers(numbers, base):\n",
        "new_solution": "    return [is_simple_power(num, base) for num in numbers]\n\n",
        "test_code": "\nassert check_powers([1, 2, 8, 3, 5], 2) == [True, True, True, False, False]\nassert check_powers([16, 81, 49, 100], 4) == [True, False, False, False]\nassert check_powers([1, 1, 1, 1], 1) == [True, True, True, True]\nassert check_powers([], 3) == []"
    },
    {
        "id": 77,
        "raw_problem": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n",
        "raw_solution": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
        "new_problem": "# Given a list of integers, write a function that returns the sum of all the integers in the list that are cubes of some integer. You may assume the input list is always valid.\ndef sum_of_cubes(lst):\n",
        "new_solution": "    return sum(x for x in lst if iscube(x))\n\n",
        "test_code": "\nassert sum_of_cubes([1, 2, 64, 180]) == 65\nassert sum_of_cubes([-1, -8, -27, 0]) == -36\nassert sum_of_cubes([125, 216, 343, 512]) == 1196\nassert sum_of_cubes([100, 200, 300, 400]) == 0\nassert sum_of_cubes([1, 8, 27, 64, 125]) == 225"
    },
    {
        "id": 78,
        "raw_problem": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n",
        "raw_solution": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "new_problem": "# You are given a list of hexadecimal numbers as strings. Your task is to write a function that calculates the total number of prime hexadecimal digits across all the given hexadecimal numbers. A prime hexadecimal digit is one of the following: 2, 3, 5, 7, B (decimal 11), D (decimal 13). The function should return the total count of these prime digits.\ndef total_prime_hex_digits(hex_list):\n",
        "new_solution": "    return sum(hex_key(num) for num in hex_list)\n\n",
        "test_code": "\nassert total_prime_hex_digits(['AB', '1077E', 'ABED1A33', '123456789ABCDEF0', '2020']) == 15\nassert total_prime_hex_digits(['1A', '2B', '3C', '4D', '5E', '6F']) == 5\nassert total_prime_hex_digits(['0000', '1111', '2222', '3333', '4444', '5555']) == 12\nassert total_prime_hex_digits(['', 'A', 'B', 'C', 'D', 'E', 'F']) == 2\nassert total_prime_hex_digits(['123456789ABCDEF0', '0FEDCBA987654321']) == 12"
    },
    {
        "id": 79,
        "raw_problem": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n",
        "raw_solution": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "new_problem": "# You are given a list of decimal numbers. Your task is to convert each decimal number to its binary form using the `decimal_to_binary` function, then concatenate all the binary strings together, and finally, convert the concatenated binary string back to a decimal number. The final result should be returned as a string with 'db' at the beginning and at the end, similar to the output format of the `decimal_to_binary` function.\ndef convert_decimals_to_binary_and_back(decimal_list):\n",
        "new_solution": "    binary_strings = ''.join(decimal_to_binary(num)[2:-2] for num in decimal_list)\n    concatenated_binary = 'db' + binary_strings + 'db'\n    return concatenated_binary\n\n",
        "test_code": "\nassert convert_decimals_to_binary_and_back([15, 32]) == 'db1111100000db'\nassert convert_decimals_to_binary_and_back([7, 10, 12]) == 'db11110101100db'\nassert convert_decimals_to_binary_and_back([1, 2, 4, 8]) == 'db1101001000db'\nassert convert_decimals_to_binary_and_back([0]) == 'db0db'\nassert convert_decimals_to_binary_and_back([255, 255]) == 'db1111111111111111db'"
    },
    {
        "id": 80,
        "raw_problem": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n",
        "raw_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "new_problem": "# You are given a list of strings. Your task is to determine the number of happy strings in the list. A string is happy if its length is at least 3 and every 3 consecutive letters are distinct. You need to implement a function `count_happy_strings(strings)` that returns the count of happy strings in the list.\ndef count_happy_strings(strings):\n",
        "new_solution": "    return sum(1 for s in strings if is_happy(s))\n\n",
        "test_code": "\nassert count_happy_strings(['a', 'aa', 'abcd', 'aabb', 'adb', 'xyy']) == 2\nassert count_happy_strings(['abc', 'def', 'ghi', 'jkl']) == 4\nassert count_happy_strings(['aaa', 'bbb', 'ccc', 'ddd']) == 0\nassert count_happy_strings(['xyz', 'uvw', 'rst', 'opq']) == 4\nassert count_happy_strings(['a', 'ab', 'abc', 'abcd', 'abcde']) == 3"
    },
    {
        "id": 81,
        "raw_problem": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n",
        "raw_solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "new_problem": "# The teacher now wants to analyze the overall performance of her students over the semester. She has provided you with a list of lists, where each sublist contains the GPAs of a student for each semester. Your task is to write a function that calculates the overall letter grade for each student based on their GPAs across all semesters. The overall GPA for a student should be the average of their GPAs across all semesters. Use the grading scale provided in the original problem to determine the letter grade for each student.\ndef overall_letter_grades(semester_gpas):\n",
        "new_solution": "    overall_gpas = [sum(gpas) / len(gpas) for gpas in semester_gpas] \n    return numerical_letter_grade(overall_gpas)\n\n",
        "test_code": "\nassert overall_letter_grades([[4.0, 3.5], [3.0, 2.0], [1.7, 2.3], [3.3, 3.7]]) == ['A', 'B-', 'C', 'A-']"
    },
    {
        "id": 82,
        "raw_problem": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n",
        "raw_solution": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "new_problem": "# Given a list of strings, write a function that returns the count of strings with prime length and the sum of their lengths. The function should return a tuple where the first element is the count and the second element is the sum of the lengths.\ndef prime_length_count_sum(strings):\n",
        "new_solution": "    prime_count = 0\n    total_length = 0\n    for string in strings:\n        if prime_length(string):\n            prime_count += 1\n            total_length += len(string)\n    return (prime_count, total_length)\n\n",
        "test_code": "\nassert prime_length_count_sum(['Hello', 'abcdcba', 'kittens', 'orange']) == (3, 19)\nassert prime_length_count_sum(['a', 'bb', 'ccc', 'dddd']) == (2, 5)\nassert prime_length_count_sum(['racecar', 'level', 'stats']) == (3, 17)"
    },
    {
        "id": 83,
        "raw_problem": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n",
        "raw_solution": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "new_problem": "# Given a positive integer n, return the count of the numbers of n-digit positive integers that start or end with 1, and also return the count of the numbers of n-digit positive integers that start and end with 1. Additionally, calculate the ratio of the count of numbers that start and end with 1 to the count of numbers that start or end with 1.\ndef complex_starts_one_ends(n):\n",
        "new_solution": "    count_start_or_end_with_1 = starts_one_ends(n)\n    count_start_and_end_with_1 = starts_one_ends(n - 2) if n > 2 else 0\n    ratio = count_start_and_end_with_1 / count_start_or_end_with_1 if count_start_or_end_with_1 != 0 else 0\n    return count_start_or_end_with_1, count_start_and_end_with_1, ratio\n\n",
        "test_code": "\nassert complex_starts_one_ends(1) == (1, 0, 0)\nassert complex_starts_one_ends(2) == (18, 0, 0.0)\nassert complex_starts_one_ends(3) == (180, 1, 1/180)\nassert complex_starts_one_ends(4) == (1800, 18, 0.01)"
    },
    {
        "id": 84,
        "raw_problem": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n",
        "raw_solution": "    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "new_problem": "# Given a list of positive integers, return the concatenated binary representation of the sum of their digit sums. Each integer in the list should be processed individually to find its digit sum, and then the binary representation of the total sum of these digit sums should be returned.\ndef new_solve(numbers):\n",
        "new_solution": "    total_sum = sum(int(solve(number)) for number in numbers)\n    return bin(total_sum)[2:]\n\n",
        "test_code": "\nassert new_solve([1000, 150, 147]) == '10010111011'\nassert new_solve([123, 456, 789]) == '10111110111101'\nassert new_solve([10, 100, 1000]) == '11'\nassert new_solve([1, 2, 3]) == '10110'\nassert new_solve([9999, 1]) == '11000011100000101'"
    },
    {
        "id": 85,
        "raw_problem": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n",
        "raw_solution": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "new_problem": "# Given a list of lists of integers, where each sublist represents a row in a matrix, calculate the sum of all even elements that are located at odd indices in each row. Return the total sum of these elements across all rows.\ndef total_even_odd_sum(matrix):\n",
        "new_solution": "    total_sum = 0\n    for row in matrix:\n        total_sum += add(row)\n    return total_sum\n\n",
        "test_code": "\nassert total_even_odd_sum([[4, 2, 6, 7], [1, 3, 5, 8], [9, 10, 11, 12]]) == 32\nassert total_even_odd_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 10\nassert total_even_odd_sum([[10, 11], [12, 13, 14], [15, 16]]) == 16"
    },
    {
        "id": 86,
        "raw_problem": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n",
        "raw_solution": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "new_problem": "# Write a function that takes a list of strings and returns a new list where each string is the anti-shuffled version of the corresponding string in the input list. Additionally, the function should also return a single string that is the concatenation of all the anti-shuffled strings, with each string separated by a space. The function should handle lists of varying lengths, including empty lists.\ndef multi_anti_shuffle(string_list):\n",
        "new_solution": "    anti_shuffled_list = [anti_shuffle(s) for s in string_list]\n    concatenated_string = ' '.join(anti_shuffled_list)\n    return anti_shuffled_list, concatenated_string\n\n",
        "test_code": "\nassert multi_anti_shuffle(['Hi', 'hello', 'Hello World!!!']) == (['Hi', 'ehllo', 'Hello !!!Wdlor'], 'Hi ehllo Hello !!!Wdlor')\nassert multi_anti_shuffle(['', 'a', 'ab', 'abc']) == (['', 'a', 'ab', 'abc'], ' a ab abc')\nassert multi_anti_shuffle([]) == ([], '')"
    },
    {
        "id": 87,
        "raw_problem": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n",
        "raw_solution": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "new_problem": "# You are given a 2 dimensional data, as a nested lists, which is similar to matrix, however, unlike matrices, each row may contain a different number of columns. Given a list of integers, find each integer in the list and return a dictionary where the keys are the integers and the values are lists of tuples representing the coordinates of the integer in the matrix. Each tuple should be a coordinate - (row, column), starting with 0. The coordinates for each integer should be sorted initially by rows in ascending order. Also, sort coordinates of the row by columns in descending order. If an integer is not found in the matrix, its value in the dictionary should be an empty list.\ndef get_coordinates(lst, integers):\n",
        "new_solution": "    result = {integer: get_row(lst, integer) for integer in integers}\n    return result\n\n",
        "test_code": "\nassert get_coordinates([[1,2,3,4,5,6],[1,2,3,4,1,6],[1,2,3,4,5,1]], [1, 3, 5]) == {1: [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)], 3: [(0, 2), (1, 2), (2, 2)], 5: [(0, 4), (2, 4)]}\nassert get_coordinates([], [1, 2, 3]) == {1: [], 2: [], 3: []}\nassert get_coordinates([[], [1], [1, 2, 3]], [1, 2, 3]) == {1: [(1, 0), (2, 0)], 2: [(2, 1)], 3: [(2, 2)]}\nassert get_coordinates([[4, 4, 4], [4, 4], [4]], [4, 5]) == {4: [(0, 2), (0, 1), (0, 0), (1, 1), (1, 0), (2, 0)], 5: []}"
    },
    {
        "id": 88,
        "raw_problem": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n",
        "raw_solution": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "new_problem": "# Given a list of arrays, each containing non-negative integers, return a single sorted array that combines all the given arrays. The combined array should be sorted in ascending order if the total number of elements across all arrays is odd, or in descending order if the total number of elements is even. To achieve this, you must use the `sort_array` function provided, which sorts an array based on the sum of its first and last elements.\ndef combine_and_sort_arrays(arrays):\n",
        "new_solution": "    combined_array = []\n    for array in arrays:\n        combined_array.extend(array)\n    total_elements = len(combined_array)\n    if total_elements % 2 == 0:\n        return sort_array(combined_array)\n    else:\n        return sort_array(combined_array)\n\n",
        "test_code": "\nassert combine_and_sort_arrays([[2, 4, 3, 0, 1, 5], [6, 7, 8]]) == [8, 7, 6, 5, 4, 3, 2, 1, 0]\nassert combine_and_sort_arrays([[2, 4, 3, 0, 1, 5], [6, 7]]) == [0, 1, 2, 3, 4, 5, 6, 7]\nassert combine_and_sort_arrays([[5], [3], [1]]) == [5, 3, 1]\nassert combine_and_sort_arrays([[], [2, 4, 3, 0, 1, 5, 6]]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
        "id": 89,
        "raw_problem": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n",
        "raw_solution": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "new_problem": "# Create a function `encrypt_message` that takes a list of strings as an argument and returns a list of strings where each string is encrypted using the `encrypt` function. The `encrypt` function should be called for each string in the list. Additionally, the function should handle an optional argument `rotate_by` which specifies the number of places to rotate the alphabet. If `rotate_by` is not provided, it should default to 2. The `encrypt` function should be modified to accept this `rotate_by` argument.\ndef encrypt(s, rotate_by=2): \n    result = []\n    for char in s:\n",
        "new_solution": "        new_char = chr((ord(char) - ord('a') + rotate_by * 2) % 26 + ord('a'))\n        result.append(new_char)\n    return ''.join(result)\n\ndef encrypt_message(messages, rotate_by=2):\n    return [encrypt(message, rotate_by) for message in messages]\n\n",
        "test_code": "\nassert encrypt_message(['hi', 'asdfghjkl', 'gf', 'et']) == ['lm', 'ewhjklnop', 'kj', 'ix']\nassert encrypt_message(['hi', 'asdfghjkl', 'gf', 'et'], 3) == ['no', 'gyjlmnpqr', 'ml', 'kz']\nassert encrypt_message(['abc', 'xyz'], 1) == ['cde', 'zab']\nassert encrypt_message(['hello', 'world'], 0) == ['hello', 'world']"
    },
    {
        "id": 90,
        "raw_problem": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n",
        "raw_solution": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "new_problem": "# Given a list of lists of integers, write a function `next_smallest_in_lists()` that returns a list containing the 2nd smallest element from each sublist. If a sublist does not have a 2nd smallest element, append `None` to the result list for that sublist. The function should use the `next_smallest` function to find the 2nd smallest element for each sublist.\ndef next_smallest_in_lists(lst_of_lsts):\n",
        "new_solution": "    return [next_smallest(sublist) for sublist in lst_of_lsts]\n\n",
        "test_code": "\nassert next_smallest_in_lists([[1, 2, 3, 4, 5], [5, 1, 4, 3, 2], [], [1, 1]]) == [2, 2, None, None]\nassert next_smallest_in_lists([[10, 20, 30], [40, 50], [60]]) == [20, 50, None]\nassert next_smallest_in_lists([[1, 1, 1], [2, 2], [3]]) == [None, None, None]\nassert next_smallest_in_lists([[7, 8, 9], [10, 11, 12], [13, 14, 15]]) == [8, 11, 14]"
    },
    {
        "id": 91,
        "raw_problem": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n",
        "raw_solution": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "new_problem": "# Given a list of strings, each representing a paragraph, count the total number of boredoms across all paragraphs. A boredom is defined as a sentence that starts with the word 'I'. Sentences are delimited by '.', '?' or '!'. For example, if the input list is ['The sky is blue. The sun is shining. I love this weather', 'I am happy. I am excited.'], the output should be 3.\n\ndef count_total_boredoms(paragraphs):\n",
        "new_solution": "    total_boredoms = 0\n    for paragraph in paragraphs:\n        total_boredoms += is_bored(paragraph)\n    return total_boredoms\n\n",
        "test_code": "\nassert count_total_boredoms(['The sky is blue. The sun is shining. I love this weather', 'I am happy. I am excited.']) == 3\nassert count_total_boredoms(['Hello world', 'This is a test.']) == 0\nassert count_total_boredoms(['I am bored. I need a break.', 'The weather is nice.']) == 2\nassert count_total_boredoms(['I am excited. I am ready.', 'I am tired.']) == 3\nassert count_total_boredoms(['This is a test. I am testing.']) == 1"
    },
    {
        "id": 92,
        "raw_problem": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n",
        "raw_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "new_problem": "# Create a function that takes a list of tuples, where each tuple contains three numbers. The function should return a list of tuples where each tuple satisfies the condition that one of the numbers is equal to the sum of the other two, and all numbers are integers. Use the function 'any_int' to check each tuple.\ndef filter_tuples(tuples_list):\n",
        "new_solution": "    return [tup for tup in tuples_list if any_int(*tup)]\n\n",
        "test_code": "\nassert filter_tuples([(5, 2, 7), (3, 2, 2), (3, -2, 1), (3.6, -2.2, 2)]) == [(5, 2, 7), (3, -2, 1)]"
    },
    {
        "id": 93,
        "raw_problem": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n",
        "raw_solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
        "new_problem": "# Given a list of messages, encode each message using the `encode` function and then concatenate all the encoded messages into a single string. Finally, reverse the concatenated string and return it.\ndef encode_and_concatenate(messages):\n",
        "new_solution": "    encoded_messages = [encode(message) for message in messages]\n    concatenated_string = ''.join(encoded_messages)\n    return concatenated_string[::-1]\n\n",
        "test_code": "\nassert encode_and_concatenate(['test', 'This is a message']) == 'GGCSSGM C SK SKHtTSGT'\nassert encode_and_concatenate(['hello', 'world']) == 'DLRQWQLLGH'\nassert encode_and_concatenate(['Python', 'Programming']) == 'GNKMMCRGQRpNQHTYp'\nassert encode_and_concatenate(['OpenAI', 'GPT-3']) == '3-tpgkcNGPq'\nassert encode_and_concatenate(['example', 'problem']) == 'MGLBQRPGLPMCXG'"
    },
    {
        "id": 94,
        "raw_problem": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n",
        "raw_solution": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "new_problem": "# You are given a list of lists of integers. For each list, you need to find the largest prime value and return the sum of its digits. Finally, return the sum of these sums for all lists.\ndef new_skjkasdkd(lst_of_lsts):\n",
        "new_solution": "    return sum(skjkasdkd(lst) for lst in lst_of_lsts)\n\n",
        "test_code": "\nassert new_skjkasdkd([[0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3], [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1], [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3], [0,724,32,71,99,32,6,0,5,91,83,0,5,6], [0,81,12,3,1,21], [0,8,1,2,1,7]]) == 69"
    },
    {
        "id": 95,
        "raw_problem": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n",
        "raw_solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "new_problem": "# Given a list of dictionaries, return a list of dictionaries that meet the criteria of the check_dict_case function. The output should be a list of dictionaries where each dictionary has either all lower case keys or all upper case keys. If the input list is empty, return an empty list.\ndef filter_dicts_by_case(dict_list):\n",
        "new_solution": "    return [d for d in dict_list if check_dict_case(d)]\n\n",
        "test_code": "\nassert filter_dicts_by_case([{\"a\":\"apple\", \"b\":\"banana\"}, {\"A\":\"apple\", \"B\":\"banana\"}, {\"Name\":\"John\", \"Age\":\"36\"}]) == [{\"a\":\"apple\", \"b\":\"banana\"}, {\"A\":\"apple\", \"B\":\"banana\"}]\nassert filter_dicts_by_case([{\"STATE\":\"NC\", \"ZIP\":\"12345\"}, {\"name\":\"John\", \"age\":\"36\"}, {\"city\":\"Houston\"}]) == [{'STATE': 'NC', 'ZIP': '12345'}, {'name': 'John', 'age': '36'}, {'city': 'Houston'}]\nassert filter_dicts_by_case([]) == []\nassert filter_dicts_by_case([{\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}]) == []"
    },
    {
        "id": 96,
        "raw_problem": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n",
        "raw_solution": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "new_problem": "# Implement a function that takes a list of non-negative integers and returns a dictionary where each key is a unique integer from the list and the value is an array of the first n integers that are prime numbers and less than the key. For example, if the input list is [5, 11], the output should be {5: [2, 3], 11: [2, 3, 5, 7]}.\ndef generate_prime_dict(numbers):\n",
        "new_solution": "    prime_dict = {}\n    for number in numbers:\n        prime_dict[number] = count_up_to(number)\n    return prime_dict\n\n",
        "test_code": "\nassert generate_prime_dict([5, 11]) == {5: [2, 3], 11: [2, 3, 5, 7]}\nassert generate_prime_dict([0, 1, 20]) == {0: [], 1: [], 20: [2, 3, 5, 7, 11, 13, 17, 19]}\nassert generate_prime_dict([18, 1]) == {18: [2, 3, 5, 7, 11, 13, 17], 1: []}\nassert generate_prime_dict([10, 15, 2]) == {10: [2, 3, 5, 7], 15: [2, 3, 5, 7, 11, 13], 2: []}"
    },
    {
        "id": 97,
        "raw_problem": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n",
        "raw_solution": "    return abs(a % 10) * abs(b % 10)\n",
        "new_problem": "# Given a list of tuples, where each tuple contains two integers, return the sum of the products of the unit digits of each tuple. For example, if the list is [(148, 412), (19, 28), (2020, 1851)], the function should return the sum of the products of the unit digits of each tuple, which is 16 + 72 + 0 = 88.\ndef sum_of_products_of_unit_digits(tuples_list):\n",
        "new_solution": "    total_sum = 0\n    for a, b in tuples_list:\n        total_sum += multiply(a, b)\n    return total_sum\n\n",
        "test_code": "\nassert sum_of_products_of_unit_digits([(148, 412), (19, 28), (2020, 1851)]) == 88\nassert sum_of_products_of_unit_digits([(14, -15), (10, 10), (9, 9)]) == 101\nassert sum_of_products_of_unit_digits([(123, 456), (789, 123), (456, 789)]) == 99\nassert sum_of_products_of_unit_digits([(0, 0), (1, 1), (2, 2)]) == 5"
    },
    {
        "id": 98,
        "raw_problem": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n",
        "raw_solution": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "new_problem": "# Given a list of strings, count the total number of uppercase vowels in even indices across all strings. If a string is empty, it should be ignored in the count.\ndef total_count_upper(strings):\n",
        "new_solution": "    return sum(count_upper(s) for s in strings if s)\n\n",
        "test_code": "\nassert total_count_upper(['aBCdEf', 'abcdefg', 'dBBE']) == 1\nassert total_count_upper(['ABC', 'DEF', '']) == 1\nassert total_count_upper(['', 'aEiOu', 'BcD']) == 0\nassert total_count_upper(['a', 'b', 'c']) == 0\nassert total_count_upper(['AeIoU', 'BcD', 'EfGhI']) == 5"
    },
    {
        "id": 99,
        "raw_problem": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n",
        "raw_solution": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "new_problem": "# Create a function that takes a list of strings, each representing a number, and returns a list of the closest integers to each number. If a number is equidistant from two integers, round it away from zero. The function should handle multiple calls to the 'closest_integer' function to achieve this.\ndef closest_integers(values):\n",
        "new_solution": "    return [closest_integer(value) for value in values]\n\n",
        "test_code": "\nassert closest_integers(['10', '15.3']) == [10, 15]\nassert closest_integers(['14.5', '-14.5']) == [15, -15]\nassert closest_integers(['2.49', '2.50', '2.51']) == [2, 3, 3]\nassert closest_integers(['-2.49', '-2.50', '-2.51']) == [-2, -3, -3]\nassert closest_integers(['0', '0.5', '-0.5']) == [0, 1, -1]"
    },
    {
        "id": 100,
        "raw_problem": "\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n",
        "raw_solution": "    return [n + 2*i for i in range(n)]\n",
        "new_problem": "# Given a positive integer n, you have to create a pyramid of stones. The pyramid consists of multiple piles, each pile representing a level in the pyramid. The first pile has 1 stone, the second pile has 2 stones, and so on up to the nth pile which has n stones. Each pile must be constructed according to the rules of the 'make_a_pile' function. Return a list of lists where each sublist represents the stones in each level of the pyramid.\ndef create_pyramid(n):\n",
        "new_solution": "    pyramid = []\n    for i in range(1, n + 1):\n        pyramid.append(make_a_pile(i))\n    return pyramid\n\n",
        "test_code": "\nassert create_pyramid(1) == [[1]]\nassert create_pyramid(2) == [[1], [2, 4]]\nassert create_pyramid(3) == [[1], [2, 4], [3, 5, 7]]\nassert create_pyramid(4) == [[1], [2, 4], [3, 5, 7], [4, 6, 8, 10]]"
    },
    {
        "id": 101,
        "raw_problem": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n",
        "raw_solution": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
        "new_problem": "# Given a list of sentences, each separated by a newline character, your task is to split each sentence into words and return a list of lists where each inner list contains the words of a sentence. The sentences may contain words separated by commas or spaces.\ndef sentences_to_words(sentences):\n",
        "new_solution": "    return [words_string(sentence) for sentence in sentences.split('\\n')]\n\n",
        "test_code": "\nassert sentences_to_words(\"Hi, my name is John\\nOne, two, three, four, five, six\") == [['Hi', 'my', 'name', 'is', 'John'], ['One', 'two', 'three', 'four', 'five', 'six']]\nassert sentences_to_words(\"Hello world\\nThis is a test\") == [['Hello', 'world'], ['This', 'is', 'a', 'test']]"
    },
    {
        "id": 102,
        "raw_problem": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n",
        "raw_solution": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
        "new_problem": "# Given a list of tuples, where each tuple contains two positive integers representing a range [x, y], write a function that returns the sum of the biggest even integers from each range. If any range does not contain an even integer, it should be ignored in the sum. The function should return -1 if no ranges contain even integers.\ndef sum_of_biggest_evens(ranges):\n",
        "new_solution": "    total_sum = 0\n    found_even = False\n    for x, y in ranges:\n        even = choose_num(x, y)\n        if even != -1:\n            total_sum += even\n            found_even = True\n    return total_sum if found_even else -1\n\n",
        "test_code": "\nassert sum_of_biggest_evens([(12, 15), (13, 12), (10, 14)]) == 28\nassert sum_of_biggest_evens([(1, 3), (5, 7), (9, 11)]) == 18\nassert sum_of_biggest_evens([(2, 4), (6, 8), (10, 12)]) == 24\nassert sum_of_biggest_evens([(1, 1), (2, 2), (3, 3)]) == 2"
    },
    {
        "id": 103,
        "raw_problem": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n",
        "raw_solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
        "new_problem": "# You are given a list of tuples, where each tuple contains two positive integers. Your task is to compute the rounded average for each tuple, convert the result to binary, and then concatenate all the binary strings together. If any tuple contains a first integer greater than the second, append '-1' to the result string instead. Finally, return the resulting concatenated string.\ndef process_tuples(tuples):\n",
        "new_solution": "    result = '' \n    for n, m in tuples: \n        avg_binary = rounded_avg(n, m) \n        if avg_binary == -1: \n            result += '-1' \n        else: \n            result += avg_binary[2:] \n    return result\n\n",
        "test_code": "\nassert process_tuples([(1, 5), (7, 5), (10, 20), (20, 33)]) == '11-1111111010'"
    },
    {
        "id": 104,
        "raw_problem": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n",
        "raw_solution": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
        "new_problem": "# Given a list of lists of positive integers, return a sorted list of all elements that do not have any even digit across all the lists. The returned list should be sorted in increasing order.\ndef unique_digits_across_lists(list_of_lists):\n",
        "new_solution": "    result = []\n    for lst in list_of_lists:\n        result.extend(unique_digits(lst))\n    return sorted(set(result))\n\n# Helper function from the raw question\n# def unique_digits(x):\n#     return [num for num in x if all(int(digit) % 2 != 0 for digit in str(num))]\n\n",
        "test_code": "\nassert unique_digits_across_lists([[15, 33, 1422, 1], [152, 323, 1422, 10]]) == [1, 15, 33]\nassert unique_digits_across_lists([[152, 323, 1422, 10], [15, 33, 1422, 1]]) == [1, 15, 33]\nassert unique_digits_across_lists([[152, 323, 1422, 10], [152, 323, 1422, 10]]) == []"
    },
    {
        "id": 105,
        "raw_problem": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n",
        "raw_solution": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
        "new_problem": "# Given a list of arrays of integers, each containing integers between 1 and 9 inclusive, sort each array, reverse the resulting array, and then replace each digit by its corresponding name from 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'. Finally, concatenate all the transformed arrays into a single array and return it.\ndef process_arrays(arrays):\n",
        "new_solution": "    result = []\n    for arr in arrays:\n        result.extend(by_length(arr))\n    return result\n\n",
        "test_code": "\nassert process_arrays([[2, 1, 1, 4, 5, 8, 2, 3], [9, 7, 6], [1, -1, 55]]) == ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One', 'Nine', 'Seven', 'Six', 'One']\nassert process_arrays([[], [1, 2, 3], [4, 5, 6]]) == ['Three', 'Two', 'One', 'Six', 'Five', 'Four']\nassert process_arrays([[9, 9, 9], [1, 1, 1]]) == ['Nine', 'Nine', 'Nine', 'One', 'One', 'One']\nassert process_arrays([[7, 7, 7], []]) == ['Seven', 'Seven', 'Seven']\nassert process_arrays([[8, 8, 8], [2, 2, 2]]) == ['Eight', 'Eight', 'Eight', 'Two', 'Two', 'Two']"
    },
    {
        "id": 106,
        "raw_problem": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n",
        "raw_solution": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "new_problem": "# Implement the function g that takes a list of integers as a parameter, and returns a list where each element at index i is the result of applying the function f to the element at index i in the input list. The function f should be called multiple times, once for each element in the input list. The function f is defined as follows: f(n) returns a list of size n, such that the value of the element at index i is the factorial of i if i is even or the sum of numbers from 1 to i otherwise. i starts from 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\ndef g(lst):\n",
        "new_solution": "    return [f(x) for x in lst]\n\n",
        "test_code": "\nassert g([1, 2, 3, 4, 5]) == [[1], [1, 2], [1, 2, 6], [1, 2, 6, 24], [1, 2, 6, 24, 15]]\nassert g([0, 1, 2, 3, 4, 5]) == [[], [1], [1, 2], [1, 2, 6], [1, 2, 6, 24], [1, 2, 6, 24, 15]]\nassert g([5, 4, 3, 2, 1]) == [[1, 2, 6, 24, 15], [1, 2, 6, 24], [1, 2, 6], [1, 2], [1]]\nassert g([3, 3, 3]) == [[1, 2, 6], [1, 2, 6], [1, 2, 6]]"
    },
    {
        "id": 107,
        "raw_problem": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n",
        "raw_solution": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
        "new_problem": "# Given a list of positive integers, return a list of tuples where each tuple contains the number of even and odd integer palindromes within the range (1, n) for each n in the list. The input list will have at least one element and at most 10 elements, and each element will be between 1 and 1000.\ndef even_odd_palindrome_list(lst):\n",
        "new_solution": "    return [even_odd_palindrome(n) for n in lst]\n\n",
        "test_code": "\nassert even_odd_palindrome_list([3, 12]) == [(1, 2), (4, 6)]\nassert even_odd_palindrome_list([1, 10, 100]) == [(0, 1), (4, 5), (8, 10)]\nassert even_odd_palindrome_list([5, 50, 500]) == [(2, 3), (6, 7), (28, 30)]"
    },
    {
        "id": 108,
        "raw_problem": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n",
        "raw_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "new_problem": "# Write a function `count_nums_in_matrix` which takes a 2D array (matrix) of integers and returns the number of elements in the matrix which have a sum of digits > 0. If a number is negative, then its first signed digit will be negative: e.g. -123 has signed digits -1, 2, and 3. The function should iterate through each row of the matrix and use the `count_nums` function to count the qualifying elements in each row. Finally, it should sum up these counts to get the total count for the entire matrix.\ndef count_nums_in_matrix(matrix):\n",
        "new_solution": "    total_count = 0\n    for row in matrix:\n        total_count += count_nums(row)\n    return total_count\n\n",
        "test_code": "\nassert count_nums_in_matrix([]) == 0\nassert count_nums_in_matrix([[-1, 11, -11], [1, 1, 2]]) == 4\nassert count_nums_in_matrix([[1, 1, 2], [-1, -2, -3]]) == 3\nassert count_nums_in_matrix([[0, 0, 0], [0, 0, 0]]) == 0\nassert count_nums_in_matrix([[123, -456, 789], [10, -20, 30]]) == 5"
    },
    {
        "id": 109,
        "raw_problem": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n",
        "raw_solution": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "new_problem": "# Given a list of arrays, each containing unique integers, determine if it is possible to sort each array in non-decreasing order by performing right shift operations any number of times. Return a list of boolean values indicating whether each array can be sorted.\ndef can_sort_all_arrays(arrays):\n",
        "new_solution": "    result = []\n    for arr in arrays:\n        result.append(move_one_ball(arr))\n    return result\n\n",
        "test_code": "\nassert can_sort_all_arrays([[3, 4, 5, 1, 2], [3, 5, 4, 1, 2]]) == [True, False]\nassert can_sort_all_arrays([[1, 2, 3, 4, 5], [5, 1, 2, 3, 4]]) == [True, True]\nassert can_sort_all_arrays([[2, 1], [1, 2]]) == [True, True]\nassert can_sort_all_arrays([[], [1]]) == [True, True]"
    },
    {
        "id": 110,
        "raw_problem": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n",
        "raw_solution": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "new_problem": "# Given a list of lists of numbers, determine if it is possible to perform exchanges between the lists such that all lists become lists of only even numbers. Each list can exchange elements with any other list, and there is no limit on the number of exchanged elements. If it is possible to make all lists contain only even numbers, return 'YES'. Otherwise, return 'NO'.\n\ndef can_make_even_with_exchange(lst1, lst2, lst3, lst4):\n",
        "new_solution": "    # First, try exchanging with lst2\n    if exchange(lst1, lst2) == \"YES\":\n        return \"YES\"\n    \n    # Try exchanging with lst3\n    if exchange(lst1, lst3) == \"YES\":\n        return \"YES\"\n    \n    # If lst1 could not be made even, attempt to use lst4\n    # Check if lst2 can be used to help lst3 or vice versa\n    if exchange(lst1, lst4) == \"YES\":\n        if exchange(lst2, lst3) == \"YES\" or exchange(lst3, lst2) == \"YES\":\n            return \"YES\"\n    \n    return \"NO\"\n\n",
        "test_code": "\nassert can_make_even_with_exchange([1, 3, 5], [2, 4, 6], [1, 7, 9], [8, 10]) == \"YES\"  # Exchange with lst2\nassert can_make_even_with_exchange([1, 3, 5], [1, 3, 5], [7, 9], [6, 8]) == \"NO\"    # Cannot make even with any\nassert can_make_even_with_exchange([1, 2, 3], [1, 5, 7], [4, 6], [2]) == \"YES\"      # Exchange with lst3\nassert can_make_even_with_exchange([3, 1, 5], [2, 4, 8], [1, 3, 5], [12]) == \"YES\"  # Exchange with lst2 and lst4\nassert can_make_even_with_exchange([1], [1], [1], [1]) == \"NO\"                     # No even numbers in any list\n"
    },
    {
        "id": 111,
        "raw_problem": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n",
        "raw_solution": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
        "new_problem": "# Given a list of strings representing space separated lowercase letters, return a dictionary of the letter(s) with the most total repetitions across all strings and containing the corresponding total count. If several letters have the same total occurrence, return all of them.\ndef total_histogram(strings):\n",
        "new_solution": "    from collections import defaultdict\n    total_counts = defaultdict(int)\n    for string in strings:\n        letter_counts = histogram(string)\n        for letter, count in letter_counts.items():\n            total_counts[letter] += count\n    max_count = max(total_counts.values(), default=0)\n    return {letter: count for letter, count in total_counts.items() if count == max_count}\n\n",
        "test_code": "\nassert total_histogram(['a b c', 'a b b a']) == {'a': 3, 'b': 3}\nassert total_histogram(['b b b b a', 'a b c a b']) == {'b': 6}\nassert total_histogram(['', 'a b c a b']) == {'a': 2, 'b': 2}\nassert total_histogram(['a b c', 'd e f']) == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1}\nassert total_histogram([]) == {}"
    },
    {
        "id": 112,
        "raw_problem": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n",
        "raw_solution": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "new_problem": "# Given a list of tuples where each tuple contains two strings, s and c, perform the following operations for each tuple:\n",
        "new_solution": "# 1. Delete all characters in s that are equal to any character in c.\n# 2. Check if the resulting string is a palindrome.\n# 3. Return a list of tuples where each tuple contains the resulting string and True/False for the palindrome check.\n# Finally, count how many of the resulting strings are palindromes and return this count.\n\ndef process_strings(tuples_list):\n    results = [reverse_delete(s, c) for s, c in tuples_list]\n    palindrome_count = sum(is_palindrome for _, is_palindrome in results)\n    return palindrome_count\n\n",
        "test_code": "\nassert process_strings([('abcde', 'ae'), ('abcdef', 'b'), ('abcdedcba', 'ab')]) == 1\nassert process_strings([('racecar', ''), ('hello', 'ho'), ('level', 'v')]) == 2\nassert process_strings([('programming', 'g'), ('madam', 'd'), ('python', 'y')]) == 1"
    },
    {
        "id": 113,
        "raw_problem": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n",
        "raw_solution": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
        "new_problem": "# Given a list of lists of strings, where each string consists of only digits, return a list of lists. Each element i of the output should be a list where each element j of this list is a string formatted as 'the number of odd elements in the string j of the list i of the input.' where all the i's and j's should be replaced by the number of odd digits in the i'th list and j'th string of the input respectively.\ndef odd_count_nested(lst_of_lsts):\n",
        "new_solution": "    return [odd_count(lst) for lst in lst_of_lsts]\n\n",
        "test_code": "\nassert odd_count_nested([['1234567'], ['3', '11111111']]) == [[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]]"
    },
    {
        "id": 114,
        "raw_problem": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n",
        "raw_solution": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "new_problem": "# Given an array of integers nums, find the maximum sum of any non-empty sub-array of nums that is greater than a given threshold T. If no such sub-array exists, return -1. To solve this problem, you need to first find the minimum sum of any non-empty sub-array of nums, then use this information to determine the maximum sum greater than T.\ndef maxSubArraySumGreaterThanT(nums, T):\n",
        "new_solution": "    min_sum = minSubArraySum(nums)\n    if min_sum > T:\n        return min_sum\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum > T:\n            max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum if max_sum != float('-inf') else -1\n\n",
        "test_code": "\nassert maxSubArraySumGreaterThanT([2, 3, 4, 1, 2, 4], 5) == 16\nassert maxSubArraySumGreaterThanT([-1, -2, -3], -5) == -1\nassert maxSubArraySumGreaterThanT([1, 2, 3, 4, 5], 10) == 15\nassert maxSubArraySumGreaterThanT([1, -1, 1, -1, 1], 2) == -1"
    },
    {
        "id": 115,
        "raw_problem": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n",
        "raw_solution": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n",
        "new_problem": "# You are given a list of rectangular grids of wells, each with a corresponding bucket capacity. Each grid represents a different set of wells, and each well has a corresponding bucket that can be used to extract water from it. Your task is to determine the total number of times you need to lower the buckets across all grids to empty all the wells. Output the total number of times you need to lower the buckets.\ndef total_bucket_lowers(grids, capacities):\n",
        "new_solution": "    total_lowers = 0\n    for grid, capacity in zip(grids, capacities):\n        total_lowers += max_fill(grid, capacity)\n    return total_lowers\n\n",
        "test_code": "\nassert total_bucket_lowers([[[0,0,1,0], [0,1,0,0], [1,1,1,1]], [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]], [1, 2]) == 11\nassert total_bucket_lowers([[[0,0,0], [0,0,0]], [[1,1,1], [1,1,1]]], [5, 1]) == 6\nassert total_bucket_lowers([[[1,1,1], [1,1,1]], [[0,0,0], [0,0,0]]], [1, 5]) == 6\nassert total_bucket_lowers([[[1,0,1], [0,1,0]], [[1,1,1], [1,1,1]]], [2, 3]) == 4\nassert total_bucket_lowers([[[0,0,0], [0,0,0]], [[0,0,0], [0,0,0]]], [5, 5]) == 0"
    },
    {
        "id": 116,
        "raw_problem": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n",
        "raw_solution": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "new_problem": "# Given a list of lists, each containing non-negative integers, sort each sublist according to the number of ones in their binary representation in ascending order. For sublists with similar number of ones, sort based on the decimal value. Finally, sort the main list based on the sum of the number of ones in the binary representation of all elements in each sublist.\ndef new_sort_array(arr):\n",
        "new_solution": "    sorted_sublists = [sort_array(sublist) for sublist in arr]\n    sorted_sublists.sort(key=lambda sublist: sum(bin(num).count('1') for num in sublist))\n    return sorted_sublists\n\n",
        "test_code": "\nassert new_sort_array([[1, 5, 2, 3, 4], [7, 8, 9], [10, 11, 12]]) == [[8, 9, 7], [1, 2, 4, 3, 5], [10, 12, 11]]\nassert new_sort_array([[15, 16, 17], [18, 19, 20], [21, 22, 23]]) == [[16, 17, 15], [18, 20, 19], [21, 22, 23]]\nassert new_sort_array([[1, 0, 2, 3, 4], [5, 6, 7], [8, 9, 10]]) == [[0, 1, 2, 4, 3], [8, 9, 10], [5, 6, 7]]"
    },
    {
        "id": 117,
        "raw_problem": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n",
        "raw_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "new_problem": "# Given a list of strings and a natural number n, you have been tasked to implement a function that returns a list of all words from each string in the list that contain exactly n consonants, in the order these words appear in their respective strings. If a string in the list is empty, it should be ignored. The function should return a list of lists, where each sublist corresponds to the words from the respective string in the input list that meet the criteria. Note: you may assume the input strings contain only letters and spaces.\ndef select_words_from_list(strings, n):\n",
        "new_solution": "    return [select_words(s, n) for s in strings if s]\n\n",
        "test_code": "\nassert select_words_from_list([\"Mary had a little lamb\", \"simple white space\", \"Hello world\", \"Uncle sam\"], 4) == [['little'], ['simple'], ['world'], []]\nassert select_words_from_list([\"Mary had a little lamb\", \"simple white space\", \"Hello world\", \"Uncle sam\"], 3) == [['Mary', 'lamb'], ['white', 'space'], ['Hello'], ['Uncle']]\nassert select_words_from_list([\"\", \"Mary had a little lamb\", \"\", \"Hello world\"], 4) == [['little'], ['world']]"
    },
    {
        "id": 118,
        "raw_problem": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n",
        "raw_solution": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "new_problem": "# You are given a list of words. Your task is to find the closest vowel for each word that stands between two consonants from the right side of the word (case sensitive). Then, concatenate all the vowels found in the order of the words and return the resulting string. If no vowels are found for a word, concatenate an underscore '_' instead. The resulting string should be in lowercase. For example, given the list ['yogurt', 'FULL', 'quick', 'ab'], the function should return 'u_u_'.\ndef get_closest_vowels_concat(words):\n",
        "new_solution": "    result = ''\n    for word in words:\n        vowel = get_closest_vowel(word)\n        result += vowel.lower() if vowel else '_'\n    return result\n\n",
        "test_code": "\nassert get_closest_vowels_concat(['yogurt', 'FULL', 'quick', 'ab']) == 'uu__'\nassert get_closest_vowels_concat(['strength', 'apple', 'orange']) == 'e_a'\nassert get_closest_vowels_concat(['sky', 'tree', 'book']) == '___'\nassert get_closest_vowels_concat(['python', 'java', 'ruby']) == 'oau'"
    },
    {
        "id": 119,
        "raw_problem": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n",
        "raw_solution": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
        "new_problem": "# You are given a list of strings, each string consists of open parentheses '(' or close parentheses ')' only. Your job is to determine if it is possible to concatenate any number of these strings in some order, such that the resulting string will be good. A string S is considered to be good if and only if all parentheses in S are balanced. For example: the string '(())()' is good, while the string '())' is not. Return 'Yes' if there's a way to make a good string by concatenating any number of the given strings, and return 'No' otherwise.\n\ndef can_form_good_string(lst):\n",
        "new_solution": "    balance = 0\n    for s in lst:\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return 'No'\n    return 'Yes' if balance == 0 else 'No'\n\n",
        "test_code": "\nassert can_form_good_string(['()(', ')']) == 'Yes'\nassert can_form_good_string([')', ')']) == 'No'\nassert can_form_good_string(['(', '())']) == 'Yes'\nassert can_form_good_string(['()', '()']) == 'Yes'\nassert can_form_good_string(['((', '))']) == 'Yes'"
    },
    {
        "id": 120,
        "raw_problem": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n",
        "raw_solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
        "new_problem": "# Given a list of arrays, each containing integers, and a list of positive integers representing the values of k for each corresponding array, return a list of sorted lists where each sorted list contains the maximum k numbers from the corresponding array. If an array has fewer elements than k, return the sorted list of all elements in that array.\ndef maximum_for_multiple_arrays(arrays, ks):\n",
        "new_solution": "    result = []\n    for arr, k in zip(arrays, ks):\n        result.append(maximum(arr, k))\n    return result\n\n",
        "test_code": "\nassert maximum_for_multiple_arrays([[-3, -4, 5], [4, -4, 4], [-3, 2, 1, 2, -1, -2, 1]], [3, 2, 1]) == [[-4, -3, 5], [4, 4], [2]]"
    },
    {
        "id": 121,
        "raw_problem": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n",
        "raw_solution": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
        "new_problem": "# Given a list of lists of integers, return the sum of all odd elements that are in even positions across all sublists. If a sublist is empty, it should be ignored.\ndef new_solution(lst_of_lsts):\n",
        "new_solution": "    total_sum = 0\n    for lst in lst_of_lsts:\n        if lst:\n            total_sum += solution(lst)\n    return total_sum\n\n",
        "test_code": "\nassert new_solution([[5, 8, 7, 1], [3, 3, 3, 3, 3], [30, 13, 24, 321]]) == 21\nassert new_solution([[], [1, 2, 3], [4, 5, 6, 7]]) == 4\nassert new_solution([[10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20, 21]]) == 85\nassert new_solution([[22, 23, 24, 25], [], [26, 27, 28, 29, 30]]) == 0"
    },
    {
        "id": 122,
        "raw_problem": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n",
        "raw_solution": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
        "new_problem": "# Given a non-empty array of integers arr and an integer k, return the sum of the elements with at most two digits from the first k elements of arr for each subarray of length k in arr. If the length of arr is not a multiple of k, the last subarray will contain the remaining elements. For example, if arr = [111,21,3,4000,5,6,7,8,9] and k = 4, the subarrays are [111,21,3,4000] and [5,6,7,8]. The function should return the sum of the elements with at most two digits from each subarray.\ndef sum_of_two_digit_elements_in_subarrays(arr, k):\n",
        "new_solution": "    total_sum = 0\n    for i in range(0, len(arr), k):\n        subarray = arr[i:i+k]\n        total_sum += add_elements(subarray, k)\n    return total_sum\n\n",
        "test_code": "\nassert sum_of_two_digit_elements_in_subarrays([111,21,3,4000,5,6,7,8,9], 4) == 59\nassert sum_of_two_digit_elements_in_subarrays([1,2,3,4,5,6,7,8,9], 3) == 45\nassert sum_of_two_digit_elements_in_subarrays([1000,2000,3000,4000,5000], 2) == 0"
    },
    {
        "id": 123,
        "raw_problem": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n",
        "raw_solution": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
        "new_problem": "# Given a list of positive integers, return a sorted list of all odd numbers that appear in the Collatz sequences of these integers. The Collatz sequence for each integer should be computed independently.\ndef get_all_odd_collatz(numbers):\n",
        "new_solution": "    all_odd_numbers = []\n    for number in numbers:\n        all_odd_numbers.extend(get_odd_collatz(number))\n    return sorted(set(all_odd_numbers))\n\n",
        "test_code": "\nassert get_all_odd_collatz([5, 6]) == [1, 3, 5]\nassert get_all_odd_collatz([7, 8]) == [1, 5, 7, 11, 13, 17]\nassert get_all_odd_collatz([1, 2, 3]) == [1, 3, 5]\nassert get_all_odd_collatz([10, 11]) == [1, 5, 11, 13, 17]\nassert get_all_odd_collatz([13, 14]) == [1, 5, 7, 11, 13, 17]"
    },
    {
        "id": 124,
        "raw_problem": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n",
        "raw_solution": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
        "new_problem": "# You are given a list of date strings. Write a function that returns the number of valid dates and the number of invalid dates. A date is considered valid if it satisfies the rules defined in the `valid_date` function. The function should return a tuple where the first element is the count of valid dates and the second element is the count of invalid dates.\ndef count_valid_dates(dates):\n",
        "new_solution": "    valid_count = 0\n    invalid_count = 0\n    for date in dates:\n        if valid_date(date):\n            valid_count += 1\n        else:\n            invalid_count += 1\n    return (valid_count, invalid_count)\n\n",
        "test_code": "\nassert count_valid_dates(['03-11-2000', '15-01-2012', '04-0-2040', '06-04-2020', '06/04/2020']) == (2, 3)\nassert count_valid_dates(['01-31-2020', '02-29-2020', '04-31-2020', '13-01-2020']) == (1, 3)\nassert count_valid_dates(['06-04-2020', '06-04-2020', '06-04-2020']) == (3, 0)\nassert count_valid_dates([]) == (0, 0)"
    },
    {
        "id": 125,
        "raw_problem": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n",
        "raw_solution": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
        "new_problem": "# Given a list of strings, return a dictionary where each key is a string from the list and the value is a list of words split on whitespace, if no whitespaces exist in the text, split on commas ','. If no commas exist, the value should be the number of lower-case letters with odd order in the alphabet. Additionally, the dictionary should include a special key 'total_odd_letters' which is the sum of all odd order letters from all strings.\ndef process_strings(string_list):\n",
        "new_solution": "    result = {}\n    total_odd_letters = 0\n    for txt in string_list:\n        split_result = split_words(txt)\n        if isinstance(split_result, list):\n            result[txt] = split_result\n        else:\n            result[txt] = split_result\n            total_odd_letters += split_result\n    result['total_odd_letters'] = total_odd_letters\n    return result\n\n",
        "test_code": "\nassert process_strings(['Hello world!', 'Hello,world!', 'abcdef']) == {'Hello world!': ['Hello', 'world!'], 'Hello,world!': ['Hello', 'world!'], 'abcdef': 3, 'total_odd_letters': 3}\nassert process_strings(['abc def', 'ghi,jkl', 'mno']) == {'abc def': ['abc', 'def'], 'ghi,jkl': ['ghi', 'jkl'], 'mno': 1, 'total_odd_letters': 1}\nassert process_strings(['pqr', 'stu,vwx', 'yz']) == {'pqr': 2, 'stu,vwx': ['stu', 'vwx'], 'yz': 1, 'total_odd_letters': 3}"
    },
    {
        "id": 126,
        "raw_problem": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n",
        "raw_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
        "new_problem": "# Given a list of lists of numbers, return a list of booleans indicating whether each sublist is sorted in ascending order. If any sublist has more than 1 duplicate of the same number, the corresponding boolean should be False. Assume no negative numbers and only integers.\ndef check_sublists_sorted(lst_of_lsts):\n",
        "new_solution": "    return [is_sorted(sublist) for sublist in lst_of_lsts]\n\n",
        "test_code": "\nassert check_sublists_sorted([[5], [1, 2, 3, 4, 5], [1, 3, 2, 4, 5], [1, 2, 2, 3, 3, 4], [1, 2, 2, 2, 3, 4]]) == [True, True, False, True, False]"
    },
    {
        "id": 127,
        "raw_problem": "\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n",
        "raw_solution": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
        "new_problem": "# Given a list of intervals, determine if there exists a pair of intervals such that the length of their intersection is a prime number. If such a pair exists, return the indices of the intervals in the list. If no such pair exists, return an empty list. Note that the intervals are closed and each interval's start is less than or equal to its end.\ndef find_prime_intersection_pair(intervals):\n",
        "new_solution": "    n = len(intervals)\n    for i in range(n):\n        for j in range(i + 1, n):\n            result = intersection(intervals[i], intervals[j])\n            if result == \"YES\":\n                return [i, j]\n    return []\n\n",
        "test_code": "\nassert find_prime_intersection_pair([(1, 2), (2, 3)]) == []\nassert find_prime_intersection_pair([(-1, 1), (0, 4)]) == []\nassert find_prime_intersection_pair([(-3, -1), (-5, 5)]) == [0, 1]\nassert find_prime_intersection_pair([(1, 3), (2, 4)]) == []\nassert find_prime_intersection_pair([(1, 5), (3, 7), (6, 10)]) == [0, 1] "
    },
    {
        "id": 128,
        "raw_problem": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n",
        "raw_solution": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
        "new_problem": "# Given a list of lists of integers, calculate the sum of the results of the 'prod_signs' function applied to each sublist. If any sublist is empty, it should be ignored in the sum. The 'prod_signs' function returns the sum of magnitudes of integers multiplied by the product of all signs of each number in the array, represented by 1, -1, or 0.\ndef sum_prod_signs(list_of_lists):\n",
        "new_solution": "    total_sum = 0\n    for sublist in list_of_lists:\n        if sublist:\n            total_sum += prod_signs(sublist)\n    return total_sum\n\n",
        "test_code": "\nassert sum_prod_signs([[1, 2, 2, -4], [0, 1], []]) == -9\nassert sum_prod_signs([[1, 2, 3], [-1, -2, -3], [0, 0, 0]]) == 0\nassert sum_prod_signs([[], [], []]) == 0\nassert sum_prod_signs([[1, -1, 1, -1], [2, -2, 2, -2]]) == 12\nassert sum_prod_signs([[10, -20, 30], [40, -50, 60], [70, -80, 90]]) == -450"
    },
    {
        "id": 129,
        "raw_problem": "\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n",
        "raw_solution": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
        "new_problem": "# Given a 3D grid with dimensions N x N x N (N >= 2) and a positive integer k, each cell of the grid contains a value. Every integer in the range [1, N * N * N] inclusive appears exactly once on the cells of the grid. You need to find the minimum path of length k in each 2D slice of the 3D grid (i.e., for each depth level). Then, combine these paths to form a single path that traverses through each 2D slice in order. The final path should be the lexicographically smallest path among all possible combinations of paths from each 2D slice. Return an ordered list of the values on the cells that the final path go through.\ndef minPath3D(grid3D, k):\n",
        "new_solution": "    N = len(grid3D)\n    paths = []\n    for depth in range(N):\n        grid2D = grid3D[depth]\n        path = minPath(grid2D, k)\n        paths.append(path)\n    final_path = []\n    for i in range(k):\n        for path in paths:\n            final_path.append(path[i])\n    return final_path\n\n",
        "test_code": "\nassert minPath3D([[[1,2,3],[4,5,6],[7,8,9]], [[1,2,3],[4,5,6],[7,8,9]], [[1,2,3],[4,5,6],[7,8,9]]], 3) == [1, 1, 1, 2, 2, 2, 1, 1, 1]\nassert minPath3D([[[5,9,3],[4,1,6],[7,8,2]], [[5,9,3],[4,1,6],[7,8,2]], [[5,9,3],[4,1,6],[7,8,2]]], 1) == [1, 1, 1]"
    },
    {
        "id": 130,
        "raw_problem": "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n",
        "raw_solution": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n",
        "new_problem": "# Given a non-negative integer number n, you have to return a list of the first n + 1 numbers of the Tribonacci sequence for each of the first n + 1 natural numbers. For example, if n is 3, you should return a list of lists where each sublist is the Tribonacci sequence for the numbers 0 through 3.\ndef multi_tri(n):\n",
        "new_solution": "    result = []\n    for i in range(n + 1):\n        result.append(tri(i))\n    return result\n\n",
        "test_code": "\nassert multi_tri(3) == [[1], [1, 3], [1, 3, 2], [1, 3, 2, 8]]\nassert multi_tri(0) == [[1]]\nassert multi_tri(1) == [[1], [1, 3]]"
    },
    {
        "id": 131,
        "raw_problem": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n",
        "raw_solution": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "new_problem": "# Given a list of positive integers, return the sum of the products of the odd digits for each integer. If all digits of an integer are even, the product for that integer should be considered as 0. For example, given the list [1, 4, 235], the function should return 16 (1 + 0 + 15).\ndef sum_of_products_of_odd_digits(lst):\n",
        "new_solution": "    total_sum = 0  # Initialize total sum\n    for n in lst:  # Iterate over each integer in the list\n        product = digits(n)  # Calculate the product of odd digits for the current integer\n        total_sum += product  # Accumulate the product into total sum\n    return total_sum  # Finally return the total sum\n\n",
        "test_code": "\nassert sum_of_products_of_odd_digits([1, 4, 235]) == 16\nassert sum_of_products_of_odd_digits([2, 4, 6]) == 0\nassert sum_of_products_of_odd_digits([11, 13, 15]) == 9\nassert sum_of_products_of_odd_digits([123, 456, 789]) == 71\nassert sum_of_products_of_odd_digits([101, 202, 303]) == 10"
    },
    {
        "id": 132,
        "raw_problem": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n",
        "raw_solution": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
        "new_problem": "# Create a function that takes a list of strings, each containing only square brackets. The function should return True if and only if there is at least one valid subsequence of brackets in the list where at least one bracket in the subsequence is nested in at least one of the strings. Otherwise, it should return False.\ndef is_nested_in_list(strings):\n",
        "new_solution": "    for string in strings:\n        if is_nested(string):\n            return True\n    return False\n\n",
        "test_code": "\nassert is_nested_in_list(['[[]]', '[]', '[][]']) == True\nassert is_nested_in_list(['[]', '[][]', '[]']) == False\nassert is_nested_in_list(['[[]]', '[[[]]]', '[][]']) == True\nassert is_nested_in_list(['[]', '[]', '[]']) == False\nassert is_nested_in_list(['[[]]', '[]', '[][]']) == True"
    },
    {
        "id": 133,
        "raw_problem": "\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n",
        "raw_solution": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
        "new_problem": "# You are given a list of lists of numbers. You need to return the sum of the sums of squared numbers in each sublist, where each element in the sublist is rounded to the upper integer (Ceiling) first. For example, for the input [[1,2,3], [1,4,9]], the output should be 112.\ndef sum_of_sum_squares(lst_of_lsts):\n",
        "new_solution": "    total_sum = 0\n    for lst in lst_of_lsts:\n        total_sum += sum_squares(lst)\n    return total_sum\n\n",
        "test_code": "\nassert sum_of_sum_squares([[1,2,3], [1,4,9]]) == 112\nassert sum_of_sum_squares([[1,3,5,7], [1.4,4.2,0]]) == 113\nassert sum_of_sum_squares([[-2.4,1,1], [1,2,3]]) == 20\nassert sum_of_sum_squares([[1,4,9], [1,3,5,7]]) == 182\nassert sum_of_sum_squares([[1.4,4.2,0], [-2.4,1,1]]) == 35"
    },
    {
        "id": 134,
        "raw_problem": "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n",
        "raw_solution": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
        "new_problem": "# Create a function that takes a list of strings and returns a list of booleans indicating whether each string in the list ends with an alphabetical character that is not part of a word. The function should handle multiple strings and return a boolean list corresponding to each string's condition.\ndef check_if_last_char_is_a_letter_in_list(lst):\n",
        "new_solution": "    return [check_if_last_char_is_a_letter(txt) for txt in lst]\n\n",
        "test_code": "\nassert check_if_last_char_is_a_letter_in_list(['apple pie', 'apple pi e', 'apple pi e ', '']) == [False, True, False, False]\nassert check_if_last_char_is_a_letter_in_list(['hello world', 'hello world ', 'hello world!']) == [False, False, False]\nassert check_if_last_char_is_a_letter_in_list(['a b c', 'a b c ', 'a b c d']) == [True, False, True]"
    },
    {
        "id": 135,
        "raw_problem": "\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n",
        "raw_solution": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
        "new_problem": "# Given a list of integers, find the maximum sum of a subarray where each subarray is defined by indices returned by the function 'can_arrange' applied to the original list. The subarray sum should be calculated for each valid subarray and the maximum sum should be returned. If no valid subarray exists, return 0.\ndef max_subarray_sum(arr):\n",
        "new_solution": "    indices = []\n    while True:\n        index = can_arrange(arr)\n        if index == -1:\n            break\n        indices.append(index)\n        arr = arr[index+1:]\n    max_sum = 0\n    for i in indices:\n        subarray_sum = sum(arr[:i+1])\n        if subarray_sum > max_sum:\n            max_sum = subarray_sum\n    return max_sum\n\n",
        "test_code": "\nassert max_subarray_sum([1,2,4,3,5]) == 5\nassert max_subarray_sum([1,2,3]) == 0\nassert max_subarray_sum([5,4,3,2,1]) == 0\nassert max_subarray_sum([10,20,30,20,10]) == 0"
    },
    {
        "id": 136,
        "raw_problem": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n",
        "raw_solution": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "new_problem": "# Given a list of lists, find the largest negative integer and the smallest positive integer across all sublists. Return a tuple (a, b), where 'a' is the largest negative integer and 'b' is the smallest positive integer. If there are no negative or positive integers, return them as None.\ndef find_largest_smallest_across_lists(list_of_lists):\n",
        "new_solution": "    largest_negative = None\n    smallest_positive = None\n    for lst in list_of_lists:\n        a, b = largest_smallest_integers(lst)\n        if a is not None and (largest_negative is None or a > largest_negative):\n            largest_negative = a\n        if b is not None and (smallest_positive is None or b < smallest_positive):\n            smallest_positive = b\n    return (largest_negative, smallest_positive)\n\n",
        "test_code": "\nassert find_largest_smallest_across_lists([[2, 4, 1, 3, 5, 7], [-1, -3, -5, -7], [0]]) == (-1, 1)\nassert find_largest_smallest_across_lists([[], [-1, -3, -5, -7], [0]]) == (-1, None)\nassert find_largest_smallest_across_lists([[2, 4, 1, 3, 5, 7], [], [0]]) == (None, 1)\nassert find_largest_smallest_across_lists([[0], [0], [0]]) == (None, None)"
    },
    {
        "id": 137,
        "raw_problem": "\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n",
        "raw_solution": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
        "new_problem": "# Create a function that takes a list of pairs of integers, floats, or strings representing real numbers, and returns a list of the larger variables in their given variable type for each pair. If the values in a pair are equal, the corresponding element in the result list should be None. Note: If a real number is represented as a string, the floating point might be . or ,\ndef compare_many(pairs):\n",
        "new_solution": "    return [compare_one(a, b) for a, b in pairs]\n\n",
        "test_code": "\nassert compare_many([(1, 2.5), (1, '2,3'), ('5,1', '6'), ('1', 1)]) == [2.5, '2,3', '6', None]\nassert compare_many([(3, 3), ('4', '4'), (5.5, 5.5)]) == [None, None, None]\nassert compare_many([('7', 8), (9.9, '9,9'), (10, '10,1')]) == [8, None, '10,1']"
    },
    {
        "id": 138,
        "raw_problem": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n",
        "raw_solution": "    return n%2 == 0 and n >= 8\n",
        "new_problem": "# Given a list of integers, determine if each integer can be expressed as the sum of exactly 4 positive even numbers. Return a list of boolean values where each value corresponds to whether the integer at the same index in the input list can be expressed as such.\ndef can_each_be_sum_of_even(numbers):\n",
        "new_solution": "    return [is_equal_to_sum_even(num) for num in numbers]\n\n",
        "test_code": "\nassert can_each_be_sum_of_even([4, 6, 8, 10, 12]) == [False, False, True, True, True]"
    },
    {
        "id": 139,
        "raw_problem": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n",
        "raw_solution": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
        "new_problem": "# Given a list of integers, calculate the sum of the Brazilian factorials for each integer in the list. The Brazilian factorial is defined as: brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! where n > 0. For example, if the list is [1, 2, 3], the function should return the sum of the Brazilian factorials of 1, 2, and 3.\ndef sum_of_special_factorials(lst):\n",
        "new_solution": "\n    total_sum = 0\n    for num in lst:\n        total_sum += special_factorial(num)\n    return total_sum\n\n",
        "test_code": "\nassert sum_of_special_factorials([1, 2, 3]) == 15\nassert sum_of_special_factorials([4, 5]) == 34848\nassert sum_of_special_factorials([1]) == 1\nassert sum_of_special_factorials([2, 3, 4]) == 302\nassert sum_of_special_factorials([10]) == 6658606584104736522240000000"
    },
    {
        "id": 140,
        "raw_problem": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n",
        "raw_solution": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "new_problem": "# Given a list of strings, replace all spaces in each string with underscores, and if a string has more than 2 consecutive spaces, then replace all consecutive spaces with a hyphen. After processing all strings, concatenate them into a single string with each string separated by a newline character. Finally, replace all underscores in the concatenated string with asterisks.\ndef process_and_concatenate_strings(string_list):\n",
        "new_solution": "    processed_strings = [fix_spaces(s) for s in string_list]\n    concatenated_string = '\\n'.join(processed_strings)\n    final_string = concatenated_string.replace('_', '*')\n    return final_string\n\n",
        "test_code": "\nassert process_and_concatenate_strings(['Example', 'Example 1', ' Example 2', ' Example   3']) == 'Example\\nExample*1\\n*Example*2\\n*Example-3'\nassert process_and_concatenate_strings(['Hello World', '  Test   Case ', 'Another Example']) == 'Hello*World\\n**Test-Case*\\nAnother*Example'\nassert process_and_concatenate_strings(['Single']) == 'Single'\nassert process_and_concatenate_strings(['   Leading spaces', 'Trailing spaces   ', ' Both   sides   ']) == '-Leading*spaces\\nTrailing*spaces-\\n*Both-sides-'"
    },
    {
        "id": 141,
        "raw_problem": "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n",
        "raw_solution": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
        "new_problem": "# Create a function which takes a list of file names and returns a list of valid file names based on the rules defined in the `file_name_check` function. The function should return 'None' if no file names in the list are valid.\ndef validate_file_names(file_names):\n",
        "new_solution": "    valid_names = [name for name in file_names if file_name_check(name) == 'Yes']\n    return valid_names if valid_names else None\n\n",
        "test_code": "\nassert validate_file_names(['example.txt', '1example.dll', 'test.exe', 'file.doc']) == ['example.txt', 'test.exe']\nassert validate_file_names(['1234.txt', 'example..txt', 'file123.dll']) == ['file123.dll']\nassert validate_file_names(['.txt', 'exe.exe', 'dll.dll']) == ['exe.exe', 'dll.dll']\nassert validate_file_names([]) == None\nassert validate_file_names(['a1b2c3.txt', 'valid.exe', 'another.dll']) == ['a1b2c3.txt', 'valid.exe', 'another.dll']"
    },
    {
        "id": 142,
        "raw_problem": "\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n",
        "raw_solution": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "new_problem": "# Given a list of lists of integers, where each sublist represents a set of scores for a game. For each game, calculate the total score using the following rules: if the index of the sublist is even, use the sum_squares function to calculate the score; if the index of the sublist is odd, use the sum_squares function twice, summing the results of both calls. Return the total score for all games.\ndef total_score(games):\n",
        "new_solution": "    total = 0\n    for i, game in enumerate(games):\n        if i % 2 == 0:\n            total += sum_squares(game)\n        else:\n            total += sum_squares(game) + sum_squares(game)\n    return total\n\n",
        "test_code": "\nassert total_score([[1,2,3], [4,5,6]]) == 60\nassert total_score([[1,2,3], [4,5,6], [7,8,9]]) == 126\nassert total_score([[], [1,1,1]]) == 6\nassert total_score([[-1,-5,2], [-1,-5]]) == -10"
    },
    {
        "id": 143,
        "raw_problem": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n",
        "raw_solution": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
        "new_problem": "# Given a list of sentences, return a list of strings where each string contains words from the corresponding sentence whose lengths are prime numbers. The order of the words in each string should be the same as in the original sentence.\ndef words_in_sentences(sentences):\n",
        "new_solution": "    if not sentences:  # Check if the input list is empty\n        return []\n    return [words_in_sentence(sentence) if sentence else '' for sentence in sentences]\n\n",
        "test_code": "\nassert words_in_sentences([]) == []  # Test with an empty list\nassert words_in_sentences([\"\"]) == ['']  # Test with an empty string\nassert words_in_sentences([\"This is a test\", \"lets go for swimming\"]) == [\"is\", \"go for\"]\nassert words_in_sentences([\"hello world\", \"python programming is fun\"]) == ['hello world', 'programming is fun']\nassert words_in_sentences([\"a\", \"ab\", \"abc\", \"abcd\"]) == ['', 'ab', 'abc', '']\nassert words_in_sentences([\"prime numbers are fascinating\", \"two three five seven eleven\"]) == ['prime numbers are fascinating', 'two three seven']"
    },
    {
        "id": 144,
        "raw_problem": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n",
        "raw_solution": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n",
        "new_problem": "# Given a list of fractions represented as strings in the format <numerator>/<denominator>, determine if the product of any two fractions in the list simplifies to a whole number. Return a list of tuples where each tuple contains the indices of the two fractions whose product simplifies to a whole number.\ndef find_whole_number_products(fractions):\n",
        "new_solution": "    result = []\n    for i in range(len(fractions)):\n        for j in range(i + 1, len(fractions)):\n            if simplify(fractions[i], fractions[j]):\n                result.append((i, j))\n    return result\n\n",
        "test_code": "\nassert find_whole_number_products(['1/5', '5/1', '2/3']) == [(0, 1)]\nassert find_whole_number_products(['1/6', '2/1', '3/2']) == [(1, 2)]\nassert find_whole_number_products(['7/10', '10/2', '1/1']) == [(1, 2)]"
    },
    {
        "id": 145,
        "raw_problem": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n",
        "raw_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "new_problem": "# Given a list of lists of integers, write a function that sorts each sublist according to the sum of their digits and then sorts the main list based on the sum of the digits of the first element of each sublist. If two sublists have the same sum for their first elements, sort them based on their original index in the main list.\ndef complex_order_by_points(nums_list):\n",
        "new_solution": "    sorted_sublists = [order_by_points(sublist) for sublist in nums_list]\n    sorted_sublists.sort(key=lambda x: sum(int(digit) for digit in str(abs(x[0]))) if x else 0)\n    return sorted_sublists\n\n",
        "test_code": "\nassert complex_order_by_points([[1, 11], [-1, -11], [-12]]) == [[1, 11], [-1, -11], [-12]]\nassert complex_order_by_points([[100, 200], [9, 99], [8, 88]]) == [[100, 200], [8, 88], [9, 99]]\nassert complex_order_by_points([[1], [11], [111]]) == [[1], [11], [111]]\nassert complex_order_by_points([[], [1, 2], [3, 4]]) == [[], [1, 2], [3, 4]]\nassert complex_order_by_points([[1, 11], [-1, -11], [-12], [2, 22]]) == [[1, 11], [-1, -11], [2, 22], [-12]]"
    },
    {
        "id": 146,
        "raw_problem": "\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n",
        "raw_solution": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "new_problem": "# Given a list of lists of numbers, write a function that returns the total count of elements across all sublists that are greater than 10 and both first and last digits of a number are odd (1, 3, 5, 7, 9).\ndef totalSpecialFilter(nums_list):\n",
        "new_solution": "    total_count = 0\n    for nums in nums_list:\n        total_count += specialFilter(nums)\n    return total_count\n\n",
        "test_code": "\nassert totalSpecialFilter([[15, -73, 14, -15], [33, -2, -3, 45, 21, 109]]) == 3\nassert totalSpecialFilter([[10, 20, 30], [40, 50, 60]]) == 0\nassert totalSpecialFilter([[11, 13, 15], [17, 19, 21]]) == 5\nassert totalSpecialFilter([[12, 14, 16], [18, 20, 22]]) == 0\nassert totalSpecialFilter([[111, 113, 115], [117, 119, 121]]) == 6"
    },
    {
        "id": 147,
        "raw_problem": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n",
        "raw_solution": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "new_problem": "# Given a list of positive integers, you need to find the number of valid quadruples (a[i], a[j], a[k], a[l]) where i < j < k < l, and the sum of the elements in each quadruple is a multiple of 3. To solve this problem, you can use the function `get_max_triples` to find the number of valid triples for each subset of three elements in the list, and then combine these results to find the number of valid quadruples.\n\ndef get_max_quadruples(nums):\n",
        "new_solution": "    count = 0\n    n = len(nums)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (nums[i] + nums[j] + nums[k]) % 3 == 0:\n                    for l in range(k + 1, n):\n                        if (nums[i] + nums[j] + nums[k] + nums[l]) % 3 == 0:\n                            count += 1\n    return count\n\n",
        "test_code": "\nassert get_max_quadruples([1, 3, 7, 13, 21]) == 1\nassert get_max_quadruples([1, 2, 3, 4, 5]) == 0\nassert get_max_quadruples([3, 6, 9, 12, 15]) == 5"
    },
    {
        "id": 148,
        "raw_problem": "\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n",
        "raw_solution": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "new_problem": "# Given a list of planet names, find the shortest path that visits each planet exactly once and returns to the starting planet. The path should be determined by the proximity of the planets to the sun, as defined in the raw question. If the list contains invalid planet names, return an empty list. If the list contains only one valid planet, return that planet as a single-element list.\ndef find_shortest_path(planets):\n",
        "new_solution": "    if not planets: \n        return [] \n    valid_planets = [planet for planet in planets if planet in ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']] \n    if len(valid_planets) != len(planets): \n        return [] \n    if len(valid_planets) == 1: \n        return valid_planets \n    sorted_planets = sorted(valid_planets, key=lambda x: ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'].index(x)) \n    path = [] \n    for i in range(len(sorted_planets) - 1): \n        path.extend(bf(sorted_planets[i], sorted_planets[i + 1])) \n    path.append(sorted_planets[-1]) \n    return path\n\n",
        "test_code": "\nassert find_shortest_path(['Jupiter', 'Neptune']) == ['Saturn', 'Uranus', 'Neptune']\nassert find_shortest_path(['Earth', 'Mercury']) == ['Venus', 'Earth']\nassert find_shortest_path(['Mercury', 'Uranus']) == ['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus']\nassert find_shortest_path(['Pluto', 'Earth']) == []\nassert find_shortest_path(['Mars']) == ['Mars']"
    },
    {
        "id": 149,
        "raw_problem": "\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n",
        "raw_solution": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "new_problem": "# Given a list of lists of strings, where each list of strings is sorted by the rules defined in the raw question, write a function that merges all these lists into a single sorted list. The merged list should also follow the same sorting rules: sorted by length of each word in ascending order, and alphabetically for words of the same length. The function should return the merged list of strings.\ndef merge_sorted_lists(list_of_lists):\n",
        "new_solution": "    merged_list = []\n    for lst in list_of_lists:\n        merged_list.extend(sorted_list_sum(lst))\n    return sorted(merged_list, key=lambda x: (len(x), x))\n\n",
        "test_code": "\nassert merge_sorted_lists([['aa', 'a', 'aaa'], ['ab', 'a', 'aaa', 'cd']]) == ['aa', 'ab', 'cd']\nassert merge_sorted_lists([['bb', 'b', 'bbb'], ['cc', 'c', 'ccc', 'dd']]) == ['bb', 'cc', 'dd']\nassert merge_sorted_lists([['aa', 'a', 'aaa'], ['aa', 'a', 'aaa']]) == ['aa', 'aa']\nassert merge_sorted_lists([['ab', 'a', 'aaa', 'cd'], ['bb', 'b', 'bbb', 'cc']]) == ['ab', 'bb', 'cc', 'cd']"
    },
    {
        "id": 150,
        "raw_problem": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n",
        "raw_solution": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
        "new_problem": "# Given a list of integers, determine the sum of the values of x for all prime numbers in the list and the sum of the values of y for all non-prime numbers in the list. The function should take a list of integers, a list of x values, and a list of y values as inputs. The length of the list of integers will always be equal to the length of the lists of x and y values.\n\ndef sum_x_or_y(numbers, x_values, y_values):\n",
        "new_solution": "    sum_x = 0\n    sum_y = 0\n    for n, x, y in zip(numbers, x_values, y_values):\n        if x_or_y(n, x, y) == x:\n            sum_x += x\n        else:\n            sum_y += y\n    return sum_x, sum_y\n\n",
        "test_code": "\nassert sum_x_or_y([7, 15], [34, 8], [12, 5]) == (34, 5)\nassert sum_x_or_y([2, 4, 6], [1, 2, 3], [4, 5, 6]) == (1, 11)\nassert sum_x_or_y([11, 13, 17], [10, 20, 30], [5, 15, 25]) == (60, 0)\nassert sum_x_or_y([1, 4, 6, 8], [1, 2, 3, 4], [5, 6, 7, 8]) == (0, 26)"
    },
    {
        "id": 151,
        "raw_problem": "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n",
        "raw_solution": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "new_problem": "# Given a list of lists of numbers, return the sum of squares of the numbers in each sublist that are odd. Ignore numbers that are negative or not integers. If a sublist is empty, its contribution to the total sum should be 0. Finally, return the total sum of these sums.\ndef sum_of_double_differences(lst_of_lsts):\n",
        "new_solution": "    total_sum = 0\n    for lst in lst_of_lsts:\n        total_sum += double_the_difference(lst)\n    return total_sum\n\n",
        "test_code": "\nassert sum_of_double_differences([[1, 3, 2, 0], [-1, -2, 0], [9, -2], [0]]) == 91\nassert sum_of_double_differences([[], [1, 3], [5, 7, 9], [-1, -3, -5]]) == 165\nassert sum_of_double_differences([[0], [0], [0]]) == 0\nassert sum_of_double_differences([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]) == 165"
    },
    {
        "id": 152,
        "raw_problem": "\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n",
        "raw_solution": "    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "new_problem": "# You are given a list of matches with their actual scores and a list of guesses for each match. Each match has multiple rounds, and you need to determine how far off each guess was for each round. The input consists of a list of matches, where each match is represented by a tuple containing the actual scores and the guesses for each round. Your task is to return a list of lists, where each sublist corresponds to a match and contains the differences for each round. If the guess is correct, the difference is 0; otherwise, it is the absolute difference between the guess and the actual score.\ndef compare_matches(matches):\n",
        "new_solution": "    results = []\n    for match in matches:\n        actual_scores, guesses = match\n        round_differences = compare(actual_scores, guesses)\n        results.append(round_differences)\n    return results\n\n# Helper function from the raw question\n# def compare(game, guess):\n#     return [abs(g - s) if g != s else 0 for s, g in zip(game, guess)]\n\n",
        "test_code": "\nassert compare_matches([([1, 2, 3], [1, 2, 3]), ([4, 5, 6], [4, 5, 6])]) == [[0, 0, 0], [0, 0, 0]]\nassert compare_matches([([1, 2, 3], [1, 2, 4]), ([4, 5, 6], [4, 5, 7])]) == [[0, 0, 1], [0, 0, 1]]\nassert compare_matches([([1, 2, 3], [1, 2, 4]), ([4, 5, 6], [4, 5, 7])]) == [[0, 0, 1], [0, 0, 1]]\nassert compare_matches([([1, 2, 3], [1, 2, 4]), ([4, 5, 6], [4, 5, 7])]) == [[0, 0, 1], [0, 0, 1]]\nassert compare_matches([([1, 2, 3], [1, 2, 4]), ([4, 5, 6], [4, 5, 7])]) == [[0, 0, 1], [0, 0, 1]]"
    },
    {
        "id": 153,
        "raw_problem": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n",
        "raw_solution": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "new_problem": "# Given a list of classes with their respective extensions, determine the strongest extension for each class and return a list of strings in the format: ClassName.StrongestExtensionName. If a class has no extensions, it should be represented as ClassName.None. The strength of an extension is calculated as the difference between the number of uppercase letters and the number of lowercase letters in the extension's name. If there are two or more extensions with the same strength, choose the one that comes first in the list.\ndef Strongest_Extensions(classes_with_extensions):\n",
        "new_solution": "    if not classes_with_extensions:  # Check if the input dictionary is empty\n        return []\n    \n    results = []\n    for class_name, extensions in classes_with_extensions.items():\n        if not extensions:  # Check if the extensions list is empty\n            results.append(f\"{class_name}.None\")\n        else:\n            results.append(Strongest_Extension(class_name, extensions))\n    \n    return results\n\n",
        "test_code": "\nassert Strongest_Extensions({'Slices': ['SErviNGSliCes', 'Cheese', 'StuFfed'], 'my_class': ['AA', 'Be', 'CC']}) == ['Slices.SErviNGSliCes', 'my_class.AA']\nassert Strongest_Extensions({'Empty': [], 'Single': ['A']}) == ['Empty.None', 'Single.A']\nassert Strongest_Extensions({'Mixed': ['aA', 'Bb', 'Cc'], 'AllCaps': ['AA', 'BB', 'CC']}) == ['Mixed.aA', 'AllCaps.AA']\nassert Strongest_Extensions({'NoExtensions': []}) == ['NoExtensions.None']\nassert Strongest_Extensions({}) == []  # Check for empty input\n"
    },
    {
        "id": 154,
        "raw_problem": "\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n",
        "raw_solution": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "new_problem": "# Given a list of words, determine if each word in the list can be transformed into a valid rotation of any other word in the list. A valid rotation means that if you rotate the word any number of times, it will become a substring of another word in the list. Return a list of boolean values indicating whether each word can be transformed into a valid rotation of any other word in the list.\ndef valid_rotations(words):\n",
        "new_solution": "    results = []\n    for i in range(len(words)):\n        valid = False\n        for j in range(len(words)):\n            if i != j:\n                valid = cycpattern_check(words[j], words[i])\n                if valid:\n                    break\n        results.append(valid)\n    return results\n\n",
        "test_code": "\nassert valid_rotations(['abcd', 'abd']) == [False, False]\nassert valid_rotations(['hello', 'ell']) == [False, True]\nassert valid_rotations(['whassup', 'psus']) == [False, False]\nassert valid_rotations(['abab', 'baa']) == [False, True]\nassert valid_rotations(['efef', 'eeff']) == [False, False]\nassert valid_rotations(['himenss', 'simen']) == [False, True]"
    },
    {
        "id": 155,
        "raw_problem": "\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n",
        "raw_solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "new_problem": "# Given a list of integers, return a tuple where the first element is the total number of even digits across all integers in the list, and the second element is the total number of odd digits across all integers in the list.\ndef total_even_odd_count(nums):\n",
        "new_solution": "    even_count = 0\n    odd_count = 0\n    for num in nums:\n        evens, odds = even_odd_count(num)\n        even_count += evens\n        odd_count += odds\n    return (even_count, odd_count)\n\n",
        "test_code": "\nassert total_even_odd_count([-12, 123]) == (2, 3)\nassert total_even_odd_count([0, 111, 222]) == (4, 3)\nassert total_even_odd_count([13579, 24680]) == (5, 5)\nassert total_even_odd_count([-24680, 13579]) == (5, 5)"
    },
    {
        "id": 156,
        "raw_problem": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n",
        "raw_solution": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "new_problem": "# Given a list of positive integers, obtain their roman numeral equivalents as a list of strings, each in lowercase. Restrictions: Each integer in the list should be within the range 1 to 1000.\ndef list_to_mini_roman(numbers):\n",
        "new_solution": "    return [int_to_mini_roman(num) for num in numbers]\n\n",
        "test_code": "\nassert list_to_mini_roman([19, 152, 426]) == ['xix', 'clii', 'cdxxvi']\nassert list_to_mini_roman([1, 1000, 500]) == ['i', 'm', 'd']\nassert list_to_mini_roman([399, 888, 999]) == ['cccxcix', 'dccclxxxviii', 'cmxcix']"
    },
    {
        "id": 157,
        "raw_problem": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n",
        "raw_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "new_problem": "# Given a list of tuples, where each tuple contains three integers representing the sides of a triangle, determine the number of right-angled triangles in the list. A right-angled triangle is defined as a triangle in which one angle is 90 degrees.\ndef count_right_angle_triangles(triangles):\n",
        "new_solution": "    count = 0\n    for a, b, c in triangles:\n        if right_angle_triangle(a, b, c):\n            count += 1\n    return count\n\n",
        "test_code": "\nassert count_right_angle_triangles([(3, 4, 5), (1, 2, 3), (5, 12, 13)]) == 2\nassert count_right_angle_triangles([(1, 1, 1), (2, 2, 2), (3, 3, 3)]) == 0\nassert count_right_angle_triangles([(6, 8, 10), (7, 24, 25), (8, 15, 17)]) == 3\nassert count_right_angle_triangles([(10, 20, 30), (15, 20, 25), (20, 21, 29)]) == 2"
    },
    {
        "id": 158,
        "raw_problem": "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n",
        "raw_solution": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
        "new_problem": "# Given a list of lists of strings, where each sublist represents a category of words, write a function that returns a list of the words with the maximum number of unique characters from each category. If multiple words in a category have the maximum number of unique characters, return the one which comes first in lexicographical order. If a category is empty, append 'None' to the result list.\ndef find_max_in_categories(categories):\n",
        "new_solution": "    result = []\n    for category in categories:\n        if not category:\n            result.append('None')\n        else:\n            result.append(find_max(category))\n    return result\n\n",
        "test_code": "\nassert find_max_in_categories([['name', 'of', 'string'], ['name', 'enam', 'game'], ['aaaaaaa', 'bb', 'cc']]) == ['string', 'enam', 'aaaaaaa']\nassert find_max_in_categories([[], ['apple', 'banana', 'cherry'], ['dog', 'elephant']]) == ['None', 'cherry', 'elephant']\nassert find_max_in_categories([['a', 'b', 'c'], [], ['x', 'y', 'z']]) == ['a', 'None', 'x']"
    },
    {
        "id": 159,
        "raw_problem": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n",
        "raw_solution": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
        "new_problem": "# You are a farmer who needs to feed a group of hungry rabbits. Each rabbit has a specific number of carrots it has already eaten and a specific number it still needs to eat. You have a limited number of carrots in stock. Write a function that takes in a list of rabbits, where each rabbit is represented by a tuple (number, need), and the total number of carrots in stock. The function should return the total number of carrots eaten by all rabbits and the number of carrots left in stock after feeding all the rabbits.\n\ndef feed_rabbits(rabbits, stock):\n",
        "new_solution": "    total_eaten = 0\n    remaining_carrots = stock\n    for rabbit in rabbits:\n        number, need = rabbit\n        eaten, remaining_carrots = eat(number, need, remaining_carrots)\n        total_eaten += eaten - number\n    return [total_eaten, remaining_carrots]\n\n",
        "test_code": "\nassert feed_rabbits([(5, 6), (4, 8), (1, 10)], 25) == [24, 1]\nassert feed_rabbits([(2, 11), (3, 5), (4, 7)], 20) == [20, 0]\nassert feed_rabbits([(0, 5), (5, 5), (10, 5)], 30) == [15, 15]\nassert feed_rabbits([(1, 10), (2, 11), (3, 12)], 50) == [33, 17]"
    },
    {
        "id": 160,
        "raw_problem": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n",
        "raw_solution": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "new_problem": "# Given a list of algebraic expressions represented by pairs of operator and operand lists, evaluate each expression and then perform a final operation on all the results to obtain a single final value. The final operation is specified as a tuple ('final_operator', final_operand), where 'final_operator' is one of the basic algebra operations ('+', '-', '*', '//', '**') and 'final_operand' is an integer. The final operation should be applied to all the evaluated results from the expressions. For example, if the final operation is ('+', 0), it means summing all the results. If the final operation is ('*', 1), it means multiplying all the results.\n\ndef solve_complex_algebra(expressions, final_operation_tuple):\n",
        "new_solution": "    results = []\n    for operators, operands in expressions:\n        result = do_algebra(operators, operands)\n        results.append(result)\n    final_operator, final_operand = final_operation_tuple\n\n    if final_operator == '+':\n        return sum(results) + final_operand\n    elif final_operator == '-':\n        return (results[0] - sum(results[1:])) - final_operand\n    elif final_operator == '*':\n        product = 1\n        for result in results:\n            product *= result\n        return product * final_operand\n    elif final_operator == '//':\n        quotient = results[0]\n        for result in results[1:]:\n            quotient //= result\n        return quotient // final_operand\n    elif final_operator == '**':\n        power = results[0]\n        for result in results[1:]:\n            power **= result\n        return power ** final_operand\n    \n    return results, final_operator, final_operand\n\n",
        "test_code": "\nassert solve_complex_algebra([(['+', '*', '-'], [2, 3, 4, 5]), (['*', '//'], [6, 2, 3])], ('+', 0)) == 13\nassert solve_complex_algebra([(['**', '-'], [2, 3, 4]), (['//', '+'], [8, 2, 1])], ('*', 1)) == 20\nassert solve_complex_algebra([(['+', '-'], [10, 5, 3]), (['*', '//'], [4, 2, 1])], ('-', 2)) == 2"
    },
    {
        "id": 161,
        "raw_problem": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n",
        "raw_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "new_problem": "# You are given a list of strings. For each string, if it contains at least one letter, reverse its case for all letters in the string. If a string contains no letters, reverse the entire string. After processing all strings, concatenate the results into a single string. Finally, reverse the case of all letters in the concatenated result. Return the final string.\ndef new_solve(strings):\n",
        "new_solution": "    processed_strings = [solve(s) for s in strings]\n    concatenated_result = ''.join(processed_strings)\n    return solve(concatenated_result)\n\n",
        "test_code": "\nassert new_solve(['1234', 'ab', '#a@C']) == '4321ab#a@C'\nassert new_solve(['#', 'a', 'B']) == '#aB'\nassert new_solve(['', '1', 'A']) == '1A'\nassert new_solve(['abc', 'DEF', '123']) == 'abcDEF321'"
    },
    {
        "id": 162,
        "raw_problem": "\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n",
        "raw_solution": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
        "new_problem": "# Given a list of strings, return a dictionary where each key is a string from the list and the value is the md5 hash of the string. If a string is empty, its corresponding value in the dictionary should be None. Additionally, if the list contains duplicate strings, the dictionary should only include the first occurrence of each string.\ndef list_to_md5_dict(string_list):\n",
        "new_solution": "    seen = set()\n    md5_dict = {}\n    for text in string_list:\n        if text not in seen:\n            seen.add(text)\n            md5_dict[text] = string_to_md5(text)\n    return md5_dict\n\n",
        "test_code": "\nassert list_to_md5_dict(['Hello world', '', 'Python', 'Hello world']) == {'Hello world': '3e25960a79dbc69b674cd4ec67a72c62', '': None, 'Python': 'a7f5f35426b927411fc9231b56382173'}"
    },
    {
        "id": 163,
        "raw_problem": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n",
        "raw_solution": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "new_problem": "# Given a list of tuples, where each tuple contains two positive integers, return a list of lists where each sublist contains the even digits between the two integers in the corresponding tuple, in ascending order. If a tuple contains integers that are the same, the sublist should be an empty list.\ndef generate_even_digits_lists(tuples_list):\n",
        "new_solution": "    result = []\n    for a, b in tuples_list:\n        result.append(generate_integers(a, b))\n    return result\n\n",
        "test_code": "\nassert generate_even_digits_lists([(2, 8), (8, 2), (10, 14)]) == [[2, 4, 6, 8], [2, 4, 6, 8], []]\nassert generate_even_digits_lists([(1, 5), (6, 10), (12, 12)]) == [[2, 4], [6, 8], []]\nassert generate_even_digits_lists([(1, 1), (2, 2), (3, 3)]) == [[], [2], []]"
    }
]
